{
  "tagPrefix": "",
  "excludeRootFolder": false,
  "tagsPropertyName": "tags",
  "spaceReplacement": "-",
  "specialCharReplacement": "-",
  "lowercaseTags": true,
  "knownProperties": [],
  "rules": [
    {
      "id": "214f3745-a2e6-47b0-a51f-95dfc0c637b4",
      "active": true,
      "asLink": false,
      "addContent": "end",
      "property": "tags",
      "value": [
        "Tiere",
        "Vögel"
      ],
      "customProperty": "",
      "type": "tags",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "folders",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const result = path.split('/');\n  result.pop(); // remove the file name\n  return result;\n}",
      "jsCode": "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result; // return you result.\n}",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "-",
      "specialCharReplacement": "_",
      "lowercaseTags": false,
      "formatter": "toLowerCase",
      "inputProperty": "",
      "onlyModify": false,
      "useCustomCode": true,
      "optionsConfig": {
        "214f3745-a2e6-47b0-a51f-95dfc0c637b4": {
          "inputProperties": [
            "sidecar-tags",
            "user-tags",
            "file-folder-path"
          ],
          "onlyWhenAllPropertiesExist": false,
          "spaceReplacement": "-",
          "specialCharReplacement": "_",
          "delimiter": " ,"
        }
      }
    },
    {
      "id": "ec9bed27-1680-4592-a5b7-c8faa2adcb6f",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "fullPath",
      "value": "Tiere/Vögel/Rabe.md",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "fullPathExtFolderNotes",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  parts.pop();\n  if (parts[parts.length-1] === file.basename) parts.pop();\n  parts.push(file.basename);\n  return parts.join('/');\n};",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "inputProperty": "",
      "onlyModify": false,
      "useCustomCode": false,
      "linkFormatter": "toOriginalLink",
      "optionsConfig": {
        "ec9bed27-1680-4592-a5b7-c8faa2adcb6f": {
          "delimiter": " ",
          "inputProperties": [
            ""
          ],
          "onlyWhenAllPropertiesExist": true
        }
      }
    },
    {
      "id": "365b81ab-48a1-4dea-8d92-af5fd0b5275e",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "path",
      "value": "[[Tiere/Vögel/Rabe|Wombats 🐻]]",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "fullPathFolderNotes",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  parts.pop();\n  if (parts[parts.length-1] === file.basename) parts.pop();\n  parts.push(file.basename);\n  return `[[${parts.join('/')}|${tools.getFrontmatterProperty('constant')}]]`;\n};",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": true,
      "linkFormatter": "toOriginalLink",
      "optionsConfig": {
        "365b81ab-48a1-4dea-8d92-af5fd0b5275e": {
          "constantValue": ""
        }
      }
    },
    {
      "id": "3a16d7ed-0f85-47a4-8c46-0192a74f2652",
      "active": true,
      "asLink": false,
      "addContent": "end",
      "property": "location",
      "value": [
        "Konstante"
      ],
      "customProperty": "",
      "type": "multitext",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "constant",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "3a16d7ed-0f85-47a4-8c46-0192a74f2652": {
          "constantValue": "Neue Konstante",
          "addTemplate": true,
          "askConfirmation": true,
          "destinationFolder": "/category/locations/location",
          "templateFile": "global/template/t_location.md"
        }
      },
      "linkFormatter": "toOriginalLink"
    },
    {
      "id": "d4a90709-f220-41aa-93f5-f28a2e96995c",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "dateTimeCreated",
      "value": "",
      "customProperty": "",
      "type": "datetime",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "dateTimeCreated",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result; // return you result.\n}",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toLinkOriginal",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": true
    },
    {
      "id": "7cc4ba02-f23e-49c0-9ad5-59dcafd68a62",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "link",
      "value": [
        "Tiere",
        "Vögel"
      ],
      "customProperty": "",
      "type": "multitext",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "folders",
      "buildInCode": "",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false
    },
    {
      "id": "37660875-87bf-4cf3-9b75-f2f75a791fb2",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "folders",
      "value": [
        "Tiere",
        "Vögel"
      ],
      "customProperty": "",
      "type": "multitext",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "folders",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const result = path.split('/');\n  result.pop(); // remove the file name\n  return result;\n}",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toLowerCase",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "37660875-87bf-4cf3-9b75-f2f75a791fb2": {
          "replace": "ö",
          "replaceBy": "oe",
          "delimiter": " ",
          "inputProperties": [
            ""
          ],
          "onlyWhenAllPropertiesExist": true
        }
      }
    },
    {
      "id": "ebb14d96-b63a-4984-b21f-63b4f9aa4a2f",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "title",
      "value": "Property not found",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "getProperty",
      "buildInCode": "",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toTitleCaseDe",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "ebb14d96-b63a-4984-b21f-63b4f9aa4a2f": {
          "inputProperty": "#?:{}\"'",
          "smallWords": "der|die|das|den|dem|des|einer|eines|deren|ein|eine|einem|einer|eines|einer|und|oder|aber|denn|sondern|sowie|weder|noch|entweder|oder|dass|weil|obwohl|wenn|als|nachdem|bevor|während|bis|damit|um|zu|sobald|solange|da|indem|so|dass|ohne|zu|durch|für|gegen|ohne|um|bis|aus|außer|bei|gegenüber|mit|nach|seit|von|zu|anstatt|aufgrund|außerhalb|innerhalb|trotz|während|wegen|an|auf|hinter|in|neben|über|unter|vor|zwischen",
          "doNotCapitalizeSmallWords": true
        }
      }
    },
    {
      "id": "590159bc-7b9c-4aff-b559-b99db9ba386d",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "rootFolder",
      "value": "Rabe",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "name",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file name\n  const result = tools.removeAllExtensions(file.name);\n  return result;\n}",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toUpperCase",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false
    },
    {
      "id": "38379907-3458-4e66-9cbf-53fd7d1991de",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "isroot",
      "value": false,
      "customProperty": "",
      "type": "checkbox",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "isRoot",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  return parts.length === 1;\n};",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false
    },
    {
      "id": "9d4e4181-3025-44ea-ba31-aef6f18efb1c",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "autocompleteTest.Text",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "script",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  const input = \"test\";\n  return input; // Return the input unaltered\n};",
      "jsCode": "function (app, file, tools) { // do not change this line!\n  let result = 'Test';\n  return result; // return you result.\n}",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": true,
      "value": "test"
    },
    {
      "id": "0f337f99-ad3c-471e-8c9c-f670ba21abc7",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "Localtion.type",
      "value": "[[Tiere/Vögel/Rabe.md|Wombats 🐻]]",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "concatProperties",
      "buildInCode": "function(app: App | undefined, file: TFile, tools: ScriptingTools) { // do not change this line! \n const propertyIds = tools.getOptionConfig(tools.getRule()?.id,'inputProperties'); \n if (!Array.isArray(propertyIds) || propertyIds.length === 0) { \n return 'No properties selected'; \n } \n const results = propertyIds.map(id => tools.getFrontmatterProperty(id)); \n return results.filter(res => res !== undefined).join(' '); \n }",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toTitleCaseDe",
      "linkFormatter": "toSimpleLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "0f337f99-ad3c-471e-8c9c-f670ba21abc7": {
          "delimiter": "|",
          "inputProperties": [
            "fullPath",
            "constant"
          ],
          "onlyWhenAllPropertiesExist": true,
          "smallWords": "der|die|das|den|dem|des|einer|eines|deren|ein|eine|einem|einer|eines|einer|und|oder|aber|denn|sondern|sowie|weder|noch|entweder|oder|dass|weil|obwohl|wenn|als|nachdem|bevor|während|bis|damit|um|zu|sobald|solange|da|indem|so|dass|ohne|zu|durch|für|gegen|ohne|um|bis|aus|außer|bei|gegenüber|mit|nach|seit|von|zu|anstatt|aufgrund|außerhalb|innerhalb|trotz|während|wegen|an|auf|hinter|in|neben|über|unter|vor|zwischen",
          "doNotCapitalizeSmallWords": true
        }
      }
    },
    {
      "id": "797182ad-b5d4-4032-89fe-8e569ed875c4",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "location-type",
      "value": "#wombats????ENDE",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "concatProperties",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  const propertyIds = tools.getOptionConfig(tools.getRule()?.id,'inputProperties');\n  if (!Array.isArray(propertyIds) || propertyIds.length === 0) {\n    return 'No properties selected';\n  }\n  const delimiter = tools.getOptionConfig(tools.getRule()?.id,'delimiter');\n  const onlyWhenAllPropertiesExist = tools.getOptionConfig(tools.getRule()?.id, 'onlyWhenAllPropertiesExist') || false;\n  if (onlyWhenAllPropertiesExist) {\n    // Check if all properties exist\n    const allExist = propertyIds.every(id => { \n      if (id === undefined || id === null || id === '') {\n        return true; // Skip empty or undefined property IDs\n      }\n      const propertyValue = tools.getFrontmatterProperty(id);\n      const result = propertyValue !== undefined && propertyValue !== null && propertyValue !== '';\n      return result;\n    });\n    if (!allExist) {\n      return '';\n    }\n  }\n  const result = propertyIds.map(id => {\n    let value = tools.getFrontmatterProperty(id);\n    if (value === undefined || value === null || value === '') {\n      return ''; // Skip empty or undefined properties\n    }\n    return value.toString();\n  }).filter(res => res !== undefined).join(delimiter);\n  return result;\n};",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": true,
      "optionsConfig": {
        "797182ad-b5d4-4032-89fe-8e569ed875c4": {
          "delimiter": " ",
          "inputProperties": [
            "constant",
            "ddd"
          ],
          "onlyWhenAllPropertiesExist": false,
          "specialCharReplacement": "?",
          "spaceReplacement": "_",
          "prefix": "#",
          "suffix": "ENDE",
          "smallWords": "der|die|das|den|dem|des|einer|eines|deren|ein|eine|einem|einer|eines|einer|und|oder|aber|denn|sondern|sowie|weder|noch|entweder|oder|dass|weil|obwohl|wenn|als|nachdem|bevor|während|bis|damit|um|zu|sobald|solange|da|indem|so|dass|ohne|zu|durch|für|gegen|ohne|um|bis|aus|außer|bei|gegenüber|mit|nach|seit|von|zu|anstatt|aufgrund|außerhalb|innerhalb|trotz|während|wegen|an|auf|hinter|in|neben|über|unter|vor|zwischen",
          "doNotCapitalizeSmallWords": true,
          "constantValue": ""
        }
      },
      "formatters": [
        "replaceSpecialChars",
        "toLowerCase",
        "addPrefix",
        "addSuffix",
        "replaceSpaces"
      ]
    },
    {
      "id": "9f71fdc0-6552-45d5-a05b-f3656c658ba8",
      "active": true,
      "asLink": false,
      "addContent": "end",
      "property": "aliases",
      "value": [
        "Vögel"
      ],
      "customProperty": "",
      "type": "aliases",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "folder",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  const input = tools.getCurrentContent(); // Get the current content of property\n  return input; // Return the input unaltered\n};",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "9f71fdc0-6552-45d5-a05b-f3656c658ba8": {
          "constantValue": "Eins,Zwei"
        }
      }
    },
    {
      "id": "0541dccd-85c9-449a-ae9a-836c07ea883a",
      "active": true,
      "asLink": false,
      "addContent": "end",
      "property": "aliases",
      "value": [
        "Tiere"
      ],
      "customProperty": "",
      "type": "aliases",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "rootFolder",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  return parts.length > 1 ? parts[0] : ''; // return root folder or empty string if in root\n}",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "0541dccd-85c9-449a-ae9a-836c07ea883a": {
          "constantValue": "Test",
          "prefix": "#"
        }
      }
    },
    {
      "id": "3beeb7ec-bc57-4273-b6bd-eadb53d29062",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "fileName",
      "value": "Rabe",
      "customProperty": "",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "name",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file name\n  const result = tools.removeAllExtensions(file.name);\n  return result;\n}",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "formatters": [
        "toOriginal"
      ],
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false
    },
    {
      "id": "67cce546-f574-44ec-b670-dcfa2f69e006",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "list",
      "value": "",
      "customProperty": "",
      "type": "multitext",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "concatProperties",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  const propertyIds = tools.getOptionConfig(tools.getRule()?.id,'inputProperties');\n  if (!Array.isArray(propertyIds) || propertyIds.length === 0) {\n    return 'No properties selected';\n  }\n  const delimiter = tools.getOptionConfig(tools.getRule()?.id,'delimiter');\n  const onlyWhenAllPropertiesExist = tools.getOptionConfig(tools.getRule()?.id, 'onlyWhenAllPropertiesExist') || false;\n  if (onlyWhenAllPropertiesExist) {\n    // Check if all properties exist\n    const allExist = propertyIds.every(id => { \n      if (id === undefined || id === null || id === '') {\n        return true; // Skip empty or undefined property IDs\n      }\n      const propertyValue = tools.getFrontmatterProperty(id);\n      const result = propertyValue !== undefined && propertyValue !== null && propertyValue !== '';\n      return result;\n    });\n    if (!allExist) {\n      return '';\n    }\n  }\n  const result = propertyIds.map(id => {\n    let value = tools.getFrontmatterProperty(id);\n    if (value === undefined || value === null || value === '') {\n      return ''; // Skip empty or undefined properties\n    }\n    return value.toString();\n  }).filter(res => res !== undefined).join(delimiter);\n  return result;\n};",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "formatters": [
        "replaceSpaces"
      ],
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "67cce546-f574-44ec-b670-dcfa2f69e006": {
          "spaceReplacement": "",
          "delimiter": " ",
          "inputProperties": [
            "folders",
            "aliases"
          ],
          "onlyWhenAllPropertiesExist": true
        }
      }
    }
  ],
  "useTextArea": false,
  "exclude": {
    "selectedFolders": [
      "/global"
    ],
    "selectedFiles": [],
    "mode": "exclude"
  },
  "include": {
    "selectedFolders": [],
    "selectedFiles": [],
    "mode": "include"
  },
  "configuredProperties": [
    {
      "name": ""
    }
  ],
  "debugLevel": 6,
  "delayCreateEvent": 1000,
  "folderConfig": {
    "folders": [
      {
        "id": "f7bee2a6-b7e1-4f46-bfc8-92bd0ce65f12",
        "name": "Testing",
        "disabled": true,
        "collapsed": false
      },
      {
        "id": "79464f6c-42dc-45a8-86f3-123a0ae93b4a",
        "name": "Auto Location",
        "disabled": false,
        "collapsed": true
      },
      {
        "id": "6b347cd1-a79b-485b-818b-0619a7fd0ce0",
        "name": "Concat Test",
        "disabled": false,
        "collapsed": false
      }
    ],
    "rows": [
      {
        "id": "74ac7a24-4081-4fe5-8104-4c4788017d7e",
        "folderId": "6b347cd1-a79b-485b-818b-0619a7fd0ce0",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "86a939b0-28c4-4b7b-8d77-a3b87878b99d",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "Concat-List",
          "value": "",
          "customProperty": "",
          "type": "multitext",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "getProperties",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const propertyIds = tools.getOptionConfig(tools.getRule()?.id,'inputProperties');\n  if (!Array.isArray(propertyIds) || propertyIds.length === 0) {\n    return 'No properties selected';\n  }\n  const delimiter = tools.getOptionConfig(tools.getRule()?.id,'delimiter');\n  const onlyWhenAllPropertiesExist = tools.getOptionConfig(tools.getRule()?.id, 'onlyWhenAllPropertiesExist') || false;\n  if (onlyWhenAllPropertiesExist) {\n    // Check if all properties exist\n    const allExist = propertyIds.every(id => { \n      if (id === undefined || id === null || id === '') {\n        return true; // Skip empty or undefined property IDs\n      }\n      const propertyValue = tools.getFrontmatterProperty(id);\n      const result = propertyValue !== undefined && propertyValue !== null && propertyValue !== '';\n      return result;\n    });\n    if (!allExist) {\n      return '';\n    }\n  }\n  const result = propertyIds.map(id => {\n    let value = tools.getFrontmatterProperty(id);\n    if (value === undefined || value === null || value === '') {\n      return ''; // Skip empty or undefined properties\n    }\n    return value.toString();\n  }).filter(res => res !== undefined).join(delimiter);\n  return result;\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatter": "toOriginal",
          "formatters": [
            "toOriginal"
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "optionsConfig": {
            "86a939b0-28c4-4b7b-8d77-a3b87878b99d": {
              "propertyDelimiter": "",
              "inputProperties": [
                "List-1",
                "List-2",
                "List-3",
                "Text"
              ],
              "onlyWhenAllPropertiesExist": false
            }
          },
          "keywords": [
            "concatArrays"
          ]
        }
      },
      {
        "id": "03ac47b1-bf3f-4a33-ac1b-71bf1a516f3b",
        "folderId": "6b347cd1-a79b-485b-818b-0619a7fd0ce0",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "cfb936f0-a93a-499f-ab85-10d20aa0ba2b",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "Concat-Text",
          "value": "",
          "customProperty": "",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "getProperties",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const propertyIds = tools.getOptionConfig(tools.getRule()?.id,'inputProperties');\n  if (!Array.isArray(propertyIds) || propertyIds.length === 0) {\n    return 'No properties selected';\n  }\n  const delimiter = tools.getOptionConfig(tools.getRule()?.id,'delimiter');\n  const onlyWhenAllPropertiesExist = tools.getOptionConfig(tools.getRule()?.id, 'onlyWhenAllPropertiesExist') || false;\n  if (onlyWhenAllPropertiesExist) {\n    // Check if all properties exist\n    const allExist = propertyIds.every(id => { \n      if (id === undefined || id === null || id === '') {\n        return true; // Skip empty or undefined property IDs\n      }\n      const propertyValue = tools.getFrontmatterProperty(id);\n      const result = propertyValue !== undefined && propertyValue !== null && propertyValue !== '';\n      return result;\n    });\n    if (!allExist) {\n      return '';\n    }\n  }\n  const result = propertyIds.map(id => {\n    let value = tools.getFrontmatterProperty(id);\n    if (value === undefined || value === null || value === '') {\n      return ''; // Skip empty or undefined properties\n    }\n    return value.toString();\n  }).filter(res => res !== undefined).join(delimiter);\n  return result;\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatter": "toOriginal",
          "formatters": [
            "toOriginal"
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "optionsConfig": {
            "cfb936f0-a93a-499f-ab85-10d20aa0ba2b": {
              "propertyDelimiter": "",
              "inputProperties": [
                "List-1",
                "List-2",
                "List-3",
                "Text"
              ],
              "onlyWhenAllPropertiesExist": false
            }
          },
          "keywords": [
            "concatArrays"
          ]
        }
      },
      {
        "id": "5ad96b0d-1828-45ad-bac6-2d6644fa6b27",
        "folderId": "f7bee2a6-b7e1-4f46-bfc8-92bd0ce65f12",
        "keywords": [],
        "disabled": true,
        "payload": {
          "id": "060bdef1-fbd6-492c-aad6-b849b1cd4292",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "list",
          "value": "testValue",
          "customProperty": "",
          "type": "multitext",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "constant",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const result = tools.getOptionConfig(tools.getRule()?.id,'constantValue');\n  return result; // Return the constant value\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatter": "toOriginal",
          "formatters": [
            "toOriginal"
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "optionsConfig": {
            "060bdef1-fbd6-492c-aad6-b849b1cd4292": {
              "constantValue": "testValue"
            }
          },
          "keywords": [
            "constant",
            "Constant value",
            "Returns a constant value instead of the frontmatter parameter."
          ]
        }
      },
      {
        "id": "970768a5-5a70-4ca6-a38e-5fccc6969257",
        "folderId": "79464f6c-42dc-45a8-86f3-123a0ae93b4a",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "1705607a-129f-4ea5-9392-d206b7017a3a",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "location",
          "value": "",
          "customProperty": "",
          "type": "multitext",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "autoLink",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [
              "/category",
              "/global"
            ],
            "selectedFiles": [],
            "mode": "exclude"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatter": "toOriginal",
          "formatters": [
            "toOriginal"
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "keywords": [
            "autoLink",
            "Auto Link (advanced)",
            "Checks if a link exists in a specified folder. If not, it creates a new file based on a specified template and adds a link to it."
          ],
          "optionsConfig": {
            "1705607a-129f-4ea5-9392-d206b7017a3a": {
              "addTemplate": true,
              "askConfirmation": true,
              "destinationFolder": "/",
              "templateFile": ""
            }
          }
        },
        "optionsConfig": {
          "6a962ffa-ffae-4e86-84a6-00faa01622c3": {
            "addTemplate": true,
            "askConfirmation": true,
            "destinationFolder": "/category/locations",
            "templateFile": "global/template/t_location.md"
          }
        }
      },
      {
        "id": "1c697bb3-f34a-4556-b54b-6c98a8a7176f",
        "folderId": "79464f6c-42dc-45a8-86f3-123a0ae93b4a",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "85b8afaa-b844-4bab-acc8-1242fc5614d3",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "location",
          "value": "",
          "customProperty": "",
          "type": "multitext",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "linkToFile",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const parts = file.path.split('/');\n  const rule = tools.getRule();\n  if (!rule) return tools.getCurrentContent();\n  const addExtension = tools.getOptionConfig(rule.id,'addExtension') \n  parts.pop();\n  if (parts[parts.length-1] === file.basename) parts.pop();\n  let fileName = addExtension? file.basename + '.' + file.extension : file.basename; \n  return `[[${parts.join('/')}/${fileName}|${file.basename}]]`;\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [
              "/"
            ],
            "selectedFiles": [],
            "mode": "exclude"
          },
          "include": {
            "selectedFolders": [
              "/category/locations/location"
            ],
            "selectedFiles": [],
            "mode": "include"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatter": "toOriginal",
          "formatters": [
            "toOriginal"
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "keywords": [
            "linkToFile",
            "Create link to file",
            "Create a link to the file in the current vault. Can be configured to include the file extension."
          ],
          "optionsConfig": {
            "85b8afaa-b844-4bab-acc8-1242fc5614d3": {
              "addExtension": true
            }
          }
        }
      },
      {
        "id": "27e9e8ee-daff-4455-8919-d9cc091af658",
        "folderId": "79464f6c-42dc-45a8-86f3-123a0ae93b4a",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "6d244111-37df-45c2-8444-754b4cc29922",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "location-type",
          "value": "country",
          "customProperty": "",
          "type": "text",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "constant",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const result = tools.getOptionConfig(tools.getRule()?.id,'constantValue');\n  return result; // Return the constant value\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatter": "toOriginal",
          "formatters": [
            "toOriginal"
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "keywords": [
            "constant",
            "Constant value",
            "Returns a constant value instead of the frontmatter parameter."
          ],
          "optionsConfig": {
            "6d244111-37df-45c2-8444-754b4cc29922": {
              "constantValue": "country"
            }
          }
        }
      }
    ]
  },
  "liveRules": [],
  "selectedFolders": [
    "/Tiere/Säugetiere",
    "/Tiere/Vögel"
  ],
  "selectedFiles": [
    "Pasted image 20250405063634.png",
    "Pasted image 20250406221918.jpg"
  ],
  "selectionMode": "exclude",
  "selectionDisplay": "folder",
  "jsCode": "function testing (a) {\n  if (a) {\n    //something\n  }\n  return 'huray';\n}"
}