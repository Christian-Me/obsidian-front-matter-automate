{
  "tagPrefix": "",
  "excludeRootFolder": false,
  "tagsPropertyName": "tags",
  "spaceReplacement": "-",
  "specialCharReplacement": "-",
  "lowercaseTags": true,
  "knownProperties": [],
  "rules": [
    {
      "id": "214f3745-a2e6-47b0-a51f-95dfc0c637b4",
      "active": true,
      "asLink": false,
      "addContent": "end",
      "property": "tags",
      "value": [
        "Tiere",
        "Vögel"
      ],
      "customProperty": "",
      "type": "tags",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "folders",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const result = path.split('/');\n  result.pop(); // remove the file name\n  return result;\n}",
      "jsCode": "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result; // return you result.\n}",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "-",
      "specialCharReplacement": "_",
      "lowercaseTags": false,
      "formatter": "toLowerCase",
      "inputProperty": "",
      "onlyModify": false,
      "useCustomCode": true,
      "optionsConfig": {
        "214f3745-a2e6-47b0-a51f-95dfc0c637b4": {
          "inputProperties": [
            "sidecar-tags",
            "user-tags",
            "file-folder-path"
          ],
          "onlyWhenAllPropertiesExist": false,
          "spaceReplacement": "-",
          "specialCharReplacement": "_",
          "delimiter": " ,"
        }
      }
    },
    {
      "id": "ec9bed27-1680-4592-a5b7-c8faa2adcb6f",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "fullPath",
      "value": "Tiere/Vögel/Rabe.md",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "fullPathExtFolderNotes",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  parts.pop();\n  if (parts[parts.length-1] === file.basename) parts.pop();\n  parts.push(file.basename);\n  return parts.join('/');\n};",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "inputProperty": "",
      "onlyModify": false,
      "useCustomCode": false,
      "linkFormatter": "toOriginalLink",
      "optionsConfig": {
        "ec9bed27-1680-4592-a5b7-c8faa2adcb6f": {
          "delimiter": " ",
          "inputProperties": [
            ""
          ],
          "onlyWhenAllPropertiesExist": true
        }
      }
    },
    {
      "id": "365b81ab-48a1-4dea-8d92-af5fd0b5275e",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "path",
      "value": "[[Tiere/Vögel/Rabe|Wombats 🐻]]",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "fullPathFolderNotes",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  parts.pop();\n  if (parts[parts.length-1] === file.basename) parts.pop();\n  parts.push(file.basename);\n  return `[[${parts.join('/')}|${tools.getFrontmatterProperty('constant')}]]`;\n};",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": true,
      "linkFormatter": "toOriginalLink",
      "optionsConfig": {
        "365b81ab-48a1-4dea-8d92-af5fd0b5275e": {
          "constantValue": ""
        }
      }
    },
    {
      "id": "3a16d7ed-0f85-47a4-8c46-0192a74f2652",
      "active": true,
      "asLink": false,
      "addContent": "end",
      "property": "location",
      "value": [
        "Konstante"
      ],
      "customProperty": "",
      "type": "multitext",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "constant",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "3a16d7ed-0f85-47a4-8c46-0192a74f2652": {
          "constantValue": "Neue Konstante",
          "addTemplate": true,
          "askConfirmation": true,
          "destinationFolder": "/category/locations/location",
          "templateFile": "global/template/t_location.md"
        }
      },
      "linkFormatter": "toOriginalLink"
    },
    {
      "id": "d4a90709-f220-41aa-93f5-f28a2e96995c",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "dateTimeCreated",
      "value": "",
      "customProperty": "",
      "type": "datetime",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "dateTimeCreated",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result; // return you result.\n}",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toLinkOriginal",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": true
    },
    {
      "id": "7cc4ba02-f23e-49c0-9ad5-59dcafd68a62",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "link",
      "value": [
        "Tiere",
        "Vögel"
      ],
      "customProperty": "",
      "type": "multitext",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "folders",
      "buildInCode": "",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false
    },
    {
      "id": "37660875-87bf-4cf3-9b75-f2f75a791fb2",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "folders",
      "value": [
        "Tiere",
        "Vögel"
      ],
      "customProperty": "",
      "type": "multitext",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "folders",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const result = path.split('/');\n  result.pop(); // remove the file name\n  return result;\n}",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toLowerCase",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "37660875-87bf-4cf3-9b75-f2f75a791fb2": {
          "replace": "ö",
          "replaceBy": "oe",
          "delimiter": " ",
          "inputProperties": [
            ""
          ],
          "onlyWhenAllPropertiesExist": true
        }
      }
    },
    {
      "id": "ebb14d96-b63a-4984-b21f-63b4f9aa4a2f",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "title",
      "value": "Property not found",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "getProperty",
      "buildInCode": "",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toTitleCaseDe",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "ebb14d96-b63a-4984-b21f-63b4f9aa4a2f": {
          "inputProperty": "#?:{}\"'",
          "smallWords": "der|die|das|den|dem|des|einer|eines|deren|ein|eine|einem|einer|eines|einer|und|oder|aber|denn|sondern|sowie|weder|noch|entweder|oder|dass|weil|obwohl|wenn|als|nachdem|bevor|während|bis|damit|um|zu|sobald|solange|da|indem|so|dass|ohne|zu|durch|für|gegen|ohne|um|bis|aus|außer|bei|gegenüber|mit|nach|seit|von|zu|anstatt|aufgrund|außerhalb|innerhalb|trotz|während|wegen|an|auf|hinter|in|neben|über|unter|vor|zwischen",
          "doNotCapitalizeSmallWords": true
        }
      }
    },
    {
      "id": "590159bc-7b9c-4aff-b559-b99db9ba386d",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "rootFolder",
      "value": "Rabe",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "name",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file name\n  const result = tools.removeAllExtensions(file.name);\n  return result;\n}",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toUpperCase",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false
    },
    {
      "id": "38379907-3458-4e66-9cbf-53fd7d1991de",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "isroot",
      "value": false,
      "customProperty": "",
      "type": "checkbox",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "isRoot",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  return parts.length === 1;\n};",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false
    },
    {
      "id": "9d4e4181-3025-44ea-ba31-aef6f18efb1c",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "autocompleteTest.Text",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "script",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  const input = \"test\";\n  return input; // Return the input unaltered\n};",
      "jsCode": "function (app, file, tools) { // do not change this line!\n  let result = 'Test';\n  return result; // return you result.\n}",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": true,
      "value": "test"
    },
    {
      "id": "0f337f99-ad3c-471e-8c9c-f670ba21abc7",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "Localtion.type",
      "value": "[[Tiere/Vögel/Rabe.md|Wombats 🐻]]",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "concatProperties",
      "buildInCode": "function(app: App | undefined, file: TFile, tools: ScriptingTools) { // do not change this line! \n const propertyIds = tools.getOptionConfig(tools.getRule()?.id,'inputProperties'); \n if (!Array.isArray(propertyIds) || propertyIds.length === 0) { \n return 'No properties selected'; \n } \n const results = propertyIds.map(id => tools.getFrontmatterProperty(id)); \n return results.filter(res => res !== undefined).join(' '); \n }",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toTitleCaseDe",
      "linkFormatter": "toSimpleLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "0f337f99-ad3c-471e-8c9c-f670ba21abc7": {
          "delimiter": "|",
          "inputProperties": [
            "fullPath",
            "constant"
          ],
          "onlyWhenAllPropertiesExist": true,
          "smallWords": "der|die|das|den|dem|des|einer|eines|deren|ein|eine|einem|einer|eines|einer|und|oder|aber|denn|sondern|sowie|weder|noch|entweder|oder|dass|weil|obwohl|wenn|als|nachdem|bevor|während|bis|damit|um|zu|sobald|solange|da|indem|so|dass|ohne|zu|durch|für|gegen|ohne|um|bis|aus|außer|bei|gegenüber|mit|nach|seit|von|zu|anstatt|aufgrund|außerhalb|innerhalb|trotz|während|wegen|an|auf|hinter|in|neben|über|unter|vor|zwischen",
          "doNotCapitalizeSmallWords": true
        }
      }
    },
    {
      "id": "797182ad-b5d4-4032-89fe-8e569ed875c4",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "location-type",
      "value": "#wombats????ENDE",
      "customProperty": "",
      "type": "text",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "concatProperties",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  const propertyIds = tools.getOptionConfig(tools.getRule()?.id,'inputProperties');\n  if (!Array.isArray(propertyIds) || propertyIds.length === 0) {\n    return 'No properties selected';\n  }\n  const delimiter = tools.getOptionConfig(tools.getRule()?.id,'delimiter');\n  const onlyWhenAllPropertiesExist = tools.getOptionConfig(tools.getRule()?.id, 'onlyWhenAllPropertiesExist') || false;\n  if (onlyWhenAllPropertiesExist) {\n    // Check if all properties exist\n    const allExist = propertyIds.every(id => { \n      if (id === undefined || id === null || id === '') {\n        return true; // Skip empty or undefined property IDs\n      }\n      const propertyValue = tools.getFrontmatterProperty(id);\n      const result = propertyValue !== undefined && propertyValue !== null && propertyValue !== '';\n      return result;\n    });\n    if (!allExist) {\n      return '';\n    }\n  }\n  const result = propertyIds.map(id => {\n    let value = tools.getFrontmatterProperty(id);\n    if (value === undefined || value === null || value === '') {\n      return ''; // Skip empty or undefined properties\n    }\n    return value.toString();\n  }).filter(res => res !== undefined).join(delimiter);\n  return result;\n};",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": true,
      "optionsConfig": {
        "797182ad-b5d4-4032-89fe-8e569ed875c4": {
          "delimiter": " ",
          "inputProperties": [
            "constant",
            "ddd"
          ],
          "onlyWhenAllPropertiesExist": false,
          "specialCharReplacement": "?",
          "spaceReplacement": "_",
          "prefix": "#",
          "suffix": "ENDE",
          "smallWords": "der|die|das|den|dem|des|einer|eines|deren|ein|eine|einem|einer|eines|einer|und|oder|aber|denn|sondern|sowie|weder|noch|entweder|oder|dass|weil|obwohl|wenn|als|nachdem|bevor|während|bis|damit|um|zu|sobald|solange|da|indem|so|dass|ohne|zu|durch|für|gegen|ohne|um|bis|aus|außer|bei|gegenüber|mit|nach|seit|von|zu|anstatt|aufgrund|außerhalb|innerhalb|trotz|während|wegen|an|auf|hinter|in|neben|über|unter|vor|zwischen",
          "doNotCapitalizeSmallWords": true,
          "constantValue": ""
        }
      },
      "formatters": [
        "replaceSpecialChars",
        "toLowerCase",
        "addPrefix",
        "addSuffix",
        "replaceSpaces"
      ]
    },
    {
      "id": "9f71fdc0-6552-45d5-a05b-f3656c658ba8",
      "active": true,
      "asLink": false,
      "addContent": "end",
      "property": "aliases",
      "value": [
        "Vögel"
      ],
      "customProperty": "",
      "type": "aliases",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "folder",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  const input = tools.getCurrentContent(); // Get the current content of property\n  return input; // Return the input unaltered\n};",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "9f71fdc0-6552-45d5-a05b-f3656c658ba8": {
          "constantValue": "Eins,Zwei"
        }
      }
    },
    {
      "id": "0541dccd-85c9-449a-ae9a-836c07ea883a",
      "active": true,
      "asLink": false,
      "addContent": "end",
      "property": "aliases",
      "value": [
        "Tiere"
      ],
      "customProperty": "",
      "type": "aliases",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "rootFolder",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  return parts.length > 1 ? parts[0] : ''; // return root folder or empty string if in root\n}",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "0541dccd-85c9-449a-ae9a-836c07ea883a": {
          "constantValue": "Test",
          "prefix": "#"
        }
      }
    },
    {
      "id": "3beeb7ec-bc57-4273-b6bd-eadb53d29062",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "fileName",
      "value": "Rabe",
      "customProperty": "",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "name",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file name\n  const result = tools.removeAllExtensions(file.name);\n  return result;\n}",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "formatters": [
        "toOriginal"
      ],
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false
    },
    {
      "id": "67cce546-f574-44ec-b670-dcfa2f69e006",
      "active": true,
      "asLink": false,
      "addContent": "overwrite",
      "property": "list",
      "value": "",
      "customProperty": "",
      "type": "multitext",
      "typeProperty": {
        "name": "",
        "type": "text",
        "source": "registered"
      },
      "content": "concatProperties",
      "buildInCode": "function (app, file, tools) { // do not change this line!\n  const propertyIds = tools.getOptionConfig(tools.getRule()?.id,'inputProperties');\n  if (!Array.isArray(propertyIds) || propertyIds.length === 0) {\n    return 'No properties selected';\n  }\n  const delimiter = tools.getOptionConfig(tools.getRule()?.id,'delimiter');\n  const onlyWhenAllPropertiesExist = tools.getOptionConfig(tools.getRule()?.id, 'onlyWhenAllPropertiesExist') || false;\n  if (onlyWhenAllPropertiesExist) {\n    // Check if all properties exist\n    const allExist = propertyIds.every(id => { \n      if (id === undefined || id === null || id === '') {\n        return true; // Skip empty or undefined property IDs\n      }\n      const propertyValue = tools.getFrontmatterProperty(id);\n      const result = propertyValue !== undefined && propertyValue !== null && propertyValue !== '';\n      return result;\n    });\n    if (!allExist) {\n      return '';\n    }\n  }\n  const result = propertyIds.map(id => {\n    let value = tools.getFrontmatterProperty(id);\n    if (value === undefined || value === null || value === '') {\n      return ''; // Skip empty or undefined properties\n    }\n    return value.toString();\n  }).filter(res => res !== undefined).join(delimiter);\n  return result;\n};",
      "jsCode": "",
      "showContent": false,
      "exclude": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "exclude",
        "display": "folders"
      },
      "include": {
        "selectedFolders": [],
        "selectedFiles": [],
        "mode": "include",
        "display": "folders"
      },
      "prefix": "",
      "spaceReplacement": "",
      "specialCharReplacement": "",
      "lowercaseTags": false,
      "formatter": "toOriginal",
      "formatters": [
        "replaceSpaces"
      ],
      "linkFormatter": "toOriginalLink",
      "inputProperty": "",
      "onlyModify": true,
      "useCustomCode": false,
      "optionsConfig": {
        "67cce546-f574-44ec-b670-dcfa2f69e006": {
          "spaceReplacement": "",
          "delimiter": " ",
          "inputProperties": [
            "folders",
            "aliases"
          ],
          "onlyWhenAllPropertiesExist": true
        }
      }
    }
  ],
  "useTextArea": false,
  "configuredProperties": [
    {
      "name": ""
    }
  ],
  "debugLevel": 5,
  "delayCreateEvent": 1000,
  "folderConfig": {
    "folders": [
      {
        "id": "f7bee2a6-b7e1-4f46-bfc8-92bd0ce65f12",
        "name": "Constant Values",
        "disabled": false,
        "collapsed": true,
        "parentId": "ca50dd2c-7c3e-4420-8615-1d00bf3f550d",
        "payload": {
          "exclude": {
            "selectedFolders": [
              "/"
            ],
            "selectedFiles": [],
            "mode": "exclude"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [
              "Tests/Testing Constant Value(s).md"
            ],
            "mode": "include"
          },
          "stateIncludeExclude": [
            {
              "path": "Tests/Testing Constant Value(s).md",
              "type": "file",
              "state": "include"
            },
            {
              "path": "/",
              "type": "folder",
              "state": "inheritedExclude"
            }
          ]
        }
      },
      {
        "id": "6b347cd1-a79b-485b-818b-0619a7fd0ce0",
        "name": "Get Properies",
        "disabled": false,
        "collapsed": false,
        "parentId": "ca50dd2c-7c3e-4420-8615-1d00bf3f550d",
        "payload": {
          "exclude": {
            "selectedFolders": [
              "/"
            ],
            "selectedFiles": [],
            "mode": "exclude"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [
              "Tests/Testing Concat.md"
            ],
            "mode": "include"
          },
          "stateIncludeExclude": [
            {
              "path": "/",
              "type": "folder",
              "state": "inheritedExclude"
            },
            {
              "path": "Tests/Testing Concat.md",
              "type": "file",
              "state": "include"
            }
          ]
        }
      },
      {
        "id": "79464f6c-42dc-45a8-86f3-123a0ae93b4a",
        "name": "Auto Location",
        "disabled": true,
        "collapsed": true
      },
      {
        "id": "1180bf9a-afad-4c2e-a1d6-0ea52c56f73c",
        "name": "Links & Folders",
        "parentId": "ca50dd2c-7c3e-4420-8615-1d00bf3f550d",
        "disabled": false,
        "collapsed": true,
        "payload": {
          "exclude": {
            "selectedFolders": [
              "/"
            ],
            "selectedFiles": [],
            "mode": "exclude"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [
              "Tests/Links & Folders.md"
            ],
            "mode": "include"
          },
          "stateIncludeExclude": [
            {
              "path": "/",
              "type": "folder",
              "state": "inheritedExclude"
            },
            {
              "path": "Tests/Testing Links & Folders.md",
              "type": "file",
              "state": "include"
            }
          ]
        }
      },
      {
        "id": "8bd61637-b1b0-496a-a0ad-08cafe20aa78",
        "name": "Miscellaneous",
        "parentId": "ca50dd2c-7c3e-4420-8615-1d00bf3f550d",
        "disabled": false,
        "collapsed": true,
        "payload": {
          "exclude": {
            "selectedFolders": [
              "/"
            ],
            "selectedFiles": [],
            "mode": "exclude"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [
              "Tests/Testing Miscellaneous.md"
            ],
            "mode": "include"
          },
          "stateIncludeExclude": [
            {
              "path": "/",
              "type": "folder",
              "state": "inheritedExclude"
            },
            {
              "path": "Tests/Testing Miscellaneous.md",
              "type": "file",
              "state": "exclude"
            }
          ]
        }
      },
      {
        "id": "ecda9949-6de3-4ce2-9276-4e228585ee7d",
        "name": "Tiere",
        "disabled": false,
        "collapsed": false,
        "payload": {
          "exclude": {},
          "include": {},
          "stateIncludeExclude": [
            {
              "path": "/",
              "type": "folder",
              "state": "exclude"
            },
            {
              "path": "/Tiere",
              "type": "folder",
              "state": "include"
            }
          ]
        }
      },
      {
        "id": "94139330-92af-46bb-a1e5-424312cf2df8",
        "name": "Global Rules",
        "disabled": false,
        "collapsed": false
      },
      {
        "id": "ca50dd2c-7c3e-4420-8615-1d00bf3f550d",
        "name": "Tests",
        "disabled": false,
        "collapsed": false,
        "payload": {
          "exclude": {},
          "include": {},
          "stateIncludeExclude": [
            {
              "path": "/",
              "type": "folder",
              "state": "exclude"
            }
          ]
        }
      }
    ],
    "rows": [
      {
        "id": "1eaf92cc-ae62-4664-9a8a-71dfa6898d37",
        "folderId": "94139330-92af-46bb-a1e5-424312cf2df8",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "7b7700a9-9499-433f-8cd1-14f378976f4e",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "isroot",
          "value": false,
          "customProperty": "",
          "type": "checkbox",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "isRoot",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  return parts.length === 1;\n};",
          "jsCode": "",
          "showContent": false,
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "stateIncludeExclude": [],
          "displayIncludeExclude": "folders",
          "keywords": [
            "isRoot",
            "File in Root folder",
            "Check if the file is in the root folder."
          ]
        }
      },
      {
        "id": "2609db64-ecc2-487a-84aa-b8162bcef989",
        "folderId": "ecda9949-6de3-4ce2-9276-4e228585ee7d",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "4e76b950-afd2-443c-acef-3f00aacac8ad",
          "active": true,
          "asLink": false,
          "addContent": "end",
          "property": "tags",
          "value": [
            "Tests"
          ],
          "customProperty": "",
          "type": "tags",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "folders",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const result = path.split('/');\n  result.pop(); // remove the file name\n  return result;\n}",
          "jsCode": "",
          "showContent": false,
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "replaceSpecialChars",
              "name": "Replace Special Characters",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": false,
          "useCustomCode": false,
          "optionsConfig": {
            "4e76b950-afd2-443c-acef-3f00aacac8ad": {
              "specialCharReplacement": "-"
            }
          },
          "stateIncludeExclude": [],
          "displayIncludeExclude": "folders",
          "keywords": [
            "folders",
            "All folders of the file as a list",
            "Returns all folders the file is stored in as a list."
          ]
        }
      },
      {
        "id": "484b8335-39d7-4d83-9a82-8cc9f1b7a9fb",
        "folderId": "8bd61637-b1b0-496a-a0ad-08cafe20aa78",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "aae10d3a-24f8-4272-8bdd-9492b20a1590",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "fileSize",
          "value": 220,
          "customProperty": "",
          "type": "number",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "fileSizeBytes",
          "buildInCode": "function(app: App | undefined, file: TFile, tools: ScriptingTools) { // do not change this line! \n const result = file.stat.size; \n return result; // return you result. \n }",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": false,
          "useCustomCode": false,
          "keywords": [
            "fileSizeBytes",
            "File Size in Bytes",
            "This rule returns the size of the file in bytes."
          ]
        }
      },
      {
        "id": "a7368169-ba3e-4ffb-ac7a-27229e090d67",
        "folderId": "8bd61637-b1b0-496a-a0ad-08cafe20aa78",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "7037f6b6-e536-4e40-929f-989232ae4ee8",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "fileSizeText",
          "value": "220 Bytes",
          "customProperty": "",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "fileSizeString",
          "buildInCode": "function(app: App | undefined, file: TFile, tools: ScriptingTools) { // do not change this line! \n let size =file.stat.size; \n const precision = 2; // number of decimal places \n if (size > 1024) { \n   size = size / 1024; \n   if (size > 1024) { \n     size = size / 1024; \n     if (size > 1024) { \n       size = size / 1024; \n       return size.toFixed(precision) + ' GB'; \n     } \n     return size.toFixed(precision) + ' MB'; \n   } \n   return size.toFixed(precision) + ' KB'; \n }   \n return size + ' Bytes'; // return you result. \n }",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": false,
          "useCustomCode": false,
          "keywords": [
            "fileSizeString",
            "File Size as String",
            "Converts the file size to a human-readable string (e.g., KB, MB, GB) with 2 decimal places precision."
          ]
        }
      },
      {
        "id": "3b2e3cdd-8a3e-4cff-bcdb-e1f525787ee5",
        "folderId": "8bd61637-b1b0-496a-a0ad-08cafe20aa78",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "b5facdae-b108-4cb5-90b4-697873dc03b2",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "dateTimeCreated",
          "value": "2025-06-08T12:55:37.914",
          "customProperty": "",
          "type": "datetime",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "dateTimeCreated",
          "buildInCode": "function(app: App | undefined, file: TFile, tools: ScriptingTools) { // do not change this line! \n const timeOffset = new Date(Date.now()).getTimezoneOffset()*60000; // get local time offset \n const result = new Date(file.stat.ctime-timeOffset); \n return result.toISOString().split('Z')[0]; // remove UTC symbol \n }",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": false,
          "useCustomCode": false,
          "keywords": [
            "dateTimeCreated",
            "Date (and Time) created",
            "This rule returns the date and time when the file was created, adjusted for local timezone."
          ]
        }
      },
      {
        "id": "dda0fe4c-253b-4b30-b7d8-0705d6b33932",
        "folderId": "8bd61637-b1b0-496a-a0ad-08cafe20aa78",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "ff59b18e-ffe8-4618-953f-c8806ad76bfb",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "dateTimeModified",
          "value": "2025-06-10T08:00:10.070",
          "customProperty": "",
          "type": "datetime",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "dateTimeModified",
          "buildInCode": "function(app: App | undefined, file: TFile, tools: ScriptingTools) { // do not change this line! \n const timeOffset = new Date(Date.now()).getTimezoneOffset()*60000; // get local time offset \n const result = new Date(file.stat.mtime-timeOffset); \n return result.toISOString().split('Z')[0]; // remove UTC symbol \n }",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": false,
          "useCustomCode": false,
          "keywords": [
            "dateTimeModified",
            "Date (and Time) modified",
            "This rule returns the date and time when the file was last modified, adjusted for local timezone."
          ]
        }
      },
      {
        "id": "fa1482d1-0242-45dc-b300-ce0974ccd376",
        "folderId": "8bd61637-b1b0-496a-a0ad-08cafe20aa78",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "b1ac113c-58bd-4c4c-8f02-856e26f9f372",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "Text",
          "customProperty": "",
          "type": "text",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "default",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const input = tools.getCurrentContent(); // Get the current content of property\n  return input; // Return the input unaltered\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "keywords": [
            "default",
            "Pass parameter unaltered",
            "Pass the content of the frontmatter parameter unaltered."
          ]
        }
      },
      {
        "id": "b40292bc-8d4c-4a27-8c17-6f36c6a2539d",
        "folderId": "1180bf9a-afad-4c2e-a1d6-0ea52c56f73c",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "1f186520-863e-43d6-91d3-c6621b226743",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "link",
          "value": "Tests/Testing Links & Folders.md|Testing Links & Folders]]",
          "customProperty": "",
          "type": "multitext",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "linkToFile",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const parts = file.path.split('/');\n  const rule = tools.getRule();\n  if (!rule) return tools.getCurrentContent();\n  const addExtension = tools.getOptionConfig(rule.id,'addExtension') \n  parts.pop();\n  if (parts[parts.length-1] === file.basename) parts.pop();\n  let fileName = addExtension? file.basename + '.' + file.extension : file.basename; \n  return `[[${parts.join('/')}/${fileName}|${file.basename}]]`;\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "replaceChars",
              "name": "Replace Characters",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": false,
          "useCustomCode": false,
          "optionsConfig": {
            "1f186520-863e-43d6-91d3-c6621b226743": {
              "replace": "[",
              "replaceBy": "",
              "useRegex": false,
              "addExtension": true
            }
          },
          "keywords": [
            "linkToFile",
            "Create link to file",
            "Create a link to the file in the current vault. Can be configured to include the file extension."
          ]
        }
      },
      {
        "id": "540abeaa-9565-4ff0-bf18-7f5035242db4",
        "folderId": "1180bf9a-afad-4c2e-a1d6-0ea52c56f73c",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "e744e4a3-bffb-40af-84be-651702f3bec2",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "fileNameExt",
          "value": "Testing Links & Folders.md",
          "customProperty": "",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "nameExt",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file name with extension\n  const result = file.name;\n  return result;\n}",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": false,
          "useCustomCode": false,
          "keywords": [
            "nameExt",
            "File name with extension",
            "Returns the file name with extension."
          ]
        }
      },
      {
        "id": "5a1e2939-1e45-4bc7-ab41-0e61c8a36bc2",
        "folderId": "1180bf9a-afad-4c2e-a1d6-0ea52c56f73c",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "1ae521c4-e7f4-453f-8566-5c98009c4b6c",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "fileName",
          "value": "Testing Links & Folders",
          "customProperty": "",
          "type": "text",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "name",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  // acquire file name\n  const result = tools.removeAllExtensions(file.name);\n  return result;\n}",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toOriginal",
              "name": "no change",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "keywords": [
            "name",
            "File name without extension",
            "Returns the file name without all extensions. I.e. example.note.md => example"
          ],
          "optionsConfig": {
            "1ae521c4-e7f4-453f-8566-5c98009c4b6c": {
              "replace": "",
              "replaceBy": "",
              "useRegex": true
            }
          }
        }
      },
      {
        "id": "996613c4-ec45-4a74-8391-c020e0813756",
        "folderId": "1180bf9a-afad-4c2e-a1d6-0ea52c56f73c",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "dd9267d0-0df9-46b0-8fcc-77f133f56b94",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "fullPath",
          "value": "Tests",
          "customProperty": "",
          "type": "text",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "path",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  parts.pop();\n  return parts.join('/');\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": false,
          "useCustomCode": false,
          "keywords": [
            "path",
            "Full path",
            "Returns the folder path the file is stored in."
          ]
        }
      },
      {
        "id": "1cc59faa-c47e-4053-aace-43c159964b0c",
        "folderId": "1180bf9a-afad-4c2e-a1d6-0ea52c56f73c",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "a6f9e8d6-58bf-4a5b-8927-6a29560dfaf9",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "path",
          "value": "Tests/Testing Links & Folders.md",
          "customProperty": "",
          "type": "text",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "fullPathExt",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  return `${file.path}`;\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": false,
          "useCustomCode": false,
          "keywords": [
            "fullPathExt",
            "Full path, filename and extension",
            "Returns the full path of the file, including its filename and extension."
          ]
        }
      },
      {
        "id": "7788b8c5-0d98-4dbc-81c5-1ec7aa45ecf2",
        "folderId": "1180bf9a-afad-4c2e-a1d6-0ea52c56f73c",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "97802a18-e132-469f-8b6f-dd7dc51b9833",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "parentFolder",
          "value": "Tests",
          "customProperty": "",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "folder",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const input = tools.getCurrentContent(); // Get the current content of property\n  return input; // Return the input unaltered\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": false,
          "useCustomCode": false,
          "keywords": [
            "folder",
            "Parent folder",
            "Returns the parent folder of the file."
          ]
        }
      },
      {
        "id": "636b1ca6-4a6f-4ca5-9036-cfe8a7ff81db",
        "folderId": "1180bf9a-afad-4c2e-a1d6-0ea52c56f73c",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "1b44dafc-582f-4573-9aaa-a72a7443fbef",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "linkRemoved",
          "value": "Tests/Links & Folders.md",
          "customProperty": "",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "getProperty",
          "buildInCode": "function(app: App | undefined, file: TFile, tools: ScriptingTools) { // do not change this line! \n const propertyId = tools.getOptionConfig(tools.getRule()?.id,'inputProperty'); \n if (propertyId === undefined || propertyId === '') { \n return 'Property not set'; \n } \n const result = tools.getFrontmatterProperty(propertyId); \n if (result === undefined) { \n return 'Property not found'; \n } \n return result; \n }",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "removeLink",
              "name": "Remove Links",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "optionsConfig": {
            "1b44dafc-582f-4573-9aaa-a72a7443fbef": {
              "result": "path",
              "inputProperty": "link"
            }
          },
          "keywords": [
            "getProperty",
            "Get Property",
            "Gets the value from a selected property."
          ],
          "type": "text"
        }
      },
      {
        "id": "74ac7a24-4081-4fe5-8104-4c4788017d7e",
        "folderId": "6b347cd1-a79b-485b-818b-0619a7fd0ce0",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "86a939b0-28c4-4b7b-8d77-a3b87878b99d",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "Concat-List",
          "value": [
            "L1-A",
            "L2-A",
            "L2-B",
            "L3-A",
            "L3-B",
            "L3-C"
          ],
          "customProperty": "",
          "type": "multitext",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "getProperties",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const propertyIds = tools.getOptionConfig(tools.getRule()?.id,'inputProperties');\n  if (!Array.isArray(propertyIds) || propertyIds.length === 0) {\n    return 'No properties selected';\n  }\n  const delimiter = tools.getOptionConfig(tools.getRule()?.id,'delimiter');\n  const onlyWhenAllPropertiesExist = tools.getOptionConfig(tools.getRule()?.id, 'onlyWhenAllPropertiesExist') || false;\n  if (onlyWhenAllPropertiesExist) {\n    // Check if all properties exist\n    const allExist = propertyIds.every(id => { \n      if (id === undefined || id === null || id === '') {\n        return true; // Skip empty or undefined property IDs\n      }\n      const propertyValue = tools.getFrontmatterProperty(id);\n      const result = propertyValue !== undefined && propertyValue !== null && propertyValue !== '';\n      return result;\n    });\n    if (!allExist) {\n      return '';\n    }\n  }\n  const result = propertyIds.map(id => {\n    let value = tools.getFrontmatterProperty(id);\n    if (value === undefined || value === null || value === '') {\n      return ''; // Skip empty or undefined properties\n    }\n    return value.toString();\n  }).filter(res => res !== undefined).join(delimiter);\n  return result;\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatter": "toOriginal",
          "formatters": [
            {
              "id": "toOriginal",
              "name": "no change"
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "optionsConfig": {
            "86a939b0-28c4-4b7b-8d77-a3b87878b99d": {
              "propertyDelimiter": "",
              "inputProperties": [
                {
                  "id": "List-1",
                  "name": "List-1"
                },
                {
                  "id": "List-2",
                  "name": "List-2"
                },
                {
                  "id": "List-3",
                  "name": "List-3"
                }
              ],
              "onlyWhenAllPropertiesExist": false,
              "delimiter": ""
            }
          },
          "keywords": [
            "getProperties",
            "Get Properties",
            "Retrieves multiple frontmatter properties (Multitext, Tags, Aliases)."
          ]
        }
      },
      {
        "id": "62a9f32c-cf6a-4ac5-a7e8-c3cf2344a4d0",
        "folderId": "6b347cd1-a79b-485b-818b-0619a7fd0ce0",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "cd20c914-2e93-4d58-9bc2-330e7b26fa52",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "Concat-Text",
          "value": "L1/A|L2/A|L2/B|L3/A|L3/B|L3/C",
          "customProperty": "",
          "type": "text",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "getProperties",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const propertyIds = tools.getOptionConfig(tools.getRule()?.id,'inputProperties');\n  if (!Array.isArray(propertyIds) || propertyIds.length === 0) {\n    return 'No properties selected';\n  }\n  const delimiter = tools.getOptionConfig(tools.getRule()?.id,'delimiter');\n  const onlyWhenAllPropertiesExist = tools.getOptionConfig(tools.getRule()?.id, 'onlyWhenAllPropertiesExist') || false;\n  if (onlyWhenAllPropertiesExist) {\n    // Check if all properties exist\n    const allExist = propertyIds.every(id => { \n      if (id === undefined || id === null || id === '') {\n        return true; // Skip empty or undefined property IDs\n      }\n      const propertyValue = tools.getFrontmatterProperty(id);\n      const result = propertyValue !== undefined && propertyValue !== null && propertyValue !== '';\n      return result;\n    });\n    if (!allExist) {\n      return '';\n    }\n  }\n  const result = propertyIds.map(id => {\n    let value = tools.getFrontmatterProperty(id);\n    if (value === undefined || value === null || value === '') {\n      return ''; // Skip empty or undefined properties\n    }\n    return value.toString();\n  }).filter(res => res !== undefined).join(delimiter);\n  return result;\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "replaceChars",
              "name": "Replace Characters",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "optionsConfig": {
            "cd20c914-2e93-4d58-9bc2-330e7b26fa52": {
              "propertyDelimiter": ".",
              "inputProperties": [
                {
                  "id": "List-1",
                  "name": "List-1"
                },
                {
                  "id": "List-2",
                  "name": "List-2",
                  "payload": {
                    "id": "870aecb8-1417-49aa-b58f-34cde53c6807"
                  }
                },
                {
                  "id": "List-3",
                  "name": "List-3",
                  "payload": {
                    "id": "1709d706-c3ae-4b40-b7e1-69bbffb895db"
                  }
                }
              ],
              "onlyWhenAllPropertiesExist": false,
              "delimiter": "|",
              "replace": "-",
              "replaceBy": "/",
              "constantValue": "",
              "constantValues": []
            }
          },
          "keywords": [
            "getProperties",
            "Get Properties",
            "Retrieves multiple frontmatter properties (Multitext, Tags, Aliases)."
          ]
        }
      },
      {
        "id": "c3b66ef7-8282-4e33-a2f4-13620d6f0c80",
        "folderId": "6b347cd1-a79b-485b-818b-0619a7fd0ce0",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "842e47dd-e46f-48f9-b4ab-68bb912aa523",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "Text",
          "value": "L1-A,L2-A,L2-B",
          "customProperty": "",
          "type": "text",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "concatProperties",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const propertyIds = tools.getOptionConfig(tools.getRule()?.id,'inputProperties');\n  if (!Array.isArray(propertyIds) || propertyIds.length === 0) {\n    return 'No properties selected';\n  }\n  const delimiter = tools.getOptionConfig(tools.getRule()?.id,'delimiter');\n  const onlyWhenAllPropertiesExist = tools.getOptionConfig(tools.getRule()?.id, 'onlyWhenAllPropertiesExist') || false;\n  if (onlyWhenAllPropertiesExist) {\n    // Check if all properties exist\n    const allExist = propertyIds.every(id => { \n      if (id === undefined || id === null || id === '') {\n        return true; // Skip empty or undefined property IDs\n      }\n      const propertyValue = tools.getFrontmatterProperty(id);\n      const result = propertyValue !== undefined && propertyValue !== null && propertyValue !== '';\n      return result;\n    });\n    if (!allExist) {\n      return '';\n    }\n  }\n  const result = propertyIds.map(id => {\n    let value = tools.getFrontmatterProperty(id);\n    if (value === undefined || value === null || value === '') {\n      return ''; // Skip empty or undefined properties\n    }\n    return value.toString();\n  }).filter(res => res !== undefined).join(delimiter);\n  return result;\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "keywords": [
            "concatProperties",
            "Concat Properties",
            "Concatenates multiple properties from the frontmatter."
          ],
          "optionsConfig": {
            "842e47dd-e46f-48f9-b4ab-68bb912aa523": {
              "delimiter": ",",
              "inputProperties": [
                {
                  "id": "List-1",
                  "name": "List-1",
                  "payload": {
                    "id": "fc751d48-6378-497a-91a1-171883bf0f59"
                  }
                },
                {
                  "id": "List-2",
                  "name": "List-2",
                  "payload": {
                    "id": "0cd76637-f303-43ac-a412-9a8848affd40"
                  }
                }
              ],
              "onlyWhenAllPropertiesExist": true
            }
          }
        }
      },
      {
        "id": "752e3128-2b61-4444-9109-2c7bbfb0aaa2",
        "folderId": "6b347cd1-a79b-485b-818b-0619a7fd0ce0",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "0c957c32-9c1f-4d50-beeb-2db73bd57f31",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "title",
          "value": "PREFIX-tests/testing XonXat.md-ENDE",
          "customProperty": "",
          "type": "text",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "fullPathExt",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  return `${file.path}`;\n};",
          "jsCode": "",
          "showContent": false,
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toLowerCase",
              "name": "To Lower Case",
              "payload": {},
              "settingsDiv": {}
            },
            {
              "id": "replaceChars",
              "name": "Replace Characters",
              "payload": {
                "id": "3c690fb7-f14d-4a66-a859-9e10ca0bd321"
              },
              "settingsDiv": {}
            },
            {
              "id": "addSuffix",
              "name": "Add a Suffix",
              "payload": {
                "id": "01882402-5e53-468e-a24a-e7cad29d8ccf"
              },
              "settingsDiv": {}
            },
            {
              "id": "addPrefix",
              "name": "Add a Prefix",
              "payload": {
                "id": "9745c135-1374-40f6-8afb-3b3bebb2d1c1"
              },
              "settingsDiv": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "stateIncludeExclude": [],
          "keywords": [
            "fullPathExt",
            "Full path, filename and extension",
            "Returns the full path of the file, including its filename and extension."
          ],
          "optionsConfig": {
            "0c957c32-9c1f-4d50-beeb-2db73bd57f31|3c690fb7-f14d-4a66-a859-9e10ca0bd321": {
              "replace": "c",
              "replaceBy": "X",
              "useRegex": false
            },
            "0c957c32-9c1f-4d50-beeb-2db73bd57f31": {
              "prefix": "PREFIX-",
              "suffix": "-ENDE"
            }
          }
        }
      },
      {
        "id": "5ad96b0d-1828-45ad-bac6-2d6644fa6b27",
        "folderId": "f7bee2a6-b7e1-4f46-bfc8-92bd0ce65f12",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "060bdef1-fbd6-492c-aad6-b849b1cd4292",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "list",
          "value": [
            "A",
            "B",
            "C"
          ],
          "customProperty": "",
          "type": "multitext",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "constant",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const result = tools.getOptionConfig(tools.getRule()?.id,'constantValue');\n  return result; // Return the constant value\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatter": "toOriginal",
          "formatters": [
            {
              "id": "toOriginal",
              "name": "no change"
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "optionsConfig": {
            "060bdef1-fbd6-492c-aad6-b849b1cd4292": {
              "constantValue": "testValue",
              "constantValues": [
                {
                  "id": "A",
                  "name": "A"
                },
                {
                  "id": "B",
                  "name": "B"
                },
                {
                  "id": "C",
                  "name": "C"
                }
              ],
              "delimiter": ","
            }
          },
          "keywords": [
            "constant",
            "Constant value(s)",
            "Returns a constant value instead of the frontmatter parameter."
          ],
          "stateIncludeExclude": []
        }
      },
      {
        "id": "604908de-9da0-4425-b9a1-74523f915628",
        "folderId": "f7bee2a6-b7e1-4f46-bfc8-92bd0ce65f12",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "2aa8600d-3c77-4af2-87e5-78f209af1ee2",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "Text",
          "value": "1,2,3",
          "customProperty": "",
          "type": "text",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "constant",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const result = tools.getOptionConfig(tools.getRule()?.id,'constantValue');\n  return result; // Return the constant value\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "exclude",
            "display": "folders"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatter": "toOriginal",
          "formatters": [
            {
              "id": "toOriginal",
              "name": "no change"
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "keywords": [
            "constant",
            "Constant value(s)",
            "Returns a constant value instead of the frontmatter parameter."
          ],
          "optionsConfig": {
            "2aa8600d-3c77-4af2-87e5-78f209af1ee2": {
              "constantValue": "",
              "constantValues": [
                {
                  "id": "1",
                  "name": "1"
                },
                {
                  "id": "2",
                  "name": "2"
                },
                {
                  "id": "3",
                  "name": "3"
                }
              ],
              "delimiter": ","
            }
          }
        }
      },
      {
        "id": "970768a5-5a70-4ca6-a38e-5fccc6969257",
        "folderId": "79464f6c-42dc-45a8-86f3-123a0ae93b4a",
        "keywords": [],
        "disabled": true,
        "payload": {
          "id": "1705607a-129f-4ea5-9392-d206b7017a3a",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "location",
          "value": "",
          "customProperty": "",
          "type": "multitext",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "autoLink",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [
              "/category",
              "/global"
            ],
            "selectedFiles": [],
            "mode": "exclude"
          },
          "include": {
            "selectedFolders": [],
            "selectedFiles": [],
            "mode": "include",
            "display": "folders"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatter": "toOriginal",
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {
                "id": "e06a637f-633b-4775-90e2-97ebf890db5e"
              }
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "keywords": [
            "autoLink",
            "Auto Link (advanced)",
            "Checks if a link exists in a specified folder. If not, it creates a new file based on a specified template and adds a link to it."
          ],
          "optionsConfig": {
            "1705607a-129f-4ea5-9392-d206b7017a3a": {
              "addTemplate": true,
              "askConfirmation": true,
              "destinationFolder": "/category/locations/location",
              "templateFile": "global/template/t_location.md"
            }
          }
        },
        "optionsConfig": {
          "6a962ffa-ffae-4e86-84a6-00faa01622c3": {
            "addTemplate": true,
            "askConfirmation": true,
            "destinationFolder": "/category/locations",
            "templateFile": "global/template/t_location.md"
          }
        }
      },
      {
        "id": "1c697bb3-f34a-4556-b54b-6c98a8a7176f",
        "folderId": "79464f6c-42dc-45a8-86f3-123a0ae93b4a",
        "keywords": [],
        "disabled": true,
        "payload": {
          "id": "85b8afaa-b844-4bab-acc8-1242fc5614d3",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "location",
          "value": "",
          "customProperty": "",
          "type": "multitext",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "linkToFile",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const parts = file.path.split('/');\n  const rule = tools.getRule();\n  if (!rule) return tools.getCurrentContent();\n  const addExtension = tools.getOptionConfig(rule.id,'addExtension') \n  parts.pop();\n  if (parts[parts.length-1] === file.basename) parts.pop();\n  let fileName = addExtension? file.basename + '.' + file.extension : file.basename; \n  return `[[${parts.join('/')}/${fileName}|${file.basename}]]`;\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [
              "/"
            ],
            "selectedFiles": [],
            "mode": "exclude"
          },
          "include": {
            "selectedFolders": [
              "/category/locations/location"
            ],
            "selectedFiles": [],
            "mode": "include"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatter": "toOriginal",
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {
                "id": "16672294-ed8d-4882-9122-e36f9cfb1154"
              }
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "keywords": [
            "linkToFile",
            "Create link to file",
            "Create a link to the file in the current vault. Can be configured to include the file extension."
          ],
          "optionsConfig": {
            "85b8afaa-b844-4bab-acc8-1242fc5614d3": {
              "addExtension": true
            }
          }
        }
      },
      {
        "id": "27e9e8ee-daff-4455-8919-d9cc091af658",
        "folderId": "79464f6c-42dc-45a8-86f3-123a0ae93b4a",
        "keywords": [],
        "disabled": true,
        "payload": {
          "id": "6d244111-37df-45c2-8444-754b4cc29922",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "location-type",
          "value": "",
          "customProperty": "",
          "type": "text",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "constant",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const result = tools.getOptionConfig(tools.getRule()?.id,'constantValue');\n  return result; // Return the constant value\n};",
          "jsCode": "",
          "showContent": false,
          "exclude": {
            "selectedFolders": [
              "/"
            ],
            "selectedFiles": [],
            "mode": "exclude"
          },
          "include": {
            "selectedFolders": [
              "/category/locations/location"
            ],
            "selectedFiles": [],
            "mode": "include"
          },
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatter": "toOriginal",
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {
                "id": "bb2b8dfc-a8ee-408e-bcea-1dca67f639cd"
              }
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "keywords": [
            "constant",
            "Constant value(s)",
            "Returns a constant value instead of the frontmatter parameter."
          ],
          "optionsConfig": {
            "6d244111-37df-45c2-8444-754b4cc29922": {
              "constantValue": "country"
            }
          }
        }
      },
      {
        "id": "d74d7ffc-7918-4d9a-8577-369111ac46ef",
        "keywords": [],
        "disabled": false,
        "payload": {
          "id": "e70ae2e0-a245-4198-bdb3-97c5662569cc",
          "active": true,
          "asLink": false,
          "addContent": "overwrite",
          "property": "autocompleteTest",
          "value": "PREFIX-tests/testing XonXat.md-ENDE",
          "customProperty": "",
          "type": "text",
          "typeProperty": {
            "name": "",
            "type": "text",
            "source": "registered"
          },
          "content": "getProperties",
          "buildInCode": "function (app, file, tools) { // do not change this line!\n  const propertyIds = tools.getOptionConfig(tools.getRule()?.id,'inputProperties');\n  if (!Array.isArray(propertyIds) || propertyIds.length === 0) {\n    return 'No properties selected';\n  }\n  const delimiter = tools.getOptionConfig(tools.getRule()?.id,'delimiter');\n  const onlyWhenAllPropertiesExist = tools.getOptionConfig(tools.getRule()?.id, 'onlyWhenAllPropertiesExist') || false;\n  if (onlyWhenAllPropertiesExist) {\n    // Check if all properties exist\n    const allExist = propertyIds.every(id => { \n      if (id === undefined || id === null || id === '') {\n        return true; // Skip empty or undefined property IDs\n      }\n      const propertyValue = tools.getFrontmatterProperty(id);\n      const result = propertyValue !== undefined && propertyValue !== null && propertyValue !== '';\n      return result;\n    });\n    if (!allExist) {\n      return '';\n    }\n  }\n  const result = propertyIds.map(id => {\n    let value = tools.getFrontmatterProperty(id);\n    if (value === undefined || value === null || value === '') {\n      return ''; // Skip empty or undefined properties\n    }\n    return value.toString();\n  }).filter(res => res !== undefined).join(delimiter);\n  return result;\n};",
          "jsCode": "",
          "showContent": false,
          "prefix": "",
          "spaceReplacement": "",
          "specialCharReplacement": "",
          "lowercaseTags": false,
          "formatters": [
            {
              "id": "toOriginal",
              "name": "toOriginal",
              "payload": {},
              "settingsDiv": {}
            }
          ],
          "linkFormatter": "toOriginalLink",
          "inputProperty": "",
          "onlyModify": true,
          "useCustomCode": false,
          "optionsConfig": {
            "e70ae2e0-a245-4198-bdb3-97c5662569cc": {
              "propertyDelimiter": ".",
              "inputProperties": [
                {
                  "id": "title",
                  "name": "title",
                  "payload": {
                    "id": "ec78b779-92d1-4a29-8ede-1ba33ad6655f"
                  },
                  "settingsDiv": {}
                }
              ],
              "onlyWhenAllPropertiesExist": false,
              "delimiter": ""
            }
          },
          "stateIncludeExclude": [],
          "displayIncludeExclude": "folders",
          "keywords": [
            "getProperties",
            "Get Properties",
            "Retrieves multiple frontmatter properties (Multitext, Tags, Aliases)."
          ]
        }
      }
    ]
  },
  "stateIncludeExclude": [],
  "displayIncludeExclude": "folders",
  "exclude": {
    "selectedFolders": [],
    "selectedFiles": [],
    "mode": "exclude"
  },
  "include": {
    "selectedFolders": [],
    "selectedFiles": [],
    "mode": "includeAndExclude"
  },
  "liveRules": [],
  "selectedFolders": [
    "/Tiere/Säugetiere",
    "/Tiere/Vögel"
  ],
  "selectedFiles": [
    "Pasted image 20250405063634.png",
    "Pasted image 20250406221918.jpg"
  ],
  "selectionMode": "exclude",
  "selectionDisplay": "folder",
  "jsCode": "function testing (a) {\n  if (a) {\n    //something\n  }\n  return 'huray';\n}"
}