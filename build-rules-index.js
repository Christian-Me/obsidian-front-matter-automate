const fs = require("fs");
const path = require("path");

// Dynamically resolve the directory of the script
const scriptDir = path.dirname(process.argv[1]);

const rulesDir = path.resolve(scriptDir, "./src/rules");
const indexFile = path.join(rulesDir, "index.ts");

console.log("scriptDir:", scriptDir); // Debugging
console.log("rulesDir:", rulesDir); // Debugging
console.log("indexFile:", indexFile); // Debugging

const files = fs.readdirSync(rulesDir).filter((file) => file.endsWith(".ts") && file !== "index.ts" && file !== "rules.ts");

console.log("files:", files); // Debugging

const imports = files.map((file) => {
    const className = `Rule${path.basename(file, ".ts").replace(/^\w/, (c) => c.toUpperCase())}`;
    return `import { ${className} } from "./${file.replace(".ts", "")}";`;
});

const ruleList = files.map((file) => {
    const className = `Rule${path.basename(file, ".ts").replace(/^\w/, (c) => c.toUpperCase())}`;
    return className;
});

const content = `
// This file is auto-generated. Do not edit manually.
// Generated by build-rules-index.js
import { rulesManager } from "./rules";
${imports.join("\n")}

// List of all rule classes
const ruleClasses = [${ruleList.join(", ")}];

// Register each rule class
ruleClasses.forEach((RuleClass) => {
    const ruleInstance = new RuleClass();
    rulesManager.registerRule(ruleInstance);
});
`;

fs.writeFileSync(indexFile, content.trim());
console.log("index.ts generated successfully!");