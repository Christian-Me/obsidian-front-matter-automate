/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FolderTagPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/settings.ts
var import_obsidian6 = require("obsidian");

// src/frontmatter-tools.ts
var import_obsidian = require("obsidian");
function getPropertiesFromMetadataManager(app) {
  try {
    const metadataManager = app.metadataTypeManager;
    console.log("get properties:", metadataManager);
    return Object.values(metadataManager.properties).map((value) => ({
      name: value.name,
      type: value.type,
      count: value.count,
      source: "registered"
    })).sort((a, b) => a.name.localeCompare(b.name));
  } catch (e) {
    console.error("Couldn't access properties from Metadata Manager", e);
    return [];
  }
}
function getTypesFromMetadataManager(app) {
  try {
    const metadataManager = app.metadataTypeManager;
    console.log("get types:", metadataManager);
    return Object.values(metadataManager.registeredTypeWidgets).map((value, index, array) => ({
      type: value.type,
      icon: value.icon,
      jsType: ""
    })).sort((a, b) => a.type.localeCompare(b.type));
  } catch (e) {
    console.error("Couldn't access properties from Metadata Manager", e);
    return [];
  }
}
var SelectProperty = class extends import_obsidian.SuggestModal {
  constructor(app, knownProperties, property, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.property = property;
    this.typedText = "";
    this.newTextFlag = true;
    this.knownProperties = knownProperties;
  }
  // Returns all available suggestions.
  getSuggestions(query) {
    const result = this.knownProperties.filter((property) => property.name.toLowerCase().includes(query.toLowerCase()));
    this.newTextFlag = result.length === 0;
    this.typedText = query;
    return result;
  }
  onOpen() {
    if (this.property) {
      this.setPlaceholder(this.property.name);
    } else {
      this.setPlaceholder("no property selected!");
    }
    this.setTitle("Select or type a property name");
  }
  // Renders each suggestion item.
  renderSuggestion(property, el) {
    el.createEl("div", { text: property.name });
    el.createEl("small", { text: property.type });
  }
  onClose() {
    if (this.newTextFlag && this.property) {
      this.property.name = this.typedText;
      this.property.type = "text";
      this.onSubmit(this.property);
    }
  }
  // Perform action on the selected suggestion.
  onChooseSuggestion(property, evt) {
    if (evt instanceof KeyboardEvent) {
      console.log(`keyboard ${this.typedText} ${this.newTextFlag}`, property);
    }
    console.log("onChooseSuggestion", evt);
    this.onSubmit(property);
  }
};

// src/tools.ts
function parseJSCode(jsCode) {
  function parseFunction(jsCode2) {
    try {
      jsCode2 = cleanCodeString(jsCode2);
      var funcReg = /function *\(([^()]*)\)[ \n\t]*{(.*)}/gmi;
      var match = funcReg.exec(jsCode2.replace(/\n/g, " "));
      if (!match)
        return void 0;
      var args = match[1].split(",");
      args.push(match[2]);
      return new Function(...args);
    } catch (error) {
      console.error("error parsing JS function!", error);
      return error.message;
    }
  }
  ;
  return parseFunction(jsCode);
}
function cleanCodeString(codeString) {
  if (typeof codeString !== "string") {
    throw new TypeError("Input must be a string.");
  }
  let inMultiLineComment = false;
  let inSingleLineComment = false;
  let inString = null;
  let inRegExp = false;
  let cleanedCode = "";
  let i = 0;
  while (i < codeString.length) {
    const char = codeString[i];
    const nextChar = codeString[i + 1];
    if (inMultiLineComment) {
      if (char === "*" && nextChar === "/") {
        inMultiLineComment = false;
        i += 2;
        continue;
      } else {
        i++;
        continue;
      }
    }
    if (inSingleLineComment) {
      if (char === "\n" || char === "\r") {
        inSingleLineComment = false;
        cleanedCode += char;
        i++;
        continue;
      } else {
        i++;
        continue;
      }
    }
    if (inString) {
      if (char === inString) {
        inString = null;
      } else if (char === "\\") {
        cleanedCode += char;
        i++;
        if (i < codeString.length) {
          cleanedCode += codeString[i];
        }
        i++;
        continue;
      }
      cleanedCode += char;
      i++;
      continue;
    }
    if (inRegExp) {
      if (char === "/") {
        inRegExp = false;
      } else if (char === "\\") {
        cleanedCode += char;
        i++;
        if (i < codeString.length) {
          cleanedCode += codeString[i];
        }
        i++;
        continue;
      }
      cleanedCode += char;
      i++;
      continue;
    }
    if (char === "/" && nextChar === "*") {
      inMultiLineComment = true;
      i += 2;
      continue;
    }
    if (char === "/" && nextChar === "/") {
      inSingleLineComment = true;
      i += 2;
      continue;
    }
    if (char === '"' || char === "'") {
      inString = char;
      cleanedCode += char;
      i++;
      continue;
    }
    if (char === "/") {
      const prevMeaningfulChar = cleanedCode.trim().slice(-1);
      if (prevMeaningfulChar === "" || ["(", ",", "=", ":", "[", "!", "&", "|", "?", "{", ";", "\n", "\r"].includes(prevMeaningfulChar)) {
        inRegExp = true;
        cleanedCode += char;
        i++;
        continue;
      }
    }
    cleanedCode += char;
    i++;
  }
  return cleanedCode;
}
var ScriptingTools = class {
  constructor(settings, frontmatter) {
    this.settings = settings;
    this.frontmatter = frontmatter;
  }
  /**
   * Check if a string complies with ISO Standard
   * 
   * @param str Any string
   * @param options Options to look for
   * @returns 
   */
  isISOString(str, options = {}) {
    const {
      withMilliseconds = false,
      withTimezone = false,
      withTime = true,
      withDate = true
    } = options;
    let dateRegexStr = "^(?:\\d{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12]\\d|3[01]))";
    let timeRegexStr = "(?:T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";
    if (withMilliseconds) {
      timeRegexStr += "\\.\\d{3}";
    }
    if (withTimezone) {
      timeRegexStr += "(?:Z|[+-](?:[01]\\d|2[0-3]):[0-5]\\d)?)?";
    } else {
      timeRegexStr += ")?";
    }
    let regexStr = "";
    if (withDate && withTime) {
      regexStr = `${dateRegexStr}${timeRegexStr}$`;
    } else if (withDate) {
      regexStr = `${dateRegexStr}$`;
    } else if (withTime) {
      regexStr = `^${timeRegexStr.slice(4)}$`;
    } else {
      return false;
    }
    const regex = new RegExp(regexStr);
    return regex.test(str);
  }
  /**
   * Try to convert Any Types to a specific Type
   * @param input 
   * @param typeString 'string' | 'number' | 'boolean' | 'string[]'
   * @returns 
   */
  tryConvert(input, typeString) {
    switch (typeString) {
      case "string":
        if (typeof input === "string") {
          return input;
        }
        return void 0;
      case "number":
        const num = Number(input);
        if (!isNaN(num)) {
          return num;
        }
        return void 0;
      case "boolean":
        if (typeof input === "boolean") {
          return input;
        }
        if (typeof input === "string") {
          const lowerValue = input.toLowerCase();
          if (lowerValue === "true") {
            return true;
          }
          if (lowerValue === "false") {
            return false;
          }
        }
        if (typeof input === "number") {
          if (input === 1) {
            return true;
          }
          if (input === 0) {
            return false;
          }
        }
        return void 0;
      case "string[]":
        if (Array.isArray(input) && input.every((item) => typeof item === "string")) {
          return input;
        }
        return void 0;
      default:
        return void 0;
    }
  }
  formatToYAMLSaveString(text, replaceBy = void 0) {
    let replaceString = "-";
    if (!replaceBy && this.settings) {
      replaceString = this.settings.specialCharReplacement || "-";
    } else {
      if (replaceBy)
        replaceString = replaceBy;
    }
    return text.replace(/[^a-zA-Z0-9\-_\/äöüßÄÖÜáéíóúýÁÉÍÓÚÝàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛãñõÃÑÕ]/g, replaceString);
  }
  /**
   * Converts a string to a YAML-safe format by adding quotes when necessary.
   * @param input The string, boolean, number or array to make YAML-safe
   * @returns The safely quoted string when needed, or the original string if safe
   */
  toYamlSafeString(input) {
    if (Array.isArray(input)) {
      input.forEach((item, index) => {
        input[index] = this.toYamlSafeString(item).toString();
      });
      return input;
    }
    switch (typeof input) {
      case "number":
        return input;
      case "boolean":
        return input ? "true" : "false";
      case "string":
        const trimmed = input.trim();
        if (trimmed === "")
          return '""';
        const needsQuotes = /[:{}\[\],&*#?|<>=!%@`"'\\]|^[-?\n]|[\s\n]|^[yYnN]|^[0-9]|^[+-]|^(true|false|yes|no|on|off)$/i.test(trimmed);
        const isAlreadyQuoted = trimmed.startsWith('"') && trimmed.endsWith('"') || trimmed.startsWith("'") && trimmed.endsWith("'");
        if (!needsQuotes && !isAlreadyQuoted) {
          return trimmed;
        }
        if (!isAlreadyQuoted) {
          return `"${trimmed.replace(/"/g, '\\"')}"`;
        }
        return trimmed;
      default:
        console.error(`toYamlSafeString(${input}) if of type '${typeof input}'`);
        return input;
    }
  }
  replaceSpaces(text, replaceBy = void 0) {
    let replaceString = "_";
    if (!replaceBy && this.settings) {
      replaceString = this.settings.spaceReplacement || "_";
    } else {
      if (replaceBy)
        replaceString = replaceBy;
    }
    return text.replace(/\s+/g, replaceString);
  }
  formatCamelCase(text) {
    let textParts = text.split(" ");
    let convertedTextParts = [];
    textParts.forEach((text2, index) => {
      let newTextPart = text2.toLowerCase();
      if (index > 0)
        newTextPart = newTextPart.charAt(0).toUpperCase() + newTextPart.slice(1);
      convertedTextParts.push(newTextPart);
    });
    return convertedTextParts.join("");
  }
  formatUpperCamelCase(text) {
    let textParts = text.split(" ");
    let convertedTextParts = [];
    textParts.forEach((text2, index) => {
      let newTextPart = text2.toLowerCase();
      newTextPart = newTextPart.charAt(0).toUpperCase() + newTextPart.slice(1);
      convertedTextParts.push(newTextPart);
    });
    return convertedTextParts.join("");
  }
  /**
   * get the path to a file from a string containing the full parh/name string
   * @param path string
   * @param separator string defaults to '/'
   * @returns string
   */
  getFoldersFromPath(path, separator = "/") {
    if (path === null)
      return null;
    if (path === void 0)
      return void 0;
    const currentPathParts = path.split("/");
    currentPathParts.pop();
    return currentPathParts.join(separator);
  }
  /**
   * removes duplicate strings in an array and deletes empty strings
   * @param stringArray 
   * @returns 
   */
  removeDuplicateStrings(stringArray) {
    if (!stringArray)
      return [];
    const uniqueStringsSet = new Set(stringArray);
    uniqueStringsSet.delete("");
    return [...uniqueStringsSet];
  }
};

// src/rules.ts
var ruleFunctions = [];
function getRuleFunctionById(id) {
  return ruleFunctions.find((rule) => rule.id === id);
}
function applyFormatOptions(value, rule) {
  if (rule.type === "date" || rule.type === "datetime")
    return value;
  switch (typeof value) {
    case "boolean":
    case "number":
      return value;
    case "string":
      if (rule.spaceReplacement && rule.spaceReplacement !== "")
        value = value.replace(/\s+/g, rule.spaceReplacement);
      if (rule.specialCharReplacement && rule.specialCharReplacement !== "")
        value = value.replace(/[^a-zA-Z0-9\-_\/äöüßÄÖÜáéíóúýÁÉÍÓÚÝàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛãñõÃÑÕ]/g, rule.specialCharReplacement);
      if (rule.lowercaseTags)
        value = value.toLowerCase();
      if (rule.prefix && rule.prefix !== "")
        value = rule.prefix + value;
      if (rule.asLink)
        value = `[[${value}]]`;
      return value;
    case "object":
      if (Array.isArray(value)) {
        return value.map((value2) => applyFormatOptions(value2, rule));
      }
      return value;
  }
  return;
}
function executeRule(app, settings, currentFile, returnResult, rule, frontMatter, oldPath) {
  if (!rule.active)
    return returnResult;
  const tools = new ScriptingTools(settings, frontMatter);
  let fxResult;
  let oldResult;
  let oldFile = void 0;
  if (oldPath) {
    let oldFileParts = oldPath.split("/");
    oldFile = {
      path: oldPath,
      extension: oldFileParts[oldFileParts.length - 1].split(".")[1],
      name: oldFileParts[oldFileParts.length - 1].split(".")[0],
      stat: currentFile.stat,
      basename: currentFile.basename,
      vault: currentFile.vault,
      parent: currentFile.parent
    };
  }
  if (rule.content === "script") {
    const ruleFunction = parseJSCode(rule.jsCode);
    if (typeof ruleFunction !== "function")
      return;
    fxResult = applyFormatOptions(ruleFunction(app, currentFile, tools), rule);
    if (oldFile) {
      oldResult = applyFormatOptions(ruleFunction(app, oldFile, tools), rule);
    }
  } else {
    const functionIndex = ruleFunctions.findIndex((fx) => fx.id === rule.content);
    if (functionIndex !== -1) {
      if (ruleFunctions[functionIndex].inputProperty) {
        fxResult = applyFormatOptions(ruleFunctions[functionIndex].fx(app, currentFile, tools, frontMatter[rule.inputProperty]), rule);
      } else {
        fxResult = applyFormatOptions(ruleFunctions[functionIndex].fx(app, currentFile, tools), rule);
      }
      if (oldFile) {
        if (ruleFunctions[functionIndex].inputProperty) {
          oldResult = applyFormatOptions(ruleFunctions[functionIndex].fx(app, oldFile, tools, frontMatter[rule.inputProperty]), rule);
        } else {
          oldResult = applyFormatOptions(ruleFunctions[functionIndex].fx(app, oldFile, tools), rule);
        }
      }
    }
  }
  if (rule.type === "number" || rule.type === "checkbox" || rule.type === "date" || rule.type === "datetime") {
    return fxResult;
  }
  switch (rule.addContent) {
    case "overwrite":
      returnResult = fxResult;
      break;
    case "end":
      if (rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
        if (!fxResult)
          fxResult = [];
        if (typeof fxResult === "string")
          fxResult = [fxResult];
        if (!Array.isArray(returnResult))
          returnResult = [returnResult];
        if (!Array.isArray(oldResult))
          oldResult = [oldResult];
        let filtered = returnResult.filter((value) => !oldResult.includes(value));
        returnResult = tools.removeDuplicateStrings(filtered.concat(fxResult));
      } else {
        if (!returnResult)
          returnResult = "";
        returnResult = returnResult.replaceAll(returnResult, oldResult);
        returnResult = returnResult + fxResult;
      }
      break;
    case "start":
      if (rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
        if (!fxResult)
          fxResult = [];
        if (typeof fxResult === "string")
          fxResult = [fxResult];
        if (!Array.isArray(returnResult))
          returnResult = [returnResult];
        if (!Array.isArray(oldResult))
          oldResult = [oldResult];
        let filtered = returnResult.filter((value) => !oldResult.includes(value));
        returnResult = tools.removeDuplicateStrings(fxResult.concat(filtered));
      } else {
        if (!returnResult)
          returnResult = "";
        returnResult = returnResult.replaceAll(returnResult, oldResult);
        returnResult = fxResult + returnResult;
      }
      break;
  }
  return returnResult;
}
function removeRule(app, settings, currentFile, returnResult, rule, frontMatter) {
  const tools = new ScriptingTools(settings);
  let fxResult;
  if (rule.content === "script") {
    const ruleFunction = parseJSCode(rule.jsCode);
    if (typeof ruleFunction !== "function")
      return;
    fxResult = ruleFunction(app, currentFile, tools);
  } else {
    const functionIndex = ruleFunctions.findIndex((fx) => fx.id === rule.content);
    if (functionIndex !== -1) {
      if (ruleFunctions[functionIndex].inputProperty) {
        fxResult = applyFormatOptions(ruleFunctions[functionIndex].fx(app, currentFile, tools, frontMatter[rule.inputProperty]), rule);
      } else {
        fxResult = applyFormatOptions(ruleFunctions[functionIndex].fx(app, currentFile, tools), rule);
      }
    }
  }
  switch (rule.addContent) {
    case "overwrite":
      returnResult = fxResult;
      break;
    case "end":
      if (rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
        if (!fxResult)
          fxResult = [];
        if (typeof fxResult === "string")
          fxResult = [fxResult];
        if (!Array.isArray(returnResult))
          returnResult = [returnResult];
        if (!Array.isArray(fxResult))
          fxResult = [fxResult];
        let filtered = returnResult.filter((value) => !fxResult.includes(value));
        returnResult = tools.removeDuplicateStrings(filtered);
      } else {
        if (!returnResult)
          returnResult = "";
        returnResult = returnResult.replaceAll(returnResult, fxResult);
      }
      break;
    case "start":
      if (rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
        if (!fxResult)
          fxResult = [];
        if (typeof fxResult === "string")
          fxResult = [fxResult];
        if (!Array.isArray(returnResult))
          returnResult = [returnResult];
        if (!Array.isArray(fxResult))
          fxResult = [fxResult];
        let filtered = returnResult.filter((value) => !fxResult.includes(value));
        returnResult = tools.removeDuplicateStrings(filtered);
      } else {
        if (!returnResult)
          returnResult = "";
        returnResult = returnResult.replaceAll(returnResult, fxResult);
      }
      break;
  }
  return returnResult;
}
ruleFunctions.push({
  id: "default",
  description: "Pass parameter",
  source: "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}",
  type: ["text"],
  fx: function(app, file, tools) {
    let result = "";
    return result;
  }
});
ruleFunctions.push({
  id: "fullPath",
  description: "Full path, filename",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases", "multitext"],
  fx: function(app, file, tools) {
    let parts = file.path.split("/");
    parts.pop();
    parts.push(file.basename);
    return parts.join("/");
  }
});
ruleFunctions.push({
  id: "fullPathExt",
  description: "Full path, filename and Extension",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const result = file.path;\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools) {
    return `${file.path}`;
  }
});
ruleFunctions.push({
  id: "path",
  description: "Full Path",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools) {
    let parts = file.path.split("/");
    parts.pop();
    return parts.join("/");
  }
});
ruleFunctions.push({
  id: "linkToFile",
  description: "Link to file",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases", "multitext"],
  fx: function(app, file, tools) {
    let parts = file.path.split("/");
    parts.pop();
    if (parts[parts.length - 1] === file.basename)
      parts.pop();
    return `[[${parts.join("/")}/${file.basename}|${file.basename}]]`;
  }
});
ruleFunctions.push({
  id: "pathFolderNotes",
  description: "Path (folder notes)",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases", "multitext"],
  fx: function(app, file, tools) {
    let parts = file.path.split("/");
    parts.pop();
    if (parts[parts.length - 1] === file.basename)
      parts.pop();
    return parts.join("/");
  }
});
ruleFunctions.push({
  id: "fullPathFolderNotes",
  description: 'Full Path (comply with "folder notes")',
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools) {
    let parts = file.path.split("/");
    parts.pop();
    if (parts[parts.length - 1] === file.basename)
      parts.pop();
    parts.push(file.basename);
    return parts.join("/");
  }
});
ruleFunctions.push({
  id: "fullPathExtFolderNotes",
  description: 'Full Path with Extension (comply with "folder notes")',
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools) {
    let parts = file.path.split("/");
    parts.pop();
    if (parts[parts.length - 1] === file.basename)
      parts.pop();
    parts.push(file.name);
    return parts.join("/");
  }
});
ruleFunctions.push({
  id: "isRoot",
  description: "File in Root folder",
  source: "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  return parts.length === 1;\n}",
  type: ["checkbox"],
  fx: function(app, file, tools) {
    let parts = file.path.split("/");
    return parts.length === 1;
  }
});
ruleFunctions.push({
  id: "folder",
  description: "Parent Folder",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    result = parts[parts.length-2];\n  }\n  return result;\n}",
  type: ["text", "tags"],
  fx: function(app, file, tools) {
    const path = file.path;
    const parts = path.split("/");
    let result = "";
    if (parts.length > 1) {
      result = parts[parts.length - 2];
    }
    return result;
  }
});
ruleFunctions.push({
  id: "folders",
  description: "All folders of the file as a list",
  source: "function (app, file, tools) { // do not change this line!\n  const path = file.path; // acquire file path\n  const result = path.split('/');\n  result.pop(); // remove file name\n  return result;\n}",
  type: ["multitext", "tags", "aliases"],
  fx: function(app, file, tools) {
    const path = file.path;
    const result = path.split("/");
    result.pop();
    return result;
  }
});
ruleFunctions.push({
  id: "rootFolder",
  description: "Root folder",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    result = parts[0];\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools) {
    const path = file.path;
    const parts = path.split("/");
    let result = "";
    if (parts.length > 1) {
      result = parts[0];
    }
    return result;
  }
});
ruleFunctions.push({
  id: "name",
  description: "File name without extension",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file name\n  const result = file.name.split('.');\n  result.pop(); // remove extension\n  result.join('.'); // reconstruct the file name\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools) {
    const result = file.name.split(".");
    result.pop();
    result.join(".");
    return result;
  }
});
ruleFunctions.push({
  id: "nameExt",
  description: "File name with extension",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file name\n  const result = file.name;\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools) {
    const result = file.name;
    return result;
  }
});
ruleFunctions.push({
  id: "getProperty",
  description: "Get a property",
  inputProperty: true,
  source: "function (app, file, tools) { // do not change this line!\n  const result = input;\n  return result;\n}",
  type: ["text", "multitext", "tags", "aliases"],
  fx: function(app, file, tools, input) {
    const result = input;
    return result;
  }
});
ruleFunctions.push({
  id: "dateTimeCreated",
  description: "Date (and Time) created",
  source: "function (app, file, tools) { // do not change this line!\n  const timeOffset = new Date(Date.now()).getTimezoneOffset()*60000; // get local time offset\n  const result = new Date(file.stat.ctime-timeOffset);\n  return result.toISOString().split('Z')[0]; // remove UTC symbol\n}",
  type: ["date", "datetime"],
  fx: function(app, file, tools) {
    const timeOffset = new Date(Date.now()).getTimezoneOffset() * 6e4;
    const result = new Date(file.stat.ctime - timeOffset);
    return result.toISOString().split("Z")[0];
  }
});
ruleFunctions.push({
  id: "dateTimeModified",
  description: "Date (and Time) modified",
  source: "function (app, file, tools) { // do not change this line!\n  const timeOffset = new Date(Date.now()).getTimezoneOffset()*60000;\n  const result = new Date(file.stat.mtime-timeOffset); // Apply offset to GMT Timestamp\n  return result.toISOString().split('Z')[0]; // remove UTC symbol\n}",
  type: ["date", "datetime"],
  fx: function(app, file, tools) {
    const timeOffset = new Date(Date.now()).getTimezoneOffset() * 6e4;
    const result = new Date(file.stat.mtime - timeOffset);
    return result.toISOString().split("Z")[0];
  }
});
ruleFunctions.push({
  id: "fileSizeBytes",
  description: "File size in bytes",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file size\n  const result = file.stat.size;\n  return result; // return you result.\n}",
  type: ["number"],
  fx: function(app, file, tools) {
    const result = file.stat.size;
    return result;
  }
});
ruleFunctions.push({
  id: "fileSizeString",
  description: "File size formatted as text",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file size\n  let size =file.stat.size;\n  const precision = 2; // number of decimal places\n  if (size > 1024) {\n    size = size / 1024;\n    if (size > 1024) {\n      size = size / 1024;\n      if (size > 1024) {\n        size = size / 1024;\n        return Number.parseFloat(size).toFixed(precision) + ' GB';\n      } \n      return Number.parseFloat(size).toFixed(precision) + ' MB';\n    }\n    return Number.parseFloat(size).toFixed(precision) + ' KB';\n  }   \n  return size + ' Bytes'; // return you result.\n}",
  type: ["text"],
  fx: function(app, file, tools) {
    let size = file.stat.size;
    const precision = 2;
    if (size > 1024) {
      size = size / 1024;
      if (size > 1024) {
        size = size / 1024;
        if (size > 1024) {
          size = size / 1024;
          return size.toFixed(precision) + " GB";
        }
        return size.toFixed(precision) + " MB";
      }
      return size.toFixed(precision) + " KB";
    }
    return size + " Bytes";
  }
});

// src/types.ts
var versionString = "0.0.12";
var DEFAULT_FILTER_FILES_AND_FOLDERS = {
  selectedFolders: [],
  selectedFiles: [],
  mode: "exclude",
  display: "folders"
};
var DEFAULT_SETTINGS = {
  tagPrefix: "",
  excludeRootFolder: false,
  tagsPropertyName: "tags",
  spaceReplacement: "_",
  specialCharReplacement: "_",
  lowercaseTags: false,
  knownProperties: [],
  rules: [],
  liveRules: [],
  useTextArea: false,
  exclude: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "exclude",
    display: "folders"
  },
  include: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "include",
    display: "folders"
  },
  configuredProperties: []
};
var DEFAULT_RULE_DEFINITION = {
  id: "",
  active: true,
  asLink: false,
  addContent: "overwrite",
  property: "",
  value: "",
  customProperty: "",
  type: "text",
  typeProperty: { name: "", type: "text", source: "registered" },
  content: "",
  buildInCode: "",
  jsCode: "",
  showContent: false,
  exclude: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "exclude",
    display: "folders"
  },
  include: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "include",
    display: "folders"
  },
  prefix: "",
  spaceReplacement: "",
  specialCharReplacement: "",
  lowercaseTags: false,
  inputProperty: "",
  onlyModify: true
};

// src/alertBox.ts
var import_obsidian2 = require("obsidian");
var AlertModal = class extends import_obsidian2.Modal {
  constructor(app, title, description, btn1, btn2) {
    super(app);
    this.title = title;
    this.description = description;
    this.btn1Text = btn1;
    this.btn2Text = btn2;
    this.promise = new Promise((resolve) => {
      this.resolvePromise = resolve;
    });
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.title });
    contentEl.createEl("p", { text: this.description });
    new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn.setButtonText(this.btn1Text).setCta().onClick(() => {
        this.close();
        this.resolvePromise(true);
      });
    }).addButton((btn) => {
      btn.setButtonText(this.btn2Text).onClick(() => {
        this.close();
        this.resolvePromise(false);
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  async openAndGetValue() {
    this.open();
    return this.promise;
  }
};

// src/directorySelectionModal.ts
var import_obsidian3 = require("obsidian");
var DirectorySelectionModal = class extends import_obsidian3.Modal {
  // Reference to update dropdown on reset
  /**
   * Creates an instance of the DirectorySelectionModal.
   * @param app - The Obsidian App instance.
   * @param initialFolders - Array of initially selected folder paths.
   * @param initialFiles - Array of initially selected file paths.
   * @param initialMode - The initial selection mode ('include' or 'exclude').
   * @param okCallback - Function to call when the user clicks "OK". Receives the selection result.
   */
  constructor(app, initialFolders, initialFiles, initialMode, initialDisplay, includeExcludeSelectable, okCallback) {
    super(app);
    this.showFiles = false;
    // Container for the tree view
    this.treeNodes = /* @__PURE__ */ new Map();
    // Map path to node info for quick access
    this.modeDropdown = null;
    this.initialFoldersSnapshot = new Set(initialFolders);
    this.initialFilesSnapshot = new Set(initialFiles);
    this.initialModeSnapshot = initialMode;
    this.initialDisplaySnapshot = initialDisplay;
    this.showFiles = initialDisplay === "files" || initialFiles.length > 0;
    this.includeExcludeSelectable = includeExcludeSelectable;
    this.okCallback = okCallback;
    this.resetSelectionToInitial();
  }
  /**
   * Resets the current selection state to the initial state provided at construction.
   */
  resetSelectionToInitial() {
    this.currentFolders = new Set(this.initialFoldersSnapshot);
    this.currentFiles = new Set(this.initialFilesSnapshot);
    this.currentMode = this.initialModeSnapshot;
  }
  /**
   * Resets the current selection state to empty.
   */
  resetSelectionToEmpty() {
    this.currentFolders = /* @__PURE__ */ new Set([]);
    this.currentFiles = /* @__PURE__ */ new Set([]);
    this.currentMode = this.initialModeSnapshot;
  }
  /**
   * Called when the modal is opened. Builds the UI.
   */
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("directory-selection-modal");
    if (this.includeExcludeSelectable) {
      contentEl.createEl("h2", { text: "Include or Exclude Folders and Files" });
    } else {
      contentEl.createEl("h2", { text: `${this.currentMode === "exclude" ? "Exclude" : "Include"} Folders and Files` });
    }
    const controlsEl = contentEl.createDiv({ cls: "modal-controls" });
    this.createModeSetting(controlsEl);
    this.createShowFilesSetting(controlsEl);
    this.treeRootElement = contentEl.createDiv({ cls: "tree-view-container" });
    this.treeRootElement.style.maxHeight = "600px";
    this.treeRootElement.style.overflowY = "auto";
    this.treeRootElement.style.border = "1px solid var(--background-modifier-border)";
    this.treeRootElement.style.padding = "10px";
    this.treeRootElement.style.marginTop = "10px";
    this.treeRootElement.style.marginBottom = "10px";
    this.buildAndRenderTree();
    this.createActionButtons(contentEl);
  }
  /**
   * Creates the dropdown setting for choosing the selection mode.
   * @param containerEl - The HTML element to append the setting to.
   */
  createModeSetting(containerEl) {
    if (this.includeExcludeSelectable) {
      this.modeDropdown = new import_obsidian3.Setting(containerEl).setName("Selection Mode").setDesc("Choose if the selected files and folders should be excluded or included.").addDropdown((dropdown) => {
        dropdown.addOption("exclude", "exclude").addOption("include", "include").setValue(this.currentMode).onChange((value) => {
          this.currentMode = value;
          this.updateTreeAppearance();
        });
      });
    }
  }
  /**
   * Updates the mode dropdown UI element to reflect the currentMode state.
   */
  updateModeDropdown() {
    var _a;
    const dropdownComponent = (_a = this.modeDropdown) == null ? void 0 : _a.components[0];
    if (dropdownComponent && typeof dropdownComponent.setValue === "function") {
      dropdownComponent.setValue(this.currentMode);
    }
  }
  /**
   * Creates the toggle setting for showing/hiding files in the tree.
   * @param containerEl - The HTML element to append the setting to.
   */
  createShowFilesSetting(containerEl) {
    new import_obsidian3.Setting(containerEl).setName("Show Files").setDesc("Show Files within the directory tree.").addToggle((toggle) => {
      toggle.setValue(this.showFiles).onChange((value) => {
        this.showFiles = value;
        this.buildAndRenderTree();
      });
    });
  }
  /**
   * Creates the "OK" and "Reset" buttons.
   * @param containerEl - The HTML element to append the buttons to.
   */
  createActionButtons(containerEl) {
    const buttonsEl = containerEl.createDiv({ cls: "modal-buttons" });
    buttonsEl.style.marginTop = "15px";
    buttonsEl.style.display = "flex";
    buttonsEl.style.justifyContent = "flex-end";
    buttonsEl.style.gap = "10px";
    const resetButton = buttonsEl.createEl("button");
    (0, import_obsidian3.setIcon)(resetButton, "reset");
    resetButton.ariaLabel = "Reset selection";
    resetButton.onclick = () => {
      this.resetSelectionToInitial();
      this.updateModeDropdown();
      this.buildAndRenderTree();
    };
    const emptyButton = buttonsEl.createEl("button");
    (0, import_obsidian3.setIcon)(emptyButton, "eraser");
    emptyButton.ariaLabel = "Clear selection";
    emptyButton.onclick = () => {
      this.resetSelectionToEmpty();
      this.updateModeDropdown();
      this.buildAndRenderTree();
    };
    const cancelButton = buttonsEl.createEl("button", { text: "Cancel" });
    cancelButton.ariaLabel = "close and discard changes";
    cancelButton.onclick = () => {
      console.log("Cancel Clicked - Returning");
      this.okCallback(null);
      this.close();
    };
    const okButton = buttonsEl.createEl("button", { text: "OK", cls: "mod-cta" });
    cancelButton.ariaLabel = "close and save changes";
    okButton.onclick = () => {
      this.close();
    };
  }
  /**
   * Builds the logical tree structure data from the vault's files and folders.
   * @returns The root node of the tree structure.
   */
  buildTreeData() {
    const vaultRootNode = {
      path: "/",
      name: this.app.vault.getName() || "Vault",
      // Use vault name or default
      type: "folder",
      children: [],
      // Placeholder elements, will be assigned during rendering if root is rendered
      element: null,
      checkbox: null,
      label: null,
      container: null
    };
    const folderNodes = /* @__PURE__ */ new Map();
    folderNodes.set("/", vaultRootNode);
    const allFiles = this.app.vault.getFiles();
    allFiles.forEach((file) => {
      const parentFolder = file.parent;
      if (!parentFolder)
        return;
      let currentPath = "";
      const pathParts = parentFolder.path.split("/").filter((p) => p.length > 0);
      let parentNode = vaultRootNode;
      pathParts.forEach((part) => {
        currentPath = currentPath === "/" ? part : `${currentPath}/${part}`;
        if (!folderNodes.has(currentPath)) {
          const newFolderNode = {
            path: currentPath,
            name: part,
            type: "folder",
            children: [],
            // Placeholders, assigned during rendering
            element: null,
            checkbox: null,
            label: null,
            container: null
          };
          folderNodes.set(currentPath, newFolderNode);
          if (!parentNode.children) {
            parentNode.children = [];
          }
          parentNode.children.push(newFolderNode);
          parentNode = newFolderNode;
        } else {
          parentNode = folderNodes.get(currentPath);
        }
      });
    });
    if (this.showFiles) {
      allFiles.forEach((file) => {
        const parentFolder = file.parent;
        if (!parentFolder) {
          return;
        }
        const parentPath = "/" + parentFolder.path;
        const parentNode = folderNodes.get(parentPath);
        const fileNode = {
          path: file.path,
          name: file.name,
          type: "file",
          // Files don't have children
          // Placeholders, assigned during rendering
          element: null,
          checkbox: null,
          label: null,
          container: null
        };
        if (parentNode) {
          if (!parentNode.children) {
            parentNode.children = [];
          }
          parentNode.children.push(fileNode);
        } else {
        }
      });
    }
    const sortNodes = (a, b) => {
      if (a.type === "folder" && b.type === "file")
        return -1;
      if (a.type === "file" && b.type === "folder")
        return 1;
      return a.name.localeCompare(b.name);
    };
    folderNodes.forEach((node) => {
      var _a;
      return (_a = node.children) == null ? void 0 : _a.sort(sortNodes);
    });
    return vaultRootNode;
  }
  /**
   * Renders the entire tree structure in the DOM based on the tree data.
   */
  renderTree() {
    var _a;
    this.treeRootElement.empty();
    this.treeNodes.clear();
    const treeData = this.buildTreeData();
    const rootUl = this.treeRootElement.createEl("ul");
    rootUl.addClass("tree-root-ul");
    rootUl.style.listStyle = "none";
    rootUl.style.paddingLeft = "0";
    (_a = treeData.children) == null ? void 0 : _a.forEach((childNode) => {
      this.renderTreeNode(childNode, rootUl, 0);
    });
  }
  /**
   * Recursively renders a single tree node and its children in the DOM.
   * @param node - The TreeNode data to render.
   * @param parentElement - The HTML `ul` element to append this node's `li` to.
   * @param level - The current indentation level.
   */
  renderTreeNode(node, parentElement, level) {
    const li = parentElement.createEl("li");
    li.style.marginLeft = `${level * 20}px`;
    li.addClass(`tree-node-${node.type}`);
    const container = li.createDiv({ cls: "tree-node-container" });
    container.style.display = "flex";
    container.style.alignItems = "center";
    container.style.padding = "2px 0";
    const checkbox = container.createEl("input", { type: "checkbox" });
    checkbox.id = `tree-cb-${node.path.replace(/[^a-zA-Z0-9]/g, "-")}`;
    checkbox.dataset.path = node.path;
    checkbox.dataset.type = node.type;
    const label = container.createEl("label");
    label.textContent = `${node.type === "folder" ? "\u{1F4C1}" : "\u{1F4C4}"} ${node.name}`;
    label.htmlFor = checkbox.id;
    label.style.marginLeft = "5px";
    label.style.cursor = "pointer";
    label.title = node.path;
    node.element = li;
    node.checkbox = checkbox;
    node.label = label;
    node.container = container;
    this.treeNodes.set(node.path, node);
    if (node.type === "folder") {
      checkbox.checked = this.currentFolders.has(node.path);
    } else {
      checkbox.checked = this.currentFiles.has(node.path);
    }
    checkbox.onchange = (event) => {
      const target = event.target;
      const path = target.dataset.path;
      const type = target.dataset.type;
      if (target.checked) {
        if (type === "folder")
          this.currentFolders.add(path);
        else
          this.currentFiles.add(path);
      } else {
        if (type === "folder")
          this.currentFolders.delete(path);
        else
          this.currentFiles.delete(path);
      }
      this.updateTreeAppearance();
    };
    if (node.type === "folder" && node.children && node.children.length > 0) {
      const childrenUl = li.createEl("ul");
      childrenUl.style.listStyle = "none";
      childrenUl.style.paddingLeft = "0";
      childrenUl.style.marginLeft = "0";
      node.children.forEach((child) => this.renderTreeNode(child, childrenUl, level + 1));
    }
  }
  /**
   * Updates the visual appearance (enabled/disabled/styling) of all nodes
   * in the tree based on the current mode and selections.
   */
  updateTreeAppearance() {
    this.treeNodes.forEach((node) => {
      let isDisabled = false;
      let isEffectivelyIncluded = false;
      let isEffectivelyExcluded = false;
      let ancestorFolderSelected = false;
      let currentPath = node.path;
      while (currentPath !== "/") {
        const parentPath = currentPath.substring(0, currentPath.lastIndexOf("/")) || "/";
        if (this.currentFolders.has(parentPath)) {
          ancestorFolderSelected = true;
          break;
        }
        if (parentPath === currentPath)
          break;
        currentPath = parentPath;
      }
      const nodeSelected = node.type === "folder" ? this.currentFolders.has(node.path) : this.currentFiles.has(node.path);
      if (this.currentMode === "exclude") {
        isEffectivelyExcluded = nodeSelected || ancestorFolderSelected;
        isDisabled = isEffectivelyExcluded;
      } else {
        if (node.type === "folder") {
          isEffectivelyIncluded = nodeSelected || ancestorFolderSelected;
        } else {
          const parentPath = node.path.substring(0, node.path.lastIndexOf("/")) || "/";
          const parentEffectivelyIncluded = this.isPathEffectivelyIncluded(parentPath);
          isEffectivelyIncluded = nodeSelected || parentEffectivelyIncluded;
        }
        isDisabled = !isEffectivelyIncluded;
      }
      node.checkbox.disabled = false;
      if (isDisabled) {
        node.container.style.opacity = "0.5";
        node.label.style.textDecoration = "line-through";
        node.element.addClass("is-disabled");
      } else {
        node.container.style.opacity = "1";
        node.label.style.textDecoration = "none";
        node.element.removeClass("is-disabled");
      }
      node.element.classList.remove("is-included", "is-excluded");
      if (this.currentMode === "include" && isEffectivelyIncluded) {
        node.element.addClass("is-included");
      } else if (this.currentMode === "exclude" && isEffectivelyExcluded) {
        node.element.addClass("is-excluded");
      }
    });
  }
  /**
   * Helper function to determine if a given path is effectively included
   * in the current selection under 'include' mode.
   * A path is included if it (file or folder) is selected, or if any of its ancestor FOLDERS are selected.
   * @param path - The folder or file path to check.
   * @returns True if the path should be considered included, false otherwise.
   */
  isPathEffectivelyIncluded(path) {
    if (this.currentMode !== "include") {
      return !this.isPathEffectivelyExcluded(path);
    }
    if (this.currentFiles.has(path) || this.currentFolders.has(path)) {
      return true;
    }
    let current = path;
    while (current !== "/") {
      const parentPath = current.substring(0, current.lastIndexOf("/")) || "/";
      if (this.currentFolders.has(parentPath)) {
        return true;
      }
      if (parentPath === current)
        break;
      current = parentPath;
    }
    return false;
  }
  /**
  * Helper function to determine if a given path is effectively excluded
  * in the current selection under 'exclude' mode.
  * A path is excluded if it (file or folder) is selected, or if any of its ancestor FOLDERS are selected.
  * @param path - The folder or file path to check.
  * @returns True if the path should be considered excluded, false otherwise.
  */
  isPathEffectivelyExcluded(path) {
    if (this.currentMode !== "exclude") {
      return false;
    }
    if (this.currentFiles.has(path) || this.currentFolders.has(path)) {
      return true;
    }
    let current = path;
    while (current !== "/") {
      const parentPath = current.substring(0, current.lastIndexOf("/")) || "/";
      if (this.currentFolders.has(parentPath)) {
        return true;
      }
      if (parentPath === current)
        break;
      current = parentPath;
    }
    return false;
  }
  /**
   * Combines building the tree data, rendering the DOM, and applying initial appearance.
   */
  buildAndRenderTree() {
    this.renderTree();
    this.updateTreeAppearance();
  }
  /**
   * Called when the modal is closed. Cleans up resources.
   */
  onClose() {
    const result = {
      folders: Array.from(this.currentFolders),
      files: Array.from(this.currentFiles),
      mode: this.currentMode,
      display: this.currentDisplay
    };
    console.log("OK Clicked - Returning Result:", result);
    this.okCallback(result);
    const { contentEl } = this;
    contentEl.empty();
    this.treeNodes.clear();
    this.modeDropdown = null;
  }
};
function openDirectorySelectionModal(app, initialFolders, initialFiles, initialMode, initialDisplay, includeExcludeSelectable, okCallback) {
  new DirectorySelectionModal(
    app,
    initialFolders,
    initialFiles,
    initialMode,
    initialDisplay,
    includeExcludeSelectable,
    okCallback
  ).open();
}

// src/settings.ts
var import_crypto2 = require("crypto");

// src/settings-properties.ts
var import_obsidian5 = require("obsidian");
var import_crypto = require("crypto");

// src/editorModal.ts
var import_obsidian4 = require("obsidian");
var codeEditorModal = class extends import_obsidian4.Modal {
  /**
   * Creates an instance of the DirectorySelectionModal.
   * @param app - The Obsidian App instance.
   * @param plugin - The plugin instance.
   * @param initialCode - String with the initial code.
   * @param expectedType - Expected return type.
   * @param activeFile - The currently active file or folder.
   * @param frontmatter - Frontmatter data for the active file.
   * @param okCallback - Function to call when the user clicks "OK". Receives the selection result.
   */
  constructor(app, plugin, initialCode, expectedType, activeFile, frontmatter, okCallback) {
    super(app);
    this.initialCode = initialCode;
    this.expectedType = expectedType;
    this.useTextArea = false;
    this.checkedSuccessfully = false;
    this.activeFile = activeFile;
    this.frontmatter = frontmatter;
    this.currentType = expectedType;
    this.currentCode = initialCode;
    this.plugin = plugin;
    this.scriptingTools = new ScriptingTools(this.plugin.settings, this.frontmatter);
    this.okCallback = okCallback;
    this.resetSelectionToInitial();
  }
  /**
   * Resets the current selection state to the initial state provided at construction.
   */
  resetSelectionToInitial() {
    var _a;
    this.currentCode = this.initialCode;
    (_a = this.cmEditor) == null ? void 0 : _a.setValue(this.currentCode);
    if (this.functionResultTextComponent)
      this.functionResultTextComponent.setValue("");
  }
  /**
   * Resets the current selection state to empty.
   */
  resetSelectionToEmpty() {
    var _a;
    this.currentCode = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    (_a = this.cmEditor) == null ? void 0 : _a.setValue(this.currentCode);
    if (this.functionResultTextComponent)
      this.functionResultTextComponent.setValue("");
  }
  loadCodeMirrorMode(mode) {
    try {
      require(`obsidian/lib/codemirror/mode/${mode}/${mode}.js`);
      console.log(`CodeMirror mode '${mode}' loaded successfully (using require).`);
    } catch (error) {
      console.error(`Failed to load CodeMirror mode '${mode}' (using require):`, error);
    }
  }
  /**
   * Called when the modal is opened. Builds the UI.
   */
  async onOpen() {
    const { contentEl } = this;
    if (contentEl.parentElement)
      contentEl.parentElement.style.width = "900px";
    contentEl.empty();
    contentEl.addClass("codeEditor-modal");
    contentEl.createEl("h2", { text: "JavaScript Editor" });
    contentEl.createEl("body", { text: `Make sure your code results: ${this.expectedType}` });
    this.editorRootElement = contentEl.createDiv({ cls: "codeEditor-container" });
    this.editorRootElement.style.height = "600px";
    this.editorRootElement.style.overflowY = "auto";
    this.editorRootElement.style.padding = "10px";
    this.editorRootElement.style.marginTop = "10px";
    this.editorRootElement.style.marginBottom = "10px";
    this.cmEditor = null;
    const ruleOptionsDiv = contentEl.createDiv({ cls: "codeEditor-options" });
    if (this.useTextArea) {
      const ruleOptionsSettings = new import_obsidian4.Setting(this.editorRootElement).addTextArea((textArea) => {
        textArea.setPlaceholder("ender valid JS Code");
        textArea.inputEl.setAttribute("style", `height:190px; width:80%;`);
        textArea.onChange(async (value) => {
          if (this.functionTestButton)
            this.functionTestButton.buttonEl.addClass("mod-warning");
          this.currentCode = value;
        });
      });
    } else {
      const CodeMirror = window.CodeMirror;
      if (CodeMirror) {
        if (!CodeMirror.modes.javascript) {
          await this.loadCodeMirrorMode("javascript");
          console.log("javaScript support loaded");
        }
      }
      let jsCode = this.currentCode;
      this.cmEditor = CodeMirror(this.editorRootElement, {
        value: jsCode || "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result; // return you result.\n}",
        mode: "javascript",
        lineNumbers: true,
        theme: "obsidian",
        indentUnit: 4,
        lineWrapping: false,
        readOnly: false,
        outerHeight: "600px"
      });
      if (this.cmEditor) {
        this.cmEditor.on("change", (cmEditor) => {
          if (this.functionTestButton)
            this.functionTestButton.buttonEl.addClass("mod-warning");
        });
        this.cmEditor.on("blur", (cmEditor) => {
          this.currentCode = cmEditor.getValue();
        });
      }
      ;
      new import_obsidian4.Setting(ruleOptionsDiv).addButton((button) => {
        this.functionTestButton = button;
        button.setWarning().setButtonText("Run Code").setTooltip("Run the code and check for errors").onClick(async () => {
          if (this.cmEditor) {
            let jsCode2 = this.cmEditor.getValue();
            let userFunction = parseJSCode(jsCode2);
            if (typeof userFunction === "string") {
              let errorHint = "See console for details!";
              if (userFunction.contains("Unexpected token")) {
                errorHint = "Did you missed a semicolon (;)?";
              }
              if (this.functionResultTextComponent)
                this.functionResultTextComponent.setValue(`Syntax error: ${userFunction}! ${errorHint}`);
              this.checkedSuccessfully = false;
              button.buttonEl.addClass("mod-warning");
            } else {
              if (userFunction) {
                try {
                  const result = userFunction(this.app, this.activeFile, this.scriptingTools);
                  if (this.functionResultTextComponent)
                    this.functionResultTextComponent.setValue(`'${result.toString()}' (${typeof result})`);
                  this.updateTypeIcons(result, typesContainer, this.expectedType, this.currentType, this.plugin.settings);
                  button.buttonEl.removeClass("mod-warning");
                  this.checkedSuccessfully = true;
                } catch (e) {
                  if (this.functionResultTextComponent) {
                    this.functionResultTextComponent.setValue(`Syntax error: ${e.message}! See console for details!`);
                  }
                  console.error("Syntax error. ", e, jsCode2, userFunction);
                  this.checkedSuccessfully = false;
                  button.buttonEl.addClass("mod-warning");
                }
              } else {
                console.error("syntax error");
                this.checkedSuccessfully = false;
              }
            }
          }
        });
      }).addText((text) => {
        this.functionResultTextComponent = text;
        text.setPlaceholder("function result").setDisabled(true);
        this.functionResultTextComponent.inputEl.style.width = "580px";
      });
      const typesContainer = ruleOptionsDiv.createDiv({ cls: "property-icons-container" });
    }
    this.createActionButtons(contentEl);
  }
  updateTypeIcons(value, container, expectedType, currentType, settings) {
    const newType = typeof value;
    const typeIcons = {
      "string": ["text", "tags", "aliases", "multitext", "date", "datetime"],
      "number": ["number"],
      "boolean": ["checkbox"],
      "object": ["tags", "aliases", "multitext"]
    };
    if (newType === "string") {
      if (!this.scriptingTools.isISOString(value, { withDate: true })) {
        typeIcons[newType].splice(typeIcons[newType].indexOf("date"), 1);
        console.error("Invalid date format:", value);
      }
      if (!this.scriptingTools.isISOString(value, { withDate: true, withTime: true })) {
        typeIcons[newType].splice(typeIcons[newType].indexOf("datetime"), 1);
        console.error("Invalid date format:", value);
      }
    }
    container.empty();
    for (let obsidianType of typeIcons[newType]) {
      if (obsidianType) {
        const iconEl = container.createSpan({ cls: "property-icon setting-item-icon" });
        updatePropertyIcon(iconEl, obsidianType);
      }
    }
  }
  /**
   * Creates the "OK" and "Reset" buttons.
   * @param containerEl - The HTML element to append the buttons to.
   */
  createActionButtons(containerEl) {
    const buttonsEl = containerEl.createDiv({ cls: "modal-buttons" });
    buttonsEl.style.marginTop = "15px";
    buttonsEl.style.display = "flex";
    buttonsEl.style.justifyContent = "flex-end";
    buttonsEl.style.gap = "10px";
    const resetButton = buttonsEl.createEl("button");
    (0, import_obsidian4.setIcon)(resetButton, "reset");
    resetButton.ariaLabel = "Reset selection";
    resetButton.onclick = () => {
      this.resetSelectionToInitial();
    };
    const emptyButton = buttonsEl.createEl("button");
    (0, import_obsidian4.setIcon)(emptyButton, "eraser");
    emptyButton.ariaLabel = "Clear selection";
    emptyButton.onclick = () => {
      this.resetSelectionToEmpty();
    };
    const cancelButton = buttonsEl.createEl("button", { text: "Cancel" });
    cancelButton.ariaLabel = "close and discard changes";
    cancelButton.onclick = () => {
      console.log("Cancel Clicked - Returning");
      this.okCallback(null);
      this.close();
    };
    const okButton = buttonsEl.createEl("button", { text: "OK", cls: "mod-cta" });
    cancelButton.ariaLabel = "close and save changes";
    okButton.onclick = () => {
      this.close();
    };
  }
  /**
   * Called when the modal is closed. Cleans up resources.
   */
  onClose() {
    const result = {
      code: this.currentCode,
      checked: this.checkedSuccessfully,
      type: "text"
    };
    console.log("OK Clicked - Returning Result:", result);
    this.okCallback(result);
    const { contentEl } = this;
    contentEl.empty();
  }
};
function openCodeEditorModal(app, plugin, initialCode, expectedType, activeFile, frontmatter, okCallback) {
  new codeEditorModal(
    app,
    plugin,
    initialCode,
    expectedType,
    activeFile,
    frontmatter,
    okCallback
  ).open();
}

// src/settings-properties.ts
var RulesTable = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin, container, settingsParameter) {
    super(app, plugin);
    this.knownProperties = {};
    this.plugin = plugin;
    this.container = container;
    this.settingsParameter = settingsParameter;
  }
  /**
   * * Fetches custom property information from all markdown files in the vault.
   *
   * @return {*} 
   */
  fetchCustomPropertyInfos() {
    const propertyInfos = {};
    const files = this.app.vault.getMarkdownFiles();
    files.forEach((file) => {
      const metadata = this.app.metadataCache.getFileCache(file);
      if (metadata == null ? void 0 : metadata.frontmatter) {
        Object.keys(metadata.frontmatter).forEach((key) => {
          if (!propertyInfos[key]) {
            propertyInfos[key] = { name: key, type: "text" };
          }
        });
      }
    });
    return propertyInfos;
  }
  async fetchKnownProperties() {
    if (typeof this.app.metadataCache.getAllPropertyInfos === "function") {
      this.knownProperties = this.app.metadataCache.getAllPropertyInfos();
    } else {
      this.knownProperties = this.fetchCustomPropertyInfos();
    }
    this.knownProperties = Object.fromEntries(
      Object.entries(this.knownProperties).sort(([keyA], [keyB]) => keyA.localeCompare(keyB))
    );
    console.log(this.knownProperties);
  }
  // Helper zum Rendern EINER Eigenschaftszeile
  renderPropertyRow(containerEl, rule, index) {
    var _a, _b, _c, _d, _e, _f;
    const activeFile = this.app.workspace.getActiveFile();
    const rowEl = containerEl.createDiv({ cls: "property-setting-row setting-item" });
    const controlEl = rowEl.createDiv({ cls: "setting-item-control" });
    controlEl.style.gap = "0px";
    const leftContainer = controlEl.createDiv({ cls: "property-left-container" });
    const iconEl = leftContainer.createSpan({ cls: "property-icon setting-item-icon" });
    (0, import_obsidian5.setIcon)(iconEl, "hash");
    const searchContainer = leftContainer.createDiv({ cls: "property-search-container" });
    const nameInput = new import_obsidian5.TextComponent(searchContainer).setPlaceholder("Select property...").setValue(rule.property || "").onChange(async (value) => {
      this.renderSearchResults(searchContainer, value, index);
    });
    nameInput.inputEl.addEventListener("focus", () => {
      this.renderSearchResults(searchContainer, nameInput.getValue(), index);
    });
    nameInput.inputEl.addEventListener("input", () => {
      this.renderSearchResults(searchContainer, nameInput.getValue(), index);
    });
    nameInput.inputEl.addEventListener("blur", (event) => {
      setTimeout(() => {
        const relatedTarget = event.relatedTarget;
        const resultsEl = searchContainer.querySelector(".property-search-results");
        if (!resultsEl || !resultsEl.contains(relatedTarget)) {
          this.clearSearchResults(searchContainer);
        }
      }, 100);
    });
    const currentPropertyInfo = this.knownProperties[rule.property];
    if (currentPropertyInfo) {
      updatePropertyIcon(iconEl, currentPropertyInfo.type);
    } else if (rule.property) {
      (0, import_obsidian5.setIcon)(iconEl, "alert-circle");
    }
    const middleContainer = controlEl.createDiv({ cls: "property-middle-container" });
    const valueContainer = middleContainer.createDiv({ cls: "property-value-container" });
    if (activeFile) {
      this.app.fileManager.processFrontMatter(activeFile, (frontmatter) => {
        rule.value = executeRule(this.app, this.plugin.settings, activeFile, "", rule, frontmatter);
      }, { "mtime": activeFile.stat.mtime });
    }
    let previewComponent = this.renderValueInput(valueContainer, currentPropertyInfo, rule.value, index);
    const propertyDevDropdown = new import_obsidian5.DropdownComponent(middleContainer);
    propertyDevDropdown.selectEl.setAttribute("style", "width:35%");
    propertyDevDropdown.addOption("", "Select a content");
    for (let ruleFunction of ruleFunctions) {
      console.log(rule.type);
      if (ruleFunction.type.contains(rule.type)) {
        propertyDevDropdown.addOption(ruleFunction.id, ruleFunction.description);
      }
    }
    propertyDevDropdown.addOption("script", "JavaScript function (advanced)");
    propertyDevDropdown.setValue(rule.content);
    propertyDevDropdown.onChange(async (value) => {
      var _a2, _b2, _c2;
      if (value !== "") {
        if (value !== "script") {
          let oldOriginalCode = ((_a2 = getRuleFunctionById(rule.content)) == null ? void 0 : _a2.source) || ruleFunctions[0].source;
          if (rule.buildInCode !== "" && rule.buildInCode !== oldOriginalCode) {
            const shouldProceed = await new AlertModal(
              this.app,
              "Overwrite existing code?",
              "I sees like you have custom code for this rule! Should this be overwritten by default code for this parameter?",
              "Yes",
              "No"
            ).openAndGetValue();
            if (shouldProceed) {
              rule.buildInCode = ((_b2 = getRuleFunctionById(value)) == null ? void 0 : _b2.source) || ruleFunctions[0].source;
            } else {
              rule.buildInCode;
            }
            await this.plugin.saveSettings();
          } else {
            rule.buildInCode = ((_c2 = getRuleFunctionById(value)) == null ? void 0 : _c2.source) || ruleFunctions[0].source;
            await this.plugin.saveSettings();
          }
        } else {
        }
        rule.content = value;
        await this.plugin.saveSettings();
        this.updatePreview(activeFile, rule, previewComponent.inputEl);
      }
    });
    new import_obsidian5.ButtonComponent(middleContainer).setIcon("gear").setTooltip("open settings").setClass("property-icon-button").onClick(async () => {
      let settingsContainers = containerEl.getElementsByClassName("property-options-container");
      for (let container of settingsContainers) {
        if (container.getAttribute("id") !== rule.id)
          container.setAttribute("style", "display: none;");
      }
      optionEL.style.display = optionEL.style.display === "block" ? "none" : "block";
    });
    const deleteButtonContainer = controlEl.createDiv({ cls: "property-delete-button-container" });
    new import_obsidian5.ButtonComponent(deleteButtonContainer).setIcon("trash-2").setTooltip("remove this rule").setClass("mod-subtle").onClick(async () => {
      this.plugin.settings[this.settingsParameter].splice(index, 1);
      await this.plugin.saveSettings();
      this.display();
    });
    controlEl.style.display = "flex";
    controlEl.style.alignItems = "center";
    controlEl.style.justifyContent = "space-between";
    controlEl.style.width = "100%";
    leftContainer.style.display = "flex";
    leftContainer.style.alignItems = "center";
    leftContainer.style.minWidth = "150px";
    iconEl.style.marginRight = "8px";
    searchContainer.style.position = "relative";
    searchContainer.style.flexGrow = "1";
    valueContainer.style.flexGrow = "2";
    deleteButtonContainer.style.marginLeft = "auto";
    const optionEL = containerEl.createDiv({ cls: "property-options-container" });
    optionEL.id = rule.id;
    optionEL.style.display = "none";
    const removeContentButton = new import_obsidian5.Setting(optionEL).setName("Remove content").setDesc(`Before making changes you might consider to remove content generated by this rule`).addButton(
      (button) => {
        button.setWarning().setButtonText("Remove Content").setCta().onClick(() => {
          let count = this.plugin.removeFrontmatterParamsFromAllFiles(rule);
          button.removeCta();
          button.setDisabled(true);
          removeContentButton.setDesc(`Removed this rule from ${count.files} files.`);
        });
      }
    );
    new import_obsidian5.Setting(optionEL).setName("Rule active").setDesc("If enabled, the rule will be executed").addToggle(
      (toggle) => toggle.setValue(rule.active).onChange(async (value) => {
        rule.active = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian5.Setting(optionEL).setName("Modify only").setDesc("Only modify existing properties").addToggle((toggle) => toggle.setValue(rule.onlyModify).onChange(async (value) => {
      rule.onlyModify = value;
      await this.plugin.saveSettings();
      this.updatePreview(activeFile, rule, previewComponent.inputEl);
    }));
    if (rule.type === "text" || rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
      const ruleFunction = ruleFunctions.find((item) => item.id === rule.content);
      if (ruleFunction && ruleFunction.inputProperty !== void 0) {
        let inputPropertiesDropdown;
        new import_obsidian5.Setting(optionEL).setName("Input Property").setDesc("Select a property as input").addDropdown((dropdown) => {
          inputPropertiesDropdown = dropdown;
          dropdown.setValue(rule.addContent).onChange(async (value) => {
            if (value !== "") {
              rule.inputProperty = value;
              await this.plugin.saveSettings();
              this.updatePreview(activeFile, rule, previewComponent.inputEl);
            }
          });
        });
        Object.entries(this.knownProperties).forEach((item) => {
          inputPropertiesDropdown.addOption(item[1].name, item[1].name);
        });
        inputPropertiesDropdown.setValue(rule.inputProperty);
      }
      if (rule.type === "tags" || rule.type === "aliases") {
        new import_obsidian5.Setting(optionEL).setName("Prefix").setDesc('Optional prefix to add before the content (i.e. "prefix/")').addText((text) => text.setPlaceholder("no prefix").setValue(rule.prefix).onChange(async (value) => {
          rule.prefix = value;
          await this.plugin.saveSettings();
          this.updatePreview(activeFile, rule, previewComponent.inputEl);
        }));
      }
      new import_obsidian5.Setting(optionEL).setName("Space replacement").setDesc('Character to replace spaces in folder names (suggested: "_")').addText((text) => text.setPlaceholder("no replacement").setValue(rule.spaceReplacement).onChange(async (value) => {
        rule.spaceReplacement = value;
        await this.plugin.saveSettings();
        this.updatePreview(activeFile, rule, previewComponent.inputEl);
      }));
      new import_obsidian5.Setting(optionEL).setName("Special character replacement").setDesc('Character to replace special characters (suggested: "-") - preserves letters with diacritics').addText((text) => text.setPlaceholder("no replacement").setValue(rule.specialCharReplacement).onChange(async (value) => {
        rule.specialCharReplacement = value;
        await this.plugin.saveSettings();
        this.updatePreview(activeFile, rule, previewComponent.inputEl);
      }));
      new import_obsidian5.Setting(optionEL).setName("Convert to lowercase").setDesc("Convert values to lowercase").addToggle((toggle) => toggle.setValue(rule.lowercaseTags).onChange(async (value) => {
        rule.lowercaseTags = value;
        await this.plugin.saveSettings();
        this.updatePreview(activeFile, rule, previewComponent.inputEl);
      }));
      new import_obsidian5.Setting(optionEL).setName("Result as Link").setDesc("Format Result as Link").addToggle(
        (toggle) => toggle.setValue(rule.asLink).onChange(async (value) => {
          rule.asLink = value;
          await this.plugin.saveSettings();
          this.updatePreview(activeFile, rule, previewComponent.inputEl);
        })
      );
    }
    if (rule.type === "text" || rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
      new import_obsidian5.Setting(optionEL).setName("Add content").setDesc("select how the content should be stored").addDropdown(
        (dropdown) => dropdown.addOption("overwrite", "replace content").addOption("start", "place on start").addOption("end", "place on end").setValue(rule.addContent).onChange(async (value) => {
          if (value !== "") {
            rule.addContent = value === "overwrite" ? "overwrite" : value === "start" ? "start" : "end";
            await this.plugin.saveSettings();
            this.updatePreview(activeFile, rule, previewComponent.inputEl);
          }
        })
      );
    }
    const excludeEL = new import_obsidian5.Setting(optionEL).setName("Exclude Files and Folders from this rule").setDesc(`Currently ${((_a = rule.exclude) == null ? void 0 : _a.selectedFolders.length) || 0} folders and ${((_b = rule.exclude) == null ? void 0 : _b.selectedFiles.length) || 0} files will be ${((_c = rule.exclude) == null ? void 0 : _c.mode) || "exclude"}d.`).addButton((button) => {
      button.setIcon("folder-x").setButtonText("Exclude").setCta().onClick(() => {
        var _a2, _b2, _c2;
        openDirectorySelectionModal(
          this.app,
          ((_a2 = rule.exclude) == null ? void 0 : _a2.selectedFolders) || [],
          ((_b2 = rule.exclude) == null ? void 0 : _b2.selectedFiles) || [],
          "exclude",
          ((_c2 = rule.exclude) == null ? void 0 : _c2.display) || "folders",
          false,
          // include, exclude option hidden
          (result) => {
            var _a3, _b3, _c3;
            if (!result)
              return;
            if (!rule.exclude) {
              rule.exclude = Object.assign({}, DEFAULT_FILTER_FILES_AND_FOLDERS, {
                mode: "exclude"
              });
            }
            ;
            rule.exclude.selectedFolders = result.folders;
            rule.exclude.selectedFiles = result.files;
            rule.exclude.display = result.display;
            this.plugin.saveSettings();
            excludeEL.setDesc(`Currently ${((_a3 = rule.exclude) == null ? void 0 : _a3.selectedFolders.length) || 0} folders and ${((_b3 = rule.exclude) == null ? void 0 : _b3.selectedFiles.length) || 0} files will be ${((_c3 = rule.exclude) == null ? void 0 : _c3.mode) || "exclude"}d.`);
          }
        );
      });
    });
    const includeEL = new import_obsidian5.Setting(optionEL).setName("Include Files and Folders for this rule ").setDesc(`Currently ${((_d = rule.include) == null ? void 0 : _d.selectedFolders.length) || 0} folders and ${((_e = rule.include) == null ? void 0 : _e.selectedFiles.length) || 0} files will be ${((_f = rule.include) == null ? void 0 : _f.mode) || "include"}d even when in excluded Folders.`).addButton((button) => {
      button.setIcon("folder-check").setButtonText("Include").setCta().onClick(() => {
        var _a2, _b2, _c2;
        openDirectorySelectionModal(
          this.app,
          ((_a2 = rule.include) == null ? void 0 : _a2.selectedFolders) || [],
          ((_b2 = rule.include) == null ? void 0 : _b2.selectedFiles) || [],
          "include",
          ((_c2 = rule.include) == null ? void 0 : _c2.display) || "folders",
          false,
          // include, include option hidden
          (result) => {
            var _a3, _b3, _c3;
            if (!result)
              return;
            if (!rule.include) {
              rule.include = Object.assign({}, DEFAULT_FILTER_FILES_AND_FOLDERS, {
                mode: "include"
              });
            }
            ;
            rule.include.selectedFolders = result.folders;
            rule.include.selectedFiles = result.files;
            rule.include.display = result.display;
            this.plugin.saveSettings();
            includeEL.setDesc(`Currently ${((_a3 = rule.include) == null ? void 0 : _a3.selectedFolders.length) || 0} folders and ${((_b3 = rule.include) == null ? void 0 : _b3.selectedFiles.length) || 0} files will be ${((_c3 = rule.include) == null ? void 0 : _c3.mode) || "include"}d even when in excluded Folders.`);
          }
        );
      });
    });
    new import_obsidian5.Setting(optionEL).setName("Script").setDesc("edit the script for own modifications").addButton(
      (button) => button.setButtonText("JS Editor").onClick(() => {
        var _a2, _b2;
        openCodeEditorModal(
          this.app,
          this.plugin,
          rule.content === "script" ? rule.jsCode : rule.buildInCode,
          ((_a2 = rule.typeProperty) == null ? void 0 : _a2.type) || "text",
          activeFile,
          activeFile ? ((_b2 = this.app.metadataCache.getFileCache(activeFile)) == null ? void 0 : _b2.frontmatter) || {} : {},
          (result) => {
            if (!result)
              return;
            if (rule.content === "script") {
              rule.jsCode = result.code;
            } else {
              rule.buildInCode = result.code;
            }
            this.plugin.saveSettings();
          }
        );
      })
    );
  }
  renderSearchResults(searchContainerEl, searchTerm, rowIndex) {
    this.clearSearchResults(searchContainerEl);
    const filteredProperties = Object.entries(this.knownProperties).filter(([name]) => name.toLowerCase().includes(searchTerm.toLowerCase()));
    if (filteredProperties.length === 0 && searchTerm) {
      return;
    }
    if (filteredProperties.length === 0 && !searchTerm) {
      return;
    }
    const resultsEl = searchContainerEl.createDiv({ cls: "property-search-results menu" });
    resultsEl.style.position = "absolute";
    resultsEl.style.top = "100%";
    resultsEl.style.left = "0";
    resultsEl.style.width = "calc(100% + 100px)";
    resultsEl.style.zIndex = "10";
    resultsEl.style.maxHeight = "200px";
    resultsEl.style.overflowY = "auto";
    let activeIndex = -1;
    const updateActiveItem = (newIndex) => {
      const items = resultsEl.querySelectorAll(".menu-item");
      items.forEach((item, index) => {
        if (index === newIndex) {
          item.addClass("property-search-is-active");
          item.scrollIntoView({ block: "nearest" });
        } else {
          item.removeClass("property-search-is-active");
        }
      });
      activeIndex = newIndex;
    };
    const selectActiveItem = async () => {
      if (activeIndex >= 0 && activeIndex < filteredProperties.length) {
        const [name, info] = filteredProperties[activeIndex];
        this.plugin.settings[this.settingsParameter][rowIndex].property = name;
        this.plugin.settings[this.settingsParameter][rowIndex].type = info.type;
        this.plugin.settings[this.settingsParameter][rowIndex].value = void 0;
        await this.plugin.saveSettings();
        this.clearSearchResults(searchContainerEl);
        this.display();
      }
    };
    filteredProperties.forEach(([name, info], index) => {
      const itemEl = resultsEl.createDiv({ cls: "menu-item" });
      const itemIcon = itemEl.createSpan({ cls: "menu-item-icon" });
      updatePropertyIcon(itemIcon, info.type);
      itemEl.createSpan({ text: name });
      itemEl.addEventListener("mousedown", async (e) => {
        e.preventDefault();
        activeIndex = index;
        await selectActiveItem();
      });
    });
    searchContainerEl.addEventListener("keydown", async (e) => {
      const items = resultsEl.querySelectorAll(".menu-item");
      if (e.key === "ArrowDown") {
        e.preventDefault();
        updateActiveItem((activeIndex + 1) % items.length);
      } else if (e.key === "ArrowUp") {
        e.preventDefault();
        updateActiveItem((activeIndex - 1 + items.length) % items.length);
      } else if (e.key === "Enter") {
        e.preventDefault();
        await selectActiveItem();
      }
    });
  }
  clearSearchResults(searchContainerEl) {
    const resultsEl = searchContainerEl.querySelector(".property-search-results");
    if (resultsEl) {
      resultsEl.remove();
    }
  }
  renderValueInput(containerEl, propertyInfo, currentValue, index) {
    let returnComponent;
    containerEl.empty();
    if (!propertyInfo) {
      containerEl.setText("");
      containerEl.addClass("text-muted");
      return;
    }
    const type = propertyInfo.type;
    switch (type) {
      case "number":
        returnComponent = new import_obsidian5.TextComponent(containerEl).setPlaceholder("Numeric Value").setValue(currentValue !== void 0 && currentValue !== null ? String(currentValue) : "").onChange(async (value) => {
          const numValue = value === "" ? void 0 : parseFloat(value);
          this.plugin.settings[this.settingsParameter][index].value = isNaN(numValue) ? void 0 : numValue;
          await this.plugin.saveSettings();
        });
        returnComponent.inputEl.type = "number";
        break;
      case "checkbox":
        returnComponent = containerEl.createDiv({ cls: "tri-state-checkbox clickable-icon" });
        returnComponent.setAttribute("aria-label", "Checkbox change state");
        returnComponent.setAttribute("role", "checkbox");
        const updateCheckboxVisual = (state) => {
          let iconName;
          let ariaState;
          if (state === true) {
            iconName = "check-square";
            ariaState = "true";
          } else if (state === false) {
            iconName = "square";
            ariaState = "false";
          } else {
            iconName = "minus-square";
            ariaState = "mixed";
          }
          (0, import_obsidian5.setIcon)(returnComponent, iconName);
          returnComponent.setAttribute("aria-checked", ariaState);
          returnComponent.dataset.state = String(state);
        };
        updateCheckboxVisual(currentValue);
        returnComponent.addEventListener("click", async () => {
          let currentState = returnComponent.dataset.state;
          let nextState;
          if (currentState === "false") {
            nextState = true;
          } else if (currentState === "true") {
            nextState = void 0;
          } else {
            nextState = false;
          }
          this.plugin.settings[this.settingsParameter][index].value = nextState;
          await this.plugin.saveSettings();
          updateCheckboxVisual(nextState);
        });
        break;
      case "date":
        returnComponent = new import_obsidian5.TextComponent(containerEl).setPlaceholder("YYYY-MM-DD").setValue(currentValue || "").onChange(async (value) => {
          this.plugin.settings[this.settingsParameter][index].value = value || void 0;
          await this.plugin.saveSettings();
        });
        returnComponent.inputEl.type = "date";
        break;
      case "datetime":
        returnComponent = new import_obsidian5.TextComponent(containerEl).setPlaceholder("YYYY-MM-DDTHH:mm").setValue(currentValue || "").onChange(async (value) => {
          this.plugin.settings[this.settingsParameter][index].value = value || void 0;
          await this.plugin.saveSettings();
        });
        returnComponent.inputEl.type = "datetime-local";
        break;
      case "aliases":
      case "tags":
      case "multitext":
        returnComponent = new import_obsidian5.TextComponent(containerEl).setPlaceholder("values (divided by comma)").setValue(Array.isArray(currentValue) ? currentValue.join(", ") : currentValue || "").onChange(async (value) => {
          const arrayValue = value.split(",").map((s) => s.trim()).filter((s) => s);
          this.plugin.settings[this.settingsParameter][index].value = arrayValue.length > 0 ? arrayValue : void 0;
          await this.plugin.saveSettings();
        });
        break;
      case "text":
      default:
        returnComponent = new import_obsidian5.TextComponent(containerEl).setPlaceholder("value").setValue(currentValue || "").onChange(async (value) => {
          this.plugin.settings[this.settingsParameter][index].value = value || void 0;
          await this.plugin.saveSettings();
        });
        break;
    }
    if (type !== "checkbox") {
      returnComponent.inputEl.style.backgroundColor = "transparent";
      returnComponent.inputEl.style.width = "100%";
      returnComponent.inputEl.style.border = "none";
    }
    return returnComponent;
  }
  async updatePreview(activeFile, rule, componentEl) {
    if (activeFile) {
      let ruleResult;
      await this.app.fileManager.processFrontMatter(activeFile, (frontmatter) => {
        ruleResult = executeRule(this.app, this.plugin.settings, activeFile, "", rule, frontmatter);
      }, { "mtime": activeFile.stat.mtime });
      switch (typeof ruleResult) {
        case "object":
          if (Array.isArray(ruleResult))
            componentEl.value = ruleResult.toString();
          break;
        default:
          componentEl.value = ruleResult;
          break;
      }
    }
  }
  async display() {
    const containerEl = this.container;
    containerEl.empty();
    await this.fetchKnownProperties();
    const propertiesListEl = containerEl.createDiv("properties-list");
    this.plugin.settings.rules.forEach((propConfig, index) => {
      this.renderPropertyRow(propertiesListEl, propConfig, index);
    });
    const addBtnContainer = containerEl.createDiv({ cls: "setting-item-control" });
    addBtnContainer.style.justifyContent = "right";
    new import_obsidian5.ButtonComponent(addBtnContainer).setButtonText("Eigenschaft hinzuf\xFCgen").setIcon("plus-circle").setCta().onClick(async () => {
      const defaultName = "";
      this.plugin.settings[this.settingsParameter].push(Object.assign({}, DEFAULT_RULE_DEFINITION, {
        id: (0, import_crypto.randomUUID)().toString()
      }));
      await this.plugin.saveSettings();
      this.display();
    }).buttonEl.className = "property-plus-button";
  }
};
function updatePropertyIcon(iconEl, type) {
  let iconName = "hash";
  switch (type) {
    case "text":
      iconName = "align-left";
      break;
    case "number":
      iconName = "binary";
      break;
    case "multitext":
      iconName = "list";
      break;
    case "date":
      iconName = "calendar";
      break;
    case "datetime":
      iconName = "clock";
      break;
    case "checkbox":
      iconName = "check-square";
      break;
    case "tags":
      iconName = "tags";
      break;
    case "aliases":
      iconName = "forward";
      break;
    default:
      iconName = "help-circle";
  }
  (0, import_obsidian5.setIcon)(iconEl, iconName);
}

// src/settings.ts
var FolderTagSettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.scriptingTools = new ScriptingTools(this.plugin.settings);
  }
  hide() {
    this.plugin.settings.liveRules = [];
    this.plugin.settings.rules.forEach((rule) => {
      let ruleFunction = getRuleFunctionById(rule.content);
      if (!ruleFunction)
        return;
      if (ruleFunction.inputProperty) {
        this.plugin.settings.liveRules.push(rule);
      }
    });
    this.plugin.saveSettings();
  }
  display() {
    this.knownProperties = getPropertiesFromMetadataManager(this.app);
    this.knownTypes = getTypesFromMetadataManager(this.app);
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: `Front matter automate V${versionString}` });
    new import_obsidian6.Setting(containerEl).setName("Exclude Files and Folders").setDesc(`Currently ${this.plugin.settings.exclude.selectedFolders.length} folders and ${this.plugin.settings.exclude.selectedFiles.length} files will be ${this.plugin.settings.exclude.mode}d.`).addButton((button) => {
      button.setIcon("folder-x").setButtonText("Exclude").setCta().onClick(() => {
        openDirectorySelectionModal(
          this.app,
          this.plugin.settings.exclude.selectedFolders || [],
          this.plugin.settings.exclude.selectedFiles || [],
          this.plugin.settings.exclude.mode || "exclude",
          this.plugin.settings.exclude.display || "folders",
          false,
          // include, exclude option hidden
          (result) => {
            if (!result)
              return;
            this.plugin.settings.exclude.selectedFolders = result.folders;
            this.plugin.settings.exclude.selectedFiles = result.files;
            this.plugin.settings.exclude.mode = result.mode;
            this.plugin.settings.exclude.display = result.display;
            this.plugin.saveSettings();
            this.display();
          }
        );
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Include Files and Folders").setDesc(`Currently ${this.plugin.settings.include.selectedFolders.length} folders and ${this.plugin.settings.include.selectedFiles.length} files will be ${this.plugin.settings.include.mode}d even when in excluded Folders.`).addButton((button) => {
      button.setIcon("folder-check").setButtonText("Include").setCta().onClick(() => {
        openDirectorySelectionModal(
          this.app,
          this.plugin.settings.include.selectedFolders || [],
          this.plugin.settings.include.selectedFiles || [],
          this.plugin.settings.include.mode || "include",
          this.plugin.settings.include.display || "folders",
          false,
          // include, include option hidden
          (result) => {
            if (!result)
              return;
            this.plugin.settings.include.selectedFolders = result.folders;
            this.plugin.settings.include.selectedFiles = result.files;
            this.plugin.settings.include.mode = result.mode;
            this.plugin.settings.include.display = result.display;
            this.plugin.saveSettings();
            this.display();
          }
        );
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Rules").setDesc("add rules to update selected parameters");
    this.rulesContainer = containerEl.createDiv("properties-list");
    const rulesTable = new RulesTable(this.app, this.plugin, this.rulesContainer, "rules");
    rulesTable.display();
  }
  addRule(divEl, ruleUUID = "") {
    if (ruleUUID === "") {
      ruleUUID = (0, import_crypto2.randomUUID)().toString();
      this.plugin.settings.rules.push(Object.assign({}, DEFAULT_RULE_DEFINITION, {
        id: ruleUUID
      }));
    }
    const rule = this.plugin.settings.rules.find((rule2) => rule2.id === ruleUUID);
    if (!rule)
      return;
    let propertyNameInput;
    let showFunctionButton;
    let propertyTypeDropdown;
    let propertyDevDropdown;
    let functionResultTextComponent;
    let functionTestButton;
    const rulesDiv = divEl.createDiv({ cls: "obsidian-f2t-ruleLine" });
    rulesDiv.setAttribute("id", ruleUUID);
    const ruleOptionsDiv = divEl.createDiv({ cls: "obsidian-f2t-ruleOptions" });
    ruleOptionsDiv.style.height = "350px;";
    ruleOptionsDiv.style.alignItems = "flex-end";
    function showJsFunctionButton(ruleId) {
      var _a;
      const showCodeButton = ((_a = getRuleFunctionById(ruleId)) == null ? void 0 : _a.source) !== "" || ruleId === "script";
      if (showCodeButton) {
        if (showFunctionButton)
          showFunctionButton.buttonEl.style.display = "block";
        if (propertyDevDropdown)
          propertyDevDropdown.selectEl.style.width = "360px";
      } else {
        if (showFunctionButton)
          showFunctionButton.buttonEl.style.display = "none";
        if (propertyDevDropdown)
          propertyDevDropdown.selectEl.style.width = "400px";
      }
    }
    const ruleSettings = new import_obsidian6.Setting(rulesDiv).addButton((button) => {
      button.buttonEl.setAttribute("style", "width:150px; justify-content: left; ");
      button.setButtonText(rule.property || "Select Parameter");
      button.onClick(() => {
        new SelectProperty(this.app, this.knownProperties, rule.typeProperty, (result) => {
          if (result.name !== "") {
            rule.typeProperty = result;
            rule.property = result.name;
            rule.type = result.type;
            if (this.knownProperties.filter((property) => property.name.toLowerCase().includes(rule.property.toLowerCase())).length === 0) {
            }
            ;
            button.setButtonText(result.name);
            this.plugin.saveSettings();
          }
          propertyTypeDropdown.setValue(result.type);
        }).open();
      });
    }).addDropdown((dropdown) => {
      propertyTypeDropdown = dropdown;
      dropdown.selectEl.setAttribute("style", "width:110px");
      dropdown.addOption("", "Select a type");
      dropdown.addOption("aliases", "Aliases");
      dropdown.addOption("checkbox", "Checkbox");
      dropdown.addOption("date", "Date");
      dropdown.addOption("datetime", "Date & Time");
      dropdown.addOption("multitext", "List");
      dropdown.addOption("number", "Number");
      dropdown.addOption("tags", "Tags");
      dropdown.addOption("text", "Text");
      if (rule.type)
        dropdown.setValue(rule.type);
      dropdown.onChange(async (value) => {
        if (value !== "") {
          rule.type = value;
          await this.plugin.saveSettings();
        }
      });
    }).addDropdown((dropdown) => {
      propertyDevDropdown = dropdown;
      dropdown.selectEl.setAttribute("style", "width:400px");
      dropdown.addOption("", "Select a content");
      for (let rule2 of ruleFunctions) {
        dropdown.addOption(rule2.id, rule2.description);
      }
      dropdown.addOption("script", "JavaScript script");
      dropdown.setValue(rule.content);
      dropdown.onChange(async (value) => {
        var _a, _b, _c;
        let jsCode = "";
        if (value !== "") {
          if (value !== "script") {
            let oldOriginalCode = ((_a = getRuleFunctionById(rule.content)) == null ? void 0 : _a.source) || ruleFunctions[0].source;
            if (rule.buildInCode !== "" && rule.buildInCode !== oldOriginalCode) {
              const shouldProceed = await new AlertModal(
                this.app,
                "Overwrite existing code?",
                "I sees like you have custom code for this rule! Should this be overwritten by default code for this parameter?",
                "Yes",
                "No"
              ).openAndGetValue();
              if (shouldProceed) {
                jsCode = rule.buildInCode = ((_b = getRuleFunctionById(value)) == null ? void 0 : _b.source) || ruleFunctions[0].source;
              } else {
                jsCode = rule.buildInCode;
              }
            } else {
              jsCode = rule.buildInCode = ((_c = getRuleFunctionById(value)) == null ? void 0 : _c.source) || ruleFunctions[0].source;
            }
          } else {
          }
          rule.content = value;
          showJsFunctionButton(rule.content);
          await this.plugin.saveSettings();
        }
      });
      ruleOptionsDiv.style.display = `${rule.content === "script" && rule.showContent ? "flex" : "none"}`;
    }).addButton(async (button) => {
      showFunctionButton = button;
      button.buttonEl.setAttribute("style", "width:30px");
      button.setIcon("square-function");
      button.setClass("obsidian-f2t-smallButton");
      button.setTooltip("show & edit code");
      button.onClick(async () => {
        rule.showContent = !rule.showContent;
        ruleOptionsDiv.style.display = `${rule.showContent ? "flex" : "none"}`;
      });
      showFunctionButton.buttonEl.style.display = "none";
    }).addButton(async (button) => {
      button.buttonEl.setAttribute("style", "width:30px");
      button.setIcon("square-minus");
      button.setClass("obsidian-f2t-smallButton");
      button.setTooltip("remove this rule");
      button.onClick(async () => {
        this.plugin.settings.rules.splice(this.plugin.settings.rules.findIndex((value) => value.id === ruleUUID));
        this.removeRule(rulesDiv);
        await this.plugin.saveSettings();
      });
    });
    showJsFunctionButton(rule.content);
    divEl.style.removeProperty("border-top");
  }
  removeRule(rulesDiv) {
    rulesDiv.remove();
  }
};

// main.ts
var FolderTagPlugin = class extends import_obsidian7.Plugin {
  //private oldFolderPaths = new Map<string, string | null>();
  async onload() {
    await this.loadSettings();
    this.tools = new ScriptingTools(this.settings);
    let noticeMessage = `Front Matter Automate ${versionString}
 loading ...`;
    const loadingNotice = new import_obsidian7.Notice(noticeMessage, 0);
    noticeMessage = noticeMessage + "\n register events ...";
    loadingNotice.setMessage(noticeMessage);
    this.registerEvent(
      this.app.vault.on("create", (file) => {
        if (file instanceof import_obsidian7.TFile && file.extension === "md") {
          this.updateFrontmatterParameters("create", file, this.settings.rules);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", (file, oldPath) => {
        if (file instanceof import_obsidian7.TFile && file.extension === "md") {
          this.updateFrontmatterParameters("rename", file, this.settings.rules, oldPath);
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", (leaf) => {
        if ((leaf == null ? void 0 : leaf.view) instanceof import_obsidian7.MarkdownView) {
          const activeFile = this.app.workspace.getActiveFile();
          console.log(`closing file: `, activeFile == null ? void 0 : activeFile.path);
          if (activeFile)
            this.updateFrontmatterParameters("active-leaf-change", activeFile, this.settings.rules);
        }
      })
    );
    this.registerEvent(
      this.app.metadataCache.on("changed", (file, data, cache) => {
        if (cache.frontmatter && Array.isArray(this.settings.liveRules)) {
          this.app.fileManager.processFrontMatter(file, (frontmatter) => {
            this.settings.liveRules.forEach((rule) => {
              if (rule.onlyModify && !frontmatter.hasOwnProperty(rule.property))
                return;
              if (cache.frontmatter)
                frontmatter[rule.property] = executeRule(this.app, this.settings, file, cache.frontmatter[rule.property], rule, cache.frontmatter);
              console.log(frontmatter[rule.property]);
            });
          }, { "mtime": file.stat.mtime });
        }
        ;
      })
    );
    noticeMessage = noticeMessage + "\n initial processing ...";
    loadingNotice.setMessage(noticeMessage);
    noticeMessage = noticeMessage + "\ndone!";
    loadingNotice.setMessage(noticeMessage);
    setTimeout(() => {
      loadingNotice.hide();
    }, 2e3);
    this.addSettingTab(new FolderTagSettingTab(this.app, this));
  }
  async loadSettings() {
    let data = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  formatTagName(name) {
    if (name === null)
      return null;
    if (name === void 0)
      return void 0;
    let formatted = name.replace(/\s+/g, this.settings.spaceReplacement);
    formatted = formatted.replace(/[^a-zA-Z0-9\-_\/äöüßÄÖÜáéíóúýÁÉÍÓÚÝàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛãñõÃÑÕ]/g, this.settings.specialCharReplacement);
    if (this.settings.lowercaseTags) {
      formatted = formatted.toLowerCase();
    }
    return formatted;
  }
  /**
   * Filters a given file and returns true if it is included in a folder or file list
   * @param file 
   * @param filterMode 'exclude'|'include'
   * @param type 'folders'|'files'
   * @returns 
   */
  filterFile(file, filterMode, type) {
    let result = false;
    const filterArray = type === "folders" ? this.settings[filterMode].selectedFolders : this.settings[filterMode].selectedFiles;
    if (filterArray.length === 0)
      return filterMode === "include" ? false : true;
    const filePath = file.path;
    const fileFolder = this.tools.getFoldersFromPath(file.path);
    const fileName = file.basename + "." + file.extension;
    if (type === "files") {
      result = filterArray.includes(filePath);
    }
    if (type === "folders") {
      filterArray.forEach((path) => {
        result = (fileFolder == null ? void 0 : fileFolder.startsWith(path.slice(1))) || false;
        if (result === true)
          return;
      });
    }
    ;
    return filterMode === "exclude" ? !result : result;
  }
  checkIfFileAllowed(file) {
    let result = false;
    if (this.settings.include.selectedFiles.length > 0) {
      result = this.filterFile(file, "include", "files");
      if (result === true)
        return result;
    }
    if (this.settings.include.selectedFolders.length > 0) {
      result = this.filterFile(file, "include", "folders");
      if (result === true)
        return result;
    }
    result = true;
    if (this.settings.exclude.selectedFiles.length > 0) {
      result = this.filterFile(file, "exclude", "files");
      if (result === false)
        return result;
    }
    if (this.settings.exclude.selectedFolders.length > 0) {
      result = this.filterFile(file, "exclude", "folders");
      if (result === false)
        return result;
    }
    return result;
  }
  formatValue(value, type) {
    switch (type) {
      case "text":
      case "tags":
      case "aliases":
      case "multitext":
        return this.tools.toYamlSafeString(value);
      case "date":
      case "datetime":
        if (typeof value === "number") {
          return new Date(value).toISOString();
        }
        return value.toString();
      case "checkbox":
        return value ? "true" : "false";
      case "number":
        return Number(value);
      default:
        return this.tools.toYamlSafeString(value);
    }
  }
  async updateFrontmatterParameters(eventName, file, rules, oldPath) {
    if (!this.checkIfFileAllowed(file)) {
      console.log(`file ${file.path} rejected!`);
      return;
    }
    const currentPathTag = this.formatTagName(this.tools.getFoldersFromPath(file.path));
    const oldPathTag = this.formatTagName(this.tools.getFoldersFromPath(oldPath));
    if (oldPathTag)
      console.log(`update file: "${oldPathTag}" to "${currentPathTag}"`);
    let content = await this.app.vault.read(file);
    const cache = this.app.metadataCache.getFileCache(file);
    this.app.fileManager.processFrontMatter(file, (frontmatter) => {
      rules.forEach((rule) => {
        if (rule.onlyModify && !frontmatter.hasOwnProperty(rule.property))
          return;
        frontmatter[rule.property] = executeRule(this.app, this.settings, file, frontmatter[rule.property], rule, frontmatter, oldPath);
      });
    }, { "mtime": file.stat.mtime });
  }
  async removeFrontmatterParamsFromAllFiles(rule) {
    let count = { files: 0, items: 0 };
    this.app.vault.getMarkdownFiles().forEach((file) => {
      count.files++;
      this.removeFrontmatterParameter(file, rule, count);
    });
    return count;
  }
  async removeFrontmatterParameter(file, rule, count) {
    if (!this.checkIfFileAllowed(file))
      return;
    const currentPathTag = this.formatTagName(this.tools.getFoldersFromPath(file.path));
    let content = await this.app.vault.read(file);
    this.app.fileManager.processFrontMatter(file, (frontmatter) => {
      if (Array.isArray(frontmatter[rule.property]))
        count.items += frontmatter[rule.property].length;
      frontmatter[rule.property] = removeRule(this.app, this.settings, file, frontmatter[rule.property], rule, frontmatter);
      if (Array.isArray(frontmatter[rule.property]))
        count.items -= frontmatter[rule.property].length;
    }, { "mtime": file.stat.mtime });
    return count;
  }
};
//# sourceMappingURL=data:application/json;base64,
