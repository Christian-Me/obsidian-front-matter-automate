/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FolderTagPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/settings.ts
var import_obsidian4 = require("obsidian");

// src/frontmatter-tools.ts
var import_obsidian = require("obsidian");
function getPropertiesFromMetadataManager(app) {
  try {
    const metadataManager = app.metadataTypeManager;
    console.log("get properties:", metadataManager);
    return Object.values(metadataManager.properties).map((value) => ({
      name: value.name,
      type: value.type,
      count: value.count,
      source: "registered"
    })).sort((a, b) => a.name.localeCompare(b.name));
  } catch (e) {
    console.error("Couldn't access properties from Metadata Manager", e);
    return [];
  }
}
function getTypesFromMetadataManager(app) {
  try {
    const metadataManager = app.metadataTypeManager;
    console.log("get types:", metadataManager);
    return Object.values(metadataManager.registeredTypeWidgets).map((value, index, array) => ({
      type: value.type,
      icon: value.icon,
      jsType: ""
    })).sort((a, b) => a.type.localeCompare(b.type));
  } catch (e) {
    console.error("Couldn't access properties from Metadata Manager", e);
    return [];
  }
}
var SelectProperty = class extends import_obsidian.SuggestModal {
  constructor(app, knownProperties, property, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.property = property;
    this.typedText = "";
    this.newTextFlag = true;
    this.knownProperties = knownProperties;
  }
  // Returns all available suggestions.
  getSuggestions(query) {
    const result = this.knownProperties.filter((property) => property.name.toLowerCase().includes(query.toLowerCase()));
    this.newTextFlag = result.length === 0;
    this.typedText = query;
    return result;
  }
  onOpen() {
    if (this.property) {
      this.setPlaceholder(this.property.name);
    } else {
      this.setPlaceholder("no property selected!");
    }
    this.setTitle("Select or type a property name");
  }
  // Renders each suggestion item.
  renderSuggestion(property, el) {
    el.createEl("div", { text: property.name });
    el.createEl("small", { text: property.type });
  }
  onClose() {
    if (this.newTextFlag && this.property) {
      this.property.name = this.typedText;
      this.property.type = "text";
      this.onSubmit(this.property);
    }
  }
  // Perform action on the selected suggestion.
  onChooseSuggestion(property, evt) {
    if (evt instanceof KeyboardEvent) {
      console.log(`keyboard ${this.typedText} ${this.newTextFlag}`, property);
    }
    console.log("onChooseSuggestion", evt);
    this.onSubmit(property);
  }
};

// src/tools.ts
function parseJSCode(jsCode) {
  function parseFunction(jsCode2) {
    try {
      jsCode2 = cleanCodeString(jsCode2);
      var funcReg = /function *\(([^()]*)\)[ \n\t]*{(.*)}/gmi;
      var match = funcReg.exec(jsCode2.replace(/\n/g, " "));
      if (!match)
        return void 0;
      var args = match[1].split(",");
      args.push(match[2]);
      return new Function(...args);
    } catch (error) {
      console.error("error parsing JS function!", error);
      return error.message;
    }
  }
  ;
  return parseFunction(jsCode);
}
function cleanCodeString(codeString) {
  if (typeof codeString !== "string") {
    throw new TypeError("Input must be a string.");
  }
  let inMultiLineComment = false;
  let inSingleLineComment = false;
  let inString = null;
  let inRegExp = false;
  let cleanedCode = "";
  let i = 0;
  while (i < codeString.length) {
    const char = codeString[i];
    const nextChar = codeString[i + 1];
    if (inMultiLineComment) {
      if (char === "*" && nextChar === "/") {
        inMultiLineComment = false;
        i += 2;
        continue;
      } else {
        i++;
        continue;
      }
    }
    if (inSingleLineComment) {
      if (char === "\n" || char === "\r") {
        inSingleLineComment = false;
        cleanedCode += char;
        i++;
        continue;
      } else {
        i++;
        continue;
      }
    }
    if (inString) {
      if (char === inString) {
        inString = null;
      } else if (char === "\\") {
        cleanedCode += char;
        i++;
        if (i < codeString.length) {
          cleanedCode += codeString[i];
        }
        i++;
        continue;
      }
      cleanedCode += char;
      i++;
      continue;
    }
    if (inRegExp) {
      if (char === "/") {
        inRegExp = false;
      } else if (char === "\\") {
        cleanedCode += char;
        i++;
        if (i < codeString.length) {
          cleanedCode += codeString[i];
        }
        i++;
        continue;
      }
      cleanedCode += char;
      i++;
      continue;
    }
    if (char === "/" && nextChar === "*") {
      inMultiLineComment = true;
      i += 2;
      continue;
    }
    if (char === "/" && nextChar === "/") {
      inSingleLineComment = true;
      i += 2;
      continue;
    }
    if (char === '"' || char === "'") {
      inString = char;
      cleanedCode += char;
      i++;
      continue;
    }
    if (char === "/") {
      const prevMeaningfulChar = cleanedCode.trim().slice(-1);
      if (prevMeaningfulChar === "" || ["(", ",", "=", ":", "[", "!", "&", "|", "?", "{", ";", "\n", "\r"].includes(prevMeaningfulChar)) {
        inRegExp = true;
        cleanedCode += char;
        i++;
        continue;
      }
    }
    cleanedCode += char;
    i++;
  }
  return cleanedCode;
}
var ScriptingTools = class {
  constructor(settings) {
    this.settings = settings;
  }
  /**
   * Check if a string complies with ISO Standard
   * 
   * @param str Any string
   * @param options Options to look for
   * @returns 
   */
  isISOString(str, options = {}) {
    const {
      withMilliseconds = false,
      withTimezone = false,
      withTime = true,
      withDate = true
    } = options;
    let dateRegexStr = "^(?:\\d{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12]\\d|3[01]))";
    let timeRegexStr = "(?:T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";
    if (withMilliseconds) {
      timeRegexStr += "\\.\\d{3}";
    }
    if (withTimezone) {
      timeRegexStr += "(?:Z|[+-](?:[01]\\d|2[0-3]):[0-5]\\d)?)?";
    } else {
      timeRegexStr += ")?";
    }
    let regexStr = "";
    if (withDate && withTime) {
      regexStr = `${dateRegexStr}${timeRegexStr}$`;
    } else if (withDate) {
      regexStr = `${dateRegexStr}$`;
    } else if (withTime) {
      regexStr = `^${timeRegexStr.slice(4)}$`;
    } else {
      return false;
    }
    const regex = new RegExp(regexStr);
    return regex.test(str);
  }
  /**
   * Try to convert Any Types to a specific Type
   * @param input 
   * @param typeString 'string' | 'number' | 'boolean' | 'string[]'
   * @returns 
   */
  tryConvert(input, typeString) {
    switch (typeString) {
      case "string":
        if (typeof input === "string") {
          return input;
        }
        return void 0;
      case "number":
        const num = Number(input);
        if (!isNaN(num)) {
          return num;
        }
        return void 0;
      case "boolean":
        if (typeof input === "boolean") {
          return input;
        }
        if (typeof input === "string") {
          const lowerValue = input.toLowerCase();
          if (lowerValue === "true") {
            return true;
          }
          if (lowerValue === "false") {
            return false;
          }
        }
        if (typeof input === "number") {
          if (input === 1) {
            return true;
          }
          if (input === 0) {
            return false;
          }
        }
        return void 0;
      case "string[]":
        if (Array.isArray(input) && input.every((item) => typeof item === "string")) {
          return input;
        }
        return void 0;
      default:
        return void 0;
    }
  }
  formatToYAMLSaveString(text, replaceBy = void 0) {
    let replaceString = "-";
    if (!replaceBy && this.settings) {
      replaceString = this.settings.specialCharReplacement || "-";
    } else {
      if (replaceBy)
        replaceString = replaceBy;
    }
    return text.replace(/[^a-zA-Z0-9\-_\/äöüßÄÖÜáéíóúýÁÉÍÓÚÝàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛãñõÃÑÕ]/g, replaceString);
  }
  /**
   * Converts a string to a YAML-safe format by adding quotes when necessary.
   * @param input The string, boolean, number or array to make YAML-safe
   * @returns The safely quoted string when needed, or the original string if safe
   */
  toYamlSafeString(input) {
    if (Array.isArray(input)) {
      input.forEach((item, index) => {
        input[index] = this.toYamlSafeString(item).toString();
      });
      return input;
    }
    switch (typeof input) {
      case "number":
        return input;
      case "boolean":
        return input ? "true" : "false";
      case "string":
        const trimmed = input.trim();
        if (trimmed === "")
          return '""';
        const needsQuotes = /[:{}\[\],&*#?|<>=!%@`"'\\]|^[-?\n]|[\s\n]|^[yYnN]|^[0-9]|^[+-]|^(true|false|yes|no|on|off)$/i.test(trimmed);
        const isAlreadyQuoted = trimmed.startsWith('"') && trimmed.endsWith('"') || trimmed.startsWith("'") && trimmed.endsWith("'");
        if (!needsQuotes && !isAlreadyQuoted) {
          return trimmed;
        }
        if (!isAlreadyQuoted) {
          return `"${trimmed.replace(/"/g, '\\"')}"`;
        }
        return trimmed;
      default:
        console.error(`toYamlSafeString(${input}) if of type '${typeof input}'`);
        return input;
    }
  }
  replaceSpaces(text, replaceBy = void 0) {
    let replaceString = "_";
    if (!replaceBy && this.settings) {
      replaceString = this.settings.spaceReplacement || "_";
    } else {
      if (replaceBy)
        replaceString = replaceBy;
    }
    return text.replace(/\s+/g, replaceString);
  }
  formatCamelCase(text) {
    let textParts = text.split(" ");
    let convertedTextParts = [];
    textParts.forEach((text2, index) => {
      let newTextPart = text2.toLowerCase();
      if (index > 0)
        newTextPart = newTextPart.charAt(0).toUpperCase() + newTextPart.slice(1);
      convertedTextParts.push(newTextPart);
    });
    return convertedTextParts.join("");
  }
  formatUpperCamelCase(text) {
    let textParts = text.split(" ");
    let convertedTextParts = [];
    textParts.forEach((text2, index) => {
      let newTextPart = text2.toLowerCase();
      newTextPart = newTextPart.charAt(0).toUpperCase() + newTextPart.slice(1);
      convertedTextParts.push(newTextPart);
    });
    return convertedTextParts.join("");
  }
  /**
   * get the path to a file from a string containing the full parh/name string
   * @param path string
   * @param separator string defaults to '/'
   * @returns string
   */
  getFoldersFromPath(path, separator = "/") {
    if (path === null)
      return null;
    if (path === void 0)
      return void 0;
    const currentPathParts = path.split("/");
    currentPathParts.pop();
    return currentPathParts.join(separator);
  }
};

// src/rules.ts
var ruleFunctions = [];
function getRuleFunctionById(id) {
  return ruleFunctions.find((rule) => rule.id === id);
}
ruleFunctions.push({
  id: "default",
  description: "Pass parameter",
  source: "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}",
  fx: function(app, file, tools) {
    let result = "";
    return result;
  }
});
ruleFunctions.push({
  id: "fullPath",
  description: "Full path and filename",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const result = file.path;\n  return result;\n}",
  fx: function(app, file, tools) {
    return `${file.path}`;
  }
});
ruleFunctions.push({
  id: "aliasFromPath",
  description: "An Alias from every folder of the file Path",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  let pathArray = file.path.split('/');\n  pathArray.pop(); // remove File name with extension\n  pathArray = pathArray.map((dir) => tools.formatUpperCamelCase(dir)); // convert to UpperCamelCase\n  const fileNameParts = file.name.split('.');\n  if (fileNameParts.length > 1) {\n    fileNameParts.pop(); // remove Extension\n  }\n  const fileName = fileNameParts.join('.'); // rebuild file Name\n  pathArray.push(tools.formatUpperCamelCase(fileName)); // add file name without extension and in UpperCamelCase\n  const result = pathArray.join('.') || '';\n  return result;\n}",
  fx: function(app, file, tools) {
    let pathArray = file.path.split("/");
    pathArray.pop();
    pathArray = pathArray.map((dir) => tools.formatUpperCamelCase(dir));
    const fileNameParts = file.name.split(".");
    if (fileNameParts.length > 1) {
      fileNameParts.pop();
    }
    const fileName = fileNameParts.join(".");
    pathArray.push(tools.formatUpperCamelCase(fileName));
    const result = pathArray.join(".") || "";
    return result;
  }
});
ruleFunctions.push({
  id: "path",
  description: "Full Path",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
  fx: function(app, file, tools) {
    let parts = file.path.split("/");
    parts.pop();
    return parts.join("/");
  }
});
ruleFunctions.push({
  id: "folder",
  description: "Foldername",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    result = parts[parts.length-2];\n  }\n  return result;\n}",
  fx: function(app, file, tools) {
    const path = file.path;
    const parts = path.split("/");
    let result = "";
    if (parts.length > 1) {
      result = parts[parts.length - 2];
    }
    return result;
  }
});
ruleFunctions.push({
  id: "folders",
  description: "All folders of the file as a list",
  source: "function (app, file, tools) { // do not change this line!\n  const path = file.path; // acquire file path\n  const result = path.split('/');\n  result.pop(); // remove file name\n  return result;\n}",
  fx: function(app, file, tools) {
    const path = file.path;
    const result = path.split("/");
    result.pop();
    return result;
  }
});
ruleFunctions.push({
  id: "rootFolder",
  description: "Root folder",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    result = parts[0];\n  }\n  return result;\n}",
  fx: function(app, file, tools) {
    const path = file.path;
    const parts = path.split("/");
    let result = "";
    if (parts.length > 1) {
      result = parts[0];
    }
    return result;
  }
});
ruleFunctions.push({
  id: "name",
  description: "File name",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file name\n  const result = file.name.split('.');\n  result.pop(); // remove extension\n  result.join('.'); // reconstruct the file name\n  return result;\n}",
  fx: function(app, file, tools) {
    const result = file.name.split(".");
    result.pop();
    result.join(".");
    return result;
  }
});
ruleFunctions.push({
  id: "nameExt",
  description: "File name with extension",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file name\n  const result = file.name;\n  return result;\n}",
  fx: function(app, file, tools) {
    const result = file.name;
    return result;
  }
});
ruleFunctions.push({
  id: "dateTimeCreated",
  description: "Date (and Time) created",
  // TODO Check time zones. 
  source: "function (app, file, tools) { // do not change this line!\n  // acquire Date and Timer file created\n  const dateTime = new Date(file.stat.ctime);\n  const result = dateTime.toISOString().split('.')[0];\n  return result; // return you result.\n}",
  fx: function(app, file, tools) {
    const dateTime = new Date(file.stat.ctime);
    const result = dateTime.toISOString().split(".")[0];
    return result;
  }
});
ruleFunctions.push({
  id: "dateTimeModified",
  description: "Date (and Time) modified",
  //FIXME keep Date and time untouched when editing frontmatter properties
  source: "function (app, file, tools) { // do not change this line!\n  // acquire Date and Timer file modified\n  const dateTime = new Date(file.stat.mtime);\n  const result = dateTime.toISOString().split('.')[0];\n  return result; // return you result.\n}",
  fx: function(app, file, tools) {
    const dateTime = new Date(file.stat.mtime);
    const result = dateTime.toISOString().split(".")[0];
    return result;
  }
});
ruleFunctions.push({
  id: "fileSizeBytes",
  description: "File size in bytes",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file size\n  const result = file.stat.size;\n  return result; // return you result.\n}",
  fx: function(app, file, tools) {
    const result = file.stat.size;
    return result;
  }
});
ruleFunctions.push({
  id: "fileSizeString",
  description: "File size formatted as text",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file size\n  let size =file.stat.size;\n  const precision = 2; // number of decimal places\n  if (size > 1024) {\n    size = size / 1024;\n    if (size > 1024) {\n      size = size / 1024;\n      if (size > 1024) {\n        size = size / 1024;\n        return Number.parseFloat(size).toFixed(precision) + ' GB';\n      } \n      return Number.parseFloat(size).toFixed(precision) + ' MB';\n    }\n    return Number.parseFloat(size).toFixed(precision) + ' KB';\n  }   \n  return size + ' Bytes'; // return you result.\n}",
  fx: function(app, file, tools) {
    let size = file.stat.size;
    const precision = 2;
    if (size > 1024) {
      size = size / 1024;
      if (size > 1024) {
        size = size / 1024;
        if (size > 1024) {
          size = size / 1024;
          return size.toFixed(precision) + " GB";
        }
        return size.toFixed(precision) + " MB";
      }
      return size.toFixed(precision) + " KB";
    }
    return size + " Bytes";
  }
});

// src/types.ts
var DEFAULT_SETTINGS = {
  tagPrefix: "",
  excludeRootFolder: false,
  tagsPropertyName: "tags",
  spaceReplacement: "_",
  specialCharReplacement: "_",
  lowercaseTags: false,
  knownProperties: [],
  rules: [],
  useTextArea: false,
  exclude: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "exclude",
    display: "folder"
  },
  include: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "include",
    display: "folder"
  },
  configuredProperties: []
};
var DEFAULT_RULE_DEFINITION = {
  id: "",
  active: true,
  property: "",
  customProperty: "",
  type: "string",
  typeProperty: { name: "", type: "", source: "registered" },
  content: "",
  buildInCode: "",
  jsCode: "",
  showContent: false
};

// src/alertBox.ts
var import_obsidian2 = require("obsidian");
var AlertModal = class extends import_obsidian2.Modal {
  constructor(app, title, description, btn1, btn2) {
    super(app);
    this.title = title;
    this.description = description;
    this.btn1Text = btn1;
    this.btn2Text = btn2;
    this.promise = new Promise((resolve) => {
      this.resolvePromise = resolve;
    });
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.title });
    contentEl.createEl("p", { text: this.description });
    new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn.setButtonText(this.btn1Text).setCta().onClick(() => {
        this.close();
        this.resolvePromise(true);
      });
    }).addButton((btn) => {
      btn.setButtonText(this.btn2Text).onClick(() => {
        this.close();
        this.resolvePromise(false);
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  async openAndGetValue() {
    this.open();
    return this.promise;
  }
};

// src/directorySelectionModal.ts
var import_obsidian3 = require("obsidian");
var DirectorySelectionModal = class extends import_obsidian3.Modal {
  // Reference to update dropdown on reset
  /**
   * Creates an instance of the DirectorySelectionModal.
   * @param app - The Obsidian App instance.
   * @param initialFolders - Array of initially selected folder paths.
   * @param initialFiles - Array of initially selected file paths.
   * @param initialMode - The initial selection mode ('include' or 'exclude').
   * @param okCallback - Function to call when the user clicks "OK". Receives the selection result.
   */
  constructor(app, initialFolders, initialFiles, initialMode, initialDisplay, includeExcludeSelectable, okCallback) {
    super(app);
    this.showFiles = false;
    // Container for the tree view
    this.treeNodes = /* @__PURE__ */ new Map();
    // Map path to node info for quick access
    this.modeDropdown = null;
    this.initialFoldersSnapshot = new Set(initialFolders);
    this.initialFilesSnapshot = new Set(initialFiles);
    this.initialModeSnapshot = initialMode;
    this.initialDisplaySnapshot = initialDisplay;
    this.showFiles = initialDisplay === "files" || initialFiles.length > 0;
    this.includeExcludeSelectable = includeExcludeSelectable;
    this.okCallback = okCallback;
    this.resetSelectionToInitial();
  }
  /**
   * Resets the current selection state to the initial state provided at construction.
   */
  resetSelectionToInitial() {
    this.currentFolders = new Set(this.initialFoldersSnapshot);
    this.currentFiles = new Set(this.initialFilesSnapshot);
    this.currentMode = this.initialModeSnapshot;
  }
  /**
   * Resets the current selection state to empty.
   */
  resetSelectionToEmpty() {
    this.currentFolders = /* @__PURE__ */ new Set([]);
    this.currentFiles = /* @__PURE__ */ new Set([]);
    this.currentMode = this.initialModeSnapshot;
  }
  /**
   * Called when the modal is opened. Builds the UI.
   */
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("directory-selection-modal");
    if (this.includeExcludeSelectable) {
      contentEl.createEl("h2", { text: "Include or Exclude Folders and Files" });
    } else {
      contentEl.createEl("h2", { text: `${this.currentMode === "exclude" ? "Exclude" : "Include"} Folders and Files` });
    }
    const controlsEl = contentEl.createDiv({ cls: "modal-controls" });
    this.createModeSetting(controlsEl);
    this.createShowFilesSetting(controlsEl);
    this.treeRootElement = contentEl.createDiv({ cls: "tree-view-container" });
    this.treeRootElement.style.maxHeight = "600px";
    this.treeRootElement.style.overflowY = "auto";
    this.treeRootElement.style.border = "1px solid var(--background-modifier-border)";
    this.treeRootElement.style.padding = "10px";
    this.treeRootElement.style.marginTop = "10px";
    this.treeRootElement.style.marginBottom = "10px";
    this.buildAndRenderTree();
    this.createActionButtons(contentEl);
  }
  /**
   * Creates the dropdown setting for choosing the selection mode.
   * @param containerEl - The HTML element to append the setting to.
   */
  createModeSetting(containerEl) {
    if (this.includeExcludeSelectable) {
      this.modeDropdown = new import_obsidian3.Setting(containerEl).setName("Selection Mode").setDesc("Choose if the selected files and folders should be excluded or included.").addDropdown((dropdown) => {
        dropdown.addOption("exclude", "exclude").addOption("include", "include").setValue(this.currentMode).onChange((value) => {
          this.currentMode = value;
          this.updateTreeAppearance();
        });
      });
    }
  }
  /**
   * Updates the mode dropdown UI element to reflect the currentMode state.
   */
  updateModeDropdown() {
    var _a;
    const dropdownComponent = (_a = this.modeDropdown) == null ? void 0 : _a.components[0];
    if (dropdownComponent && typeof dropdownComponent.setValue === "function") {
      dropdownComponent.setValue(this.currentMode);
    }
  }
  /**
   * Creates the toggle setting for showing/hiding files in the tree.
   * @param containerEl - The HTML element to append the setting to.
   */
  createShowFilesSetting(containerEl) {
    new import_obsidian3.Setting(containerEl).setName("Show Files").setDesc("Show Files within the directory tree.").addToggle((toggle) => {
      toggle.setValue(this.showFiles).onChange((value) => {
        this.showFiles = value;
        this.buildAndRenderTree();
      });
    });
  }
  /**
   * Creates the "OK" and "Reset" buttons.
   * @param containerEl - The HTML element to append the buttons to.
   */
  createActionButtons(containerEl) {
    const buttonsEl = containerEl.createDiv({ cls: "modal-buttons" });
    buttonsEl.style.marginTop = "15px";
    buttonsEl.style.display = "flex";
    buttonsEl.style.justifyContent = "flex-end";
    buttonsEl.style.gap = "10px";
    const resetButton = buttonsEl.createEl("button");
    (0, import_obsidian3.setIcon)(resetButton, "reset");
    resetButton.ariaLabel = "Reset selection";
    resetButton.onclick = () => {
      this.resetSelectionToInitial();
      this.updateModeDropdown();
      this.buildAndRenderTree();
    };
    const emptyButton = buttonsEl.createEl("button");
    (0, import_obsidian3.setIcon)(emptyButton, "eraser");
    emptyButton.ariaLabel = "Clear selection";
    emptyButton.onclick = () => {
      this.resetSelectionToEmpty();
      this.updateModeDropdown();
      this.buildAndRenderTree();
    };
    const cancelButton = buttonsEl.createEl("button", { text: "Cancel" });
    cancelButton.ariaLabel = "close and discard changes";
    cancelButton.onclick = () => {
      console.log("Cancel Clicked - Returning");
      this.okCallback(null);
      this.close();
    };
    const okButton = buttonsEl.createEl("button", { text: "OK", cls: "mod-cta" });
    cancelButton.ariaLabel = "close and save changes";
    okButton.onclick = () => {
      this.close();
    };
  }
  /**
   * Builds the logical tree structure data from the vault's files and folders.
   * @returns The root node of the tree structure.
   */
  buildTreeData() {
    const vaultRootNode = {
      path: "/",
      name: this.app.vault.getName() || "Vault",
      // Use vault name or default
      type: "folder",
      children: [],
      // Placeholder elements, will be assigned during rendering if root is rendered
      element: null,
      checkbox: null,
      label: null,
      container: null
    };
    const folderNodes = /* @__PURE__ */ new Map();
    folderNodes.set("/", vaultRootNode);
    const allFiles = this.app.vault.getFiles();
    allFiles.forEach((file) => {
      const parentFolder = file.parent;
      if (!parentFolder)
        return;
      let currentPath = "";
      const pathParts = parentFolder.path.split("/").filter((p) => p.length > 0);
      let parentNode = vaultRootNode;
      pathParts.forEach((part) => {
        currentPath = currentPath === "/" ? part : `${currentPath}/${part}`;
        if (!folderNodes.has(currentPath)) {
          const newFolderNode = {
            path: currentPath,
            name: part,
            type: "folder",
            children: [],
            // Placeholders, assigned during rendering
            element: null,
            checkbox: null,
            label: null,
            container: null
          };
          folderNodes.set(currentPath, newFolderNode);
          if (!parentNode.children) {
            parentNode.children = [];
          }
          parentNode.children.push(newFolderNode);
          parentNode = newFolderNode;
        } else {
          parentNode = folderNodes.get(currentPath);
        }
      });
    });
    if (this.showFiles) {
      allFiles.forEach((file) => {
        const parentFolder = file.parent;
        if (!parentFolder) {
          return;
        }
        const parentPath = "/" + parentFolder.path;
        const parentNode = folderNodes.get(parentPath);
        const fileNode = {
          path: file.path,
          name: file.name,
          type: "file",
          // Files don't have children
          // Placeholders, assigned during rendering
          element: null,
          checkbox: null,
          label: null,
          container: null
        };
        if (parentNode) {
          if (!parentNode.children) {
            parentNode.children = [];
          }
          parentNode.children.push(fileNode);
        } else {
        }
      });
    }
    const sortNodes = (a, b) => {
      if (a.type === "folder" && b.type === "file")
        return -1;
      if (a.type === "file" && b.type === "folder")
        return 1;
      return a.name.localeCompare(b.name);
    };
    folderNodes.forEach((node) => {
      var _a;
      return (_a = node.children) == null ? void 0 : _a.sort(sortNodes);
    });
    return vaultRootNode;
  }
  /**
   * Renders the entire tree structure in the DOM based on the tree data.
   */
  renderTree() {
    var _a;
    this.treeRootElement.empty();
    this.treeNodes.clear();
    const treeData = this.buildTreeData();
    const rootUl = this.treeRootElement.createEl("ul");
    rootUl.addClass("tree-root-ul");
    rootUl.style.listStyle = "none";
    rootUl.style.paddingLeft = "0";
    (_a = treeData.children) == null ? void 0 : _a.forEach((childNode) => {
      this.renderTreeNode(childNode, rootUl, 0);
    });
  }
  /**
   * Recursively renders a single tree node and its children in the DOM.
   * @param node - The TreeNode data to render.
   * @param parentElement - The HTML `ul` element to append this node's `li` to.
   * @param level - The current indentation level.
   */
  renderTreeNode(node, parentElement, level) {
    const li = parentElement.createEl("li");
    li.style.marginLeft = `${level * 20}px`;
    li.addClass(`tree-node-${node.type}`);
    const container = li.createDiv({ cls: "tree-node-container" });
    container.style.display = "flex";
    container.style.alignItems = "center";
    container.style.padding = "2px 0";
    const checkbox = container.createEl("input", { type: "checkbox" });
    checkbox.id = `tree-cb-${node.path.replace(/[^a-zA-Z0-9]/g, "-")}`;
    checkbox.dataset.path = node.path;
    checkbox.dataset.type = node.type;
    const label = container.createEl("label");
    label.textContent = `${node.type === "folder" ? "\u{1F4C1}" : "\u{1F4C4}"} ${node.name}`;
    label.htmlFor = checkbox.id;
    label.style.marginLeft = "5px";
    label.style.cursor = "pointer";
    label.title = node.path;
    node.element = li;
    node.checkbox = checkbox;
    node.label = label;
    node.container = container;
    this.treeNodes.set(node.path, node);
    if (node.type === "folder") {
      checkbox.checked = this.currentFolders.has(node.path);
    } else {
      checkbox.checked = this.currentFiles.has(node.path);
    }
    checkbox.onchange = (event) => {
      const target = event.target;
      const path = target.dataset.path;
      const type = target.dataset.type;
      if (target.checked) {
        if (type === "folder")
          this.currentFolders.add(path);
        else
          this.currentFiles.add(path);
      } else {
        if (type === "folder")
          this.currentFolders.delete(path);
        else
          this.currentFiles.delete(path);
      }
      this.updateTreeAppearance();
    };
    if (node.type === "folder" && node.children && node.children.length > 0) {
      const childrenUl = li.createEl("ul");
      childrenUl.style.listStyle = "none";
      childrenUl.style.paddingLeft = "0";
      childrenUl.style.marginLeft = "0";
      node.children.forEach((child) => this.renderTreeNode(child, childrenUl, level + 1));
    }
  }
  /**
   * Updates the visual appearance (enabled/disabled/styling) of all nodes
   * in the tree based on the current mode and selections.
   */
  updateTreeAppearance() {
    this.treeNodes.forEach((node) => {
      let isDisabled = false;
      let isEffectivelyIncluded = false;
      let isEffectivelyExcluded = false;
      let ancestorFolderSelected = false;
      let currentPath = node.path;
      while (currentPath !== "/") {
        const parentPath = currentPath.substring(0, currentPath.lastIndexOf("/")) || "/";
        if (this.currentFolders.has(parentPath)) {
          ancestorFolderSelected = true;
          break;
        }
        if (parentPath === currentPath)
          break;
        currentPath = parentPath;
      }
      const nodeSelected = node.type === "folder" ? this.currentFolders.has(node.path) : this.currentFiles.has(node.path);
      if (this.currentMode === "exclude") {
        isEffectivelyExcluded = nodeSelected || ancestorFolderSelected;
        isDisabled = isEffectivelyExcluded;
      } else {
        if (node.type === "folder") {
          isEffectivelyIncluded = nodeSelected || ancestorFolderSelected;
        } else {
          const parentPath = node.path.substring(0, node.path.lastIndexOf("/")) || "/";
          const parentEffectivelyIncluded = this.isPathEffectivelyIncluded(parentPath);
          isEffectivelyIncluded = nodeSelected || parentEffectivelyIncluded;
        }
        isDisabled = !isEffectivelyIncluded;
      }
      node.checkbox.disabled = false;
      if (isDisabled) {
        node.container.style.opacity = "0.5";
        node.label.style.textDecoration = "line-through";
        node.element.addClass("is-disabled");
      } else {
        node.container.style.opacity = "1";
        node.label.style.textDecoration = "none";
        node.element.removeClass("is-disabled");
      }
      node.element.classList.remove("is-included", "is-excluded");
      if (this.currentMode === "include" && isEffectivelyIncluded) {
        node.element.addClass("is-included");
      } else if (this.currentMode === "exclude" && isEffectivelyExcluded) {
        node.element.addClass("is-excluded");
      }
    });
  }
  /**
   * Helper function to determine if a given path is effectively included
   * in the current selection under 'include' mode.
   * A path is included if it (file or folder) is selected, or if any of its ancestor FOLDERS are selected.
   * @param path - The folder or file path to check.
   * @returns True if the path should be considered included, false otherwise.
   */
  isPathEffectivelyIncluded(path) {
    if (this.currentMode !== "include") {
      return !this.isPathEffectivelyExcluded(path);
    }
    if (this.currentFiles.has(path) || this.currentFolders.has(path)) {
      return true;
    }
    let current = path;
    while (current !== "/") {
      const parentPath = current.substring(0, current.lastIndexOf("/")) || "/";
      if (this.currentFolders.has(parentPath)) {
        return true;
      }
      if (parentPath === current)
        break;
      current = parentPath;
    }
    return false;
  }
  /**
  * Helper function to determine if a given path is effectively excluded
  * in the current selection under 'exclude' mode.
  * A path is excluded if it (file or folder) is selected, or if any of its ancestor FOLDERS are selected.
  * @param path - The folder or file path to check.
  * @returns True if the path should be considered excluded, false otherwise.
  */
  isPathEffectivelyExcluded(path) {
    if (this.currentMode !== "exclude") {
      return false;
    }
    if (this.currentFiles.has(path) || this.currentFolders.has(path)) {
      return true;
    }
    let current = path;
    while (current !== "/") {
      const parentPath = current.substring(0, current.lastIndexOf("/")) || "/";
      if (this.currentFolders.has(parentPath)) {
        return true;
      }
      if (parentPath === current)
        break;
      current = parentPath;
    }
    return false;
  }
  /**
   * Combines building the tree data, rendering the DOM, and applying initial appearance.
   */
  buildAndRenderTree() {
    this.renderTree();
    this.updateTreeAppearance();
  }
  /**
   * Called when the modal is closed. Cleans up resources.
   */
  onClose() {
    const result = {
      folders: Array.from(this.currentFolders),
      files: Array.from(this.currentFiles),
      mode: this.currentMode,
      display: this.currentDisplay
    };
    console.log("OK Clicked - Returning Result:", result);
    this.okCallback(result);
    const { contentEl } = this;
    contentEl.empty();
    this.treeNodes.clear();
    this.modeDropdown = null;
  }
};
function openDirectorySelectionModal(app, initialFolders, initialFiles, initialMode, initialDisplay, includeExcludeSelectable, okCallback) {
  new DirectorySelectionModal(
    app,
    initialFolders,
    initialFiles,
    initialMode,
    initialDisplay,
    includeExcludeSelectable,
    okCallback
  ).open();
}

// src/settings.ts
var import_crypto = require("crypto");
var FolderTagSettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.scriptingTools = new ScriptingTools(this.plugin.settings);
  }
  display() {
    this.knownProperties = getPropertiesFromMetadataManager(this.app);
    this.knownTypes = getTypesFromMetadataManager(this.app);
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Folder Path Tag Settings" });
    new import_obsidian4.Setting(containerEl).setName("Tag prefix").setDesc("Optional prefix to add before folder path tags").addText((text) => text.setPlaceholder("prefix/").setValue(this.plugin.settings.tagPrefix).onChange(async (value) => {
      this.plugin.settings.tagPrefix = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("Exclude root folder").setDesc("If enabled, the root folder name will be excluded from the tag").addToggle((toggle) => toggle.setValue(this.plugin.settings.excludeRootFolder).onChange(async (value) => {
      this.plugin.settings.excludeRootFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("Tags property name").setDesc('Frontmatter property name to store tags (default: "tags")').addText((text) => text.setPlaceholder("tags").setValue(this.plugin.settings.tagsPropertyName).onChange(async (value) => {
      this.plugin.settings.tagsPropertyName = value || "tags";
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("Space replacement").setDesc('Character to replace spaces in folder names (default: "_")').addText((text) => text.setPlaceholder("_").setValue(this.plugin.settings.spaceReplacement).onChange(async (value) => {
      this.plugin.settings.spaceReplacement = value || "_";
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("Special character replacement").setDesc('Character to replace special characters (default: "_") - preserves letters with diacritics').addText((text) => text.setPlaceholder("_").setValue(this.plugin.settings.specialCharReplacement).onChange(async (value) => {
      this.plugin.settings.specialCharReplacement = value || "_";
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("Convert to lowercase").setDesc("Convert all tags to lowercase").addToggle((toggle) => toggle.setValue(this.plugin.settings.lowercaseTags).onChange(async (value) => {
      this.plugin.settings.lowercaseTags = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("Exclude Files and Folders").setDesc(`Currently ${this.plugin.settings.exclude.selectedFolders.length} folders and ${this.plugin.settings.exclude.selectedFiles.length} files will be ${this.plugin.settings.exclude.mode}d.`).addButton((button) => {
      button.setIcon("folder-x").setButtonText("Exclude").setCta().onClick(() => {
        openDirectorySelectionModal(
          this.app,
          this.plugin.settings.exclude.selectedFolders || [],
          this.plugin.settings.exclude.selectedFiles || [],
          this.plugin.settings.exclude.mode || "exclude",
          this.plugin.settings.exclude.display || "folders",
          false,
          // include, exclude option hidden
          (result) => {
            if (!result)
              return;
            this.plugin.settings.exclude.selectedFolders = result.folders;
            this.plugin.settings.exclude.selectedFiles = result.files;
            this.plugin.settings.exclude.mode = result.mode;
            this.plugin.settings.exclude.display = result.display;
            this.plugin.saveSettings();
            this.display();
          }
        );
      });
    });
    new import_obsidian4.Setting(containerEl).setName("Include Files and Folders").setDesc(`Currently ${this.plugin.settings.include.selectedFolders.length} folders and ${this.plugin.settings.include.selectedFiles.length} files will be ${this.plugin.settings.include.mode}d even when in excluded Folders.`).addButton((button) => {
      button.setIcon("folder-check").setButtonText("Include").setCta().onClick(() => {
        openDirectorySelectionModal(
          this.app,
          this.plugin.settings.include.selectedFolders || [],
          this.plugin.settings.include.selectedFiles || [],
          this.plugin.settings.include.mode || "include",
          this.plugin.settings.include.display || "folders",
          false,
          // include, include option hidden
          (result) => {
            if (!result)
              return;
            this.plugin.settings.include.selectedFolders = result.folders;
            this.plugin.settings.include.selectedFiles = result.files;
            this.plugin.settings.include.mode = result.mode;
            this.plugin.settings.include.display = result.display;
            this.plugin.saveSettings();
            this.display();
          }
        );
      });
    });
    new import_obsidian4.Setting(containerEl).setName("Rules").setDesc("add rules to update selected parameters");
    this.rulesDiv = containerEl.createDiv({ cls: "obsidian-f2t-rule-area" });
    this.rulesControl = containerEl.createDiv({ cls: "obsidian-f2t-rule-controls" });
    this.plugin.settings.rules.forEach((rule) => {
      this.addRule(this.rulesDiv, rule.id);
    });
    new import_obsidian4.Setting(this.rulesControl).addButton(async (button) => {
      button.setIcon("square-plus");
      button.setClass("obsidian-f2t-smallButton");
      button.setTooltip("add a rule");
      button.onClick(async () => {
        this.addRule(this.rulesDiv);
      });
    });
  }
  addRule(divEl, ruleUUID = "") {
    var _a;
    let cmEditor = null;
    if (ruleUUID === "") {
      ruleUUID = (0, import_crypto.randomUUID)().toString();
      this.plugin.settings.rules.push(Object.assign({}, DEFAULT_RULE_DEFINITION, {
        id: ruleUUID
      }));
    }
    const rule = this.plugin.settings.rules.find((rule2) => rule2.id === ruleUUID);
    if (!rule)
      return;
    let propertyNameInput;
    let showFunctionButton;
    let propertyTypeDropdown;
    let propertyDevDropdown;
    let functionResultTextComponent;
    let functionTestButton;
    const rulesDiv = divEl.createDiv({ cls: "obsidian-f2t-ruleLine" });
    rulesDiv.setAttribute("id", ruleUUID);
    const ruleOptionsDiv = divEl.createDiv({ cls: "obsidian-f2t-ruleOptions" });
    ruleOptionsDiv.style.height = "350px;";
    ruleOptionsDiv.style.alignItems = "flex-end";
    if (this.plugin.settings.useTextArea) {
      const ruleOptionsSettings = new import_obsidian4.Setting(ruleOptionsDiv).addTextArea((textArea) => {
        textArea.setPlaceholder("ender valid JS Code");
        textArea.inputEl.setAttribute("style", `height:190px; width:80%;`);
        textArea.onChange(async (value) => {
          if (functionTestButton)
            functionTestButton.buttonEl.addClass("mod-warning");
          rule.jsCode = value;
          await this.plugin.saveSettings();
        });
      });
    } else {
      let jsCode = rule.jsCode;
      if (rule.content !== "script") {
        if (rule.buildInCode === "") {
          rule.buildInCode = ((_a = getRuleFunctionById(rule.content)) == null ? void 0 : _a.source) || ruleFunctions[0].source;
        }
        jsCode = rule.buildInCode;
      }
      cmEditor = window.CodeMirror(ruleOptionsDiv, {
        value: jsCode || "function (app, file, tools) { // do not change this line!\n\n  return result; // return you result.\n}",
        mode: "javascript",
        lineNumbers: true,
        // theme: "obsidian",
        indentUnit: 2,
        lineWrapping: false,
        readOnly: false
      });
      if (cmEditor) {
        cmEditor.on("change", (cmEditor2) => {
          if (functionTestButton)
            functionTestButton.buttonEl.addClass("mod-warning");
        });
        cmEditor.on("blur", (cmEditor2) => {
          if (rule.content === "script") {
            rule.jsCode = cmEditor2.getValue();
          } else {
            rule.buildInCode = cmEditor2.getValue();
          }
          this.plugin.saveSettings();
        });
      }
      ;
      new import_obsidian4.Setting(ruleOptionsDiv).addButton((button) => {
        functionTestButton = button;
        button.setWarning().setButtonText("Save & Test").onClick(async () => {
          if (cmEditor) {
            let jsCode2 = "";
            if (rule.content === "script") {
              rule.jsCode = cmEditor.getValue();
              jsCode2 = rule.jsCode;
            } else {
              rule.buildInCode = cmEditor.getValue();
              jsCode2 = rule.buildInCode;
            }
            await this.plugin.saveSettings();
            let userFunction = parseJSCode(jsCode2);
            if (typeof userFunction === "string") {
              let errorHint = "See console for details!";
              if (userFunction.contains("Unexpected token")) {
                errorHint = "Did you missed a semicolon (;)?";
              }
              if (functionResultTextComponent)
                functionResultTextComponent.setValue(`Syntax error: ${userFunction}! ${errorHint}`);
            } else {
              if (userFunction) {
                try {
                  const files = this.app.vault.getMarkdownFiles();
                  const result = userFunction(this.app, files[8], this.scriptingTools);
                  if (functionResultTextComponent)
                    functionResultTextComponent.setValue(result.toString());
                  button.buttonEl.removeClass("mod-warning");
                } catch (e) {
                  if (functionResultTextComponent) {
                    functionResultTextComponent.setValue(`Syntax error: ${e.message}! See console for details!`);
                  }
                  console.error("Syntax error. ", e, jsCode2, userFunction);
                }
              } else {
                console.error("syntax error");
              }
            }
          }
        });
      }).addText((text) => {
        functionResultTextComponent = text;
        text.setPlaceholder("function result").setDisabled(true);
        functionResultTextComponent.inputEl.style.width = "600px";
      });
    }
    function showJsFunctionButton(ruleId) {
      var _a2;
      const showCodeButton = ((_a2 = getRuleFunctionById(ruleId)) == null ? void 0 : _a2.source) !== "" || ruleId === "script";
      if (showCodeButton) {
        if (showFunctionButton)
          showFunctionButton.buttonEl.style.display = "block";
        if (propertyDevDropdown)
          propertyDevDropdown.selectEl.style.width = "360px";
      } else {
        if (showFunctionButton)
          showFunctionButton.buttonEl.style.display = "none";
        if (propertyDevDropdown)
          propertyDevDropdown.selectEl.style.width = "400px";
      }
    }
    const ruleSettings = new import_obsidian4.Setting(rulesDiv).addButton((button) => {
      button.buttonEl.setAttribute("style", "width:150px; justify-content: left; ");
      button.setButtonText(rule.property || "Select Parameter");
      button.onClick(() => {
        new SelectProperty(this.app, this.knownProperties, rule.typeProperty, (result) => {
          if (result.name !== "") {
            rule.typeProperty = result;
            rule.property = result.name;
            rule.type = result.type;
            if (this.knownProperties.filter((property) => property.name.toLowerCase().includes(rule.property.toLowerCase())).length === 0) {
            }
            ;
            button.setButtonText(result.name);
            this.plugin.saveSettings();
          }
          propertyTypeDropdown.setValue(result.type);
        }).open();
      });
    }).addDropdown((dropdown) => {
      propertyTypeDropdown = dropdown;
      dropdown.selectEl.setAttribute("style", "width:110px");
      dropdown.addOption("", "Select a type");
      dropdown.addOption("aliases", "Aliases");
      dropdown.addOption("checkbox", "Checkbox");
      dropdown.addOption("date", "Date");
      dropdown.addOption("datetime", "Date & Time");
      dropdown.addOption("multitext", "List");
      dropdown.addOption("number", "Number");
      dropdown.addOption("tags", "Tags");
      dropdown.addOption("text", "Text");
      if (rule.type)
        dropdown.setValue(rule.type);
      dropdown.onChange(async (value) => {
        if (value !== "") {
          rule.type = value;
          await this.plugin.saveSettings();
        }
      });
    }).addDropdown((dropdown) => {
      propertyDevDropdown = dropdown;
      dropdown.selectEl.setAttribute("style", "width:400px");
      dropdown.addOption("", "Select a content");
      for (let rule2 of ruleFunctions) {
        dropdown.addOption(rule2.id, rule2.description);
      }
      dropdown.addOption("script", "JavaScript script");
      dropdown.setValue(rule.content);
      dropdown.onChange(async (value) => {
        var _a2, _b, _c;
        let jsCode = "";
        if (value !== "") {
          if (value !== "script") {
            let oldOriginalCode = ((_a2 = getRuleFunctionById(rule.content)) == null ? void 0 : _a2.source) || ruleFunctions[0].source;
            if (rule.buildInCode !== "" && rule.buildInCode !== oldOriginalCode) {
              const shouldProceed = await new AlertModal(
                this.app,
                "Overwrite existing code?",
                "I sees like you have custom code for this rule! Should this be overwritten by default code for this parameter?",
                "Yes",
                "No"
              ).openAndGetValue();
              if (shouldProceed) {
                jsCode = rule.buildInCode = ((_b = getRuleFunctionById(value)) == null ? void 0 : _b.source) || ruleFunctions[0].source;
              } else {
                jsCode = rule.buildInCode;
              }
              cmEditor == null ? void 0 : cmEditor.setValue(jsCode);
            } else {
              jsCode = rule.buildInCode = ((_c = getRuleFunctionById(value)) == null ? void 0 : _c.source) || ruleFunctions[0].source;
              cmEditor == null ? void 0 : cmEditor.setValue(jsCode);
            }
          } else {
            cmEditor == null ? void 0 : cmEditor.setValue(rule.jsCode !== "" ? rule.jsCode : ruleFunctions[0].source);
          }
          rule.content = value;
          showJsFunctionButton(rule.content);
          await this.plugin.saveSettings();
        }
      });
      ruleOptionsDiv.style.display = `${rule.content === "script" && rule.showContent ? "flex" : "none"}`;
    }).addButton(async (button) => {
      showFunctionButton = button;
      button.buttonEl.setAttribute("style", "width:30px");
      button.setIcon("square-function");
      button.setClass("obsidian-f2t-smallButton");
      button.setTooltip("show & edit code");
      button.onClick(async () => {
        rule.showContent = !rule.showContent;
        ruleOptionsDiv.style.display = `${rule.showContent ? "flex" : "none"}`;
      });
      showFunctionButton.buttonEl.style.display = "none";
    }).addButton(async (button) => {
      button.buttonEl.setAttribute("style", "width:30px");
      button.setIcon("square-minus");
      button.setClass("obsidian-f2t-smallButton");
      button.setTooltip("remove this rule");
      button.onClick(async () => {
        this.plugin.settings.rules.splice(this.plugin.settings.rules.findIndex((value) => value.id === ruleUUID));
        this.removeRule(rulesDiv);
        await this.plugin.saveSettings();
      });
    });
    showJsFunctionButton(rule.content);
    divEl.style.removeProperty("border-top");
  }
  removeRule(rulesDiv) {
    rulesDiv.remove();
  }
};

// main.ts
var FolderTagPlugin = class extends import_obsidian5.Plugin {
  //private oldFolderPaths = new Map<string, string | null>();
  async onload() {
    await this.loadSettings();
    this.tools = new ScriptingTools(this.settings);
    let noticeMessage = "Property Updater Tools\n loading ...";
    const loadingNotice = new import_obsidian5.Notice(noticeMessage, 0);
    noticeMessage = noticeMessage + "\n register events ...";
    loadingNotice.setMessage(noticeMessage);
    this.registerEvent(
      this.app.vault.on("create", (file) => {
        if (file instanceof import_obsidian5.TFile && file.extension === "md") {
          this.updateFrontmatterParameters(file, this.settings.rules);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", (file, oldPath) => {
        if (file instanceof import_obsidian5.TFile && file.extension === "md") {
          this.updateFrontmatterParameters(file, this.settings.rules, oldPath);
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", (leaf) => {
        if ((leaf == null ? void 0 : leaf.view) instanceof import_obsidian5.MarkdownView) {
          const previousFile = this.app.workspace.getActiveFile();
          console.log(`closing file: `, previousFile == null ? void 0 : previousFile.path);
          if (previousFile)
            this.updateFrontmatterParameters(previousFile, this.settings.rules);
        }
      })
    );
    noticeMessage = noticeMessage + "\n initial processing ...";
    loadingNotice.setMessage(noticeMessage);
    this.app.vault.getMarkdownFiles().forEach((file) => {
    });
    noticeMessage = noticeMessage + "\ndone!";
    loadingNotice.setMessage(noticeMessage);
    setTimeout(() => {
      loadingNotice.hide();
    }, 2e3);
    this.addSettingTab(new FolderTagSettingTab(this.app, this));
  }
  async loadSettings() {
    let data = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  formatTagName(name) {
    if (name === null)
      return null;
    if (name === void 0)
      return void 0;
    let formatted = name.replace(/\s+/g, this.settings.spaceReplacement);
    formatted = formatted.replace(/[^a-zA-Z0-9\-_\/äöüßÄÖÜáéíóúýÁÉÍÓÚÝàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛãñõÃÑÕ]/g, this.settings.specialCharReplacement);
    if (this.settings.lowercaseTags) {
      formatted = formatted.toLowerCase();
    }
    return formatted;
  }
  async updateFileTag(file, oldTagPath) {
    const newTagPath = this.getFolderPathForTag(file);
    const formattedNewPath = newTagPath ? this.formatTagName(newTagPath) : null;
    const newTag = formattedNewPath ? this.settings.tagPrefix + formattedNewPath : null;
    let oldTagToRemove;
    if (oldTagPath) {
      const formattedOldPath = this.formatTagName(oldTagPath);
      if (formattedOldPath) {
        oldTagToRemove = this.settings.tagPrefix + formattedOldPath;
      }
    }
    await this.updateFrontmatterTags(file, newTag, oldTagToRemove);
  }
  getFolderPathForTag(file) {
    const folder = file.parent;
    if (!folder || folder === this.app.vault.getRoot()) {
      return null;
    }
    let pathParts = [];
    let currentFolder = folder;
    while (currentFolder && currentFolder !== this.app.vault.getRoot()) {
      pathParts.unshift(currentFolder.name);
      currentFolder = currentFolder.parent;
    }
    if (this.settings.excludeRootFolder && pathParts.length > 0) {
      pathParts = pathParts.slice(1);
    }
    return pathParts.length > 0 ? pathParts.join("/") : null;
  }
  /**
   * Filters a given file and returns true if it is included in a folder or file list
   * @param file 
   * @param filterMode 'exclude'|'include'
   * @param type 'folders'|'files'
   * @returns 
   */
  filterFile(file, filterMode, type) {
    let result = false;
    const filterArray = type === "folders" ? this.settings[filterMode].selectedFolders : this.settings[filterMode].selectedFiles;
    if (filterArray.length === 0)
      return filterMode === "include" ? false : true;
    const filePath = file.path;
    const fileFolder = this.tools.getFoldersFromPath(file.path);
    const fileName = file.basename + "." + file.extension;
    if (type === "files") {
      result = filterArray.includes(filePath);
    }
    if (type === "folders") {
      filterArray.forEach((path) => {
        result = (fileFolder == null ? void 0 : fileFolder.startsWith(path.slice(1))) || false;
        if (result === true)
          return;
      });
    }
    ;
    return filterMode === "exclude" ? !result : result;
  }
  checkIfFileAllowed(file) {
    let result = false;
    if (this.settings.include.selectedFiles.length > 0) {
      result = this.filterFile(file, "include", "files");
      if (result === true)
        return result;
    }
    if (this.settings.include.selectedFolders.length > 0) {
      result = this.filterFile(file, "include", "folders");
      if (result === true)
        return result;
    }
    result = true;
    if (this.settings.exclude.selectedFiles.length > 0) {
      result = this.filterFile(file, "exclude", "files");
      if (result === false)
        return result;
    }
    if (this.settings.exclude.selectedFolders.length > 0) {
      result = this.filterFile(file, "exclude", "folders");
      if (result === false)
        return result;
    }
    return result;
  }
  formatValue(value, type) {
    switch (type) {
      case "text":
      case "tags":
      case "aliases":
      case "multitext":
        return this.tools.toYamlSafeString(value);
      case "date":
      case "datetime":
        if (typeof value === "number") {
          return new Date(value).toISOString();
        }
        return value.toString();
      case "checkbox":
        return value ? "true" : "false";
      case "number":
        return Number(value);
      default:
        return this.tools.toYamlSafeString(value);
    }
  }
  async updateFrontmatterParameters(file, rules, oldPath) {
    if (!this.checkIfFileAllowed(file)) {
      console.log(`file ${file.path} rejected!`);
      return;
    }
    const currentPathTag = this.formatTagName(this.tools.getFoldersFromPath(file.path));
    const oldPathTag = this.formatTagName(this.tools.getFoldersFromPath(oldPath));
    if (oldPathTag)
      console.log(`update file: "${oldPathTag}" to "${currentPathTag}"`);
    let content = await this.app.vault.read(file);
    const cache = this.app.metadataCache.getFileCache(file);
    const frontmatter = (cache == null ? void 0 : cache.frontmatter) || {};
    let fxResult;
    const parameterTypes = {};
    rules.forEach((rule) => {
      if (rule.content === "script") {
        const ruleFunction = parseJSCode(rule.jsCode);
        if (typeof ruleFunction !== "function")
          return;
        fxResult = ruleFunction(this.app, file, this.tools);
      } else {
        const functionIndex = ruleFunctions.findIndex((fx) => fx.id === rule.content);
        if (functionIndex !== -1) {
          fxResult = ruleFunctions[functionIndex].fx(this.app, file, this.tools);
        }
      }
      frontmatter[rule.content] = fxResult;
      parameterTypes[rule.property] = rule.type;
    });
    if (!frontmatter.hasOwnProperty("tags"))
      frontmatter.tags = [];
    if (frontmatter.tags === null)
      frontmatter.tags = [];
    if (oldPath) {
      if (frontmatter.tags.includes(oldPathTag)) {
        let index = frontmatter.tags.indexOf(oldPathTag);
        if (currentPathTag !== "") {
          frontmatter.tags.splice(frontmatter.tags.indexOf(oldPathTag), 1, currentPathTag);
        } else {
          frontmatter.tags.splice(frontmatter.tags.indexOf(oldPathTag), 1);
        }
        console.log(`replace Tag "${oldPathTag}" by "${currentPathTag}"`);
      } else {
        if (currentPathTag !== "")
          frontmatter.tags.push(currentPathTag);
        console.log(`add Tag "${currentPathTag}" can't find "${oldPathTag}"`);
      }
    } else {
      if (currentPathTag !== "") {
        if (frontmatter.tags.indexOf(currentPathTag) < 0) {
          frontmatter.tags.push(currentPathTag);
          console.log(`add Tag "${currentPathTag}"`);
        }
      }
    }
    let newFrontmatter = "---\n";
    Object.keys(frontmatter).forEach((key) => {
      if (typeof frontmatter[key] === "object") {
        if (Array.isArray(frontmatter[key])) {
          newFrontmatter += `${this.tools.toYamlSafeString(key)}:
`;
          for (let item of frontmatter[key]) {
            newFrontmatter += `  - ${this.formatValue(item, parameterTypes[key])}
`;
          }
        } else {
          console.error("Can't write objects to YAML", key, frontmatter[key]);
        }
      } else {
        newFrontmatter += `${this.tools.toYamlSafeString(key)}: ${this.formatValue(frontmatter[key], parameterTypes[key])}
`;
      }
    });
    newFrontmatter += "---\n";
    let endOfFrontmatter = content.indexOf("---\n", 3);
    content = newFrontmatter + content.slice(endOfFrontmatter + 4);
    await this.app.vault.modify(file, content);
  }
  async updateFrontmatterTags(file, newTag, oldTagToRemove) {
    let content = await this.app.vault.read(file);
    const cache = this.app.metadataCache.getFileCache(file);
    const frontmatter = cache == null ? void 0 : cache.frontmatter;
    let existingTags = [];
    if (frontmatter && frontmatter[this.settings.tagsPropertyName]) {
      const tagsValue = frontmatter[this.settings.tagsPropertyName];
      if (Array.isArray(tagsValue)) {
        existingTags = tagsValue.filter((tag) => tag != null).map((tag) => String(tag));
      } else if (typeof tagsValue === "string") {
        existingTags = tagsValue.split(/,\s*/).map((tag) => tag.trim()).filter((tag) => tag.length > 0);
      }
    }
    existingTags = existingTags.filter((tag) => {
      if (tag == null)
        return false;
      if (!tag.startsWith(this.settings.tagPrefix))
        return true;
      const tagWithoutPrefix = tag.slice(this.settings.tagPrefix.length);
      return !tagWithoutPrefix.includes("/");
    });
    if (oldTagToRemove) {
      existingTags = existingTags.filter((tag) => tag !== oldTagToRemove);
    }
    if (newTag && !existingTags.includes(newTag)) {
      existingTags.push(newTag);
    }
    let newFrontmatter = {};
    if (frontmatter) {
      newFrontmatter = { ...frontmatter };
      delete newFrontmatter[this.settings.tagsPropertyName];
    }
    let newContent = "";
    if (content.startsWith("---")) {
      const frontmatterEnd = content.indexOf("---", 3) + 3;
      const bodyContent = content.slice(frontmatterEnd);
      let frontmatterContent = Object.entries(newFrontmatter).map(([key, value]) => `${key}: ${value}`).join("\n");
      if (existingTags.length > 0) {
        frontmatterContent += `
${this.settings.tagsPropertyName}:
` + existingTags.map((tag) => `  - ${tag}`).join("\n");
      }
      newContent = `---
${frontmatterContent}
---${bodyContent}`;
    } else {
      if (existingTags.length > 0) {
        newContent = `---
${this.settings.tagsPropertyName}:
` + existingTags.map((tag) => `  - ${tag}`).join("\n") + `
---

${content}`;
      } else {
        return;
      }
    }
    await this.app.vault.modify(file, newContent);
  }
};
//# sourceMappingURL=data:application/json;base64,
