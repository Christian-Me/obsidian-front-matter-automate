/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FolderTagPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian26 = require("obsidian");

// src/settings.ts
var import_obsidian10 = require("obsidian");

// src/frontmatter-tools.ts
var import_obsidian2 = require("obsidian");

// src/Log.ts
var import_obsidian = require("obsidian");

// src/Error.ts
var ErrorManager = class extends Error {
  constructor(msg, console_msg) {
    super(msg);
    this.console_msg = console_msg;
    this.name = this.constructor.name;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }
};
function errorWrapperSync(fn2, msg) {
  try {
    return fn2();
  } catch (e) {
    if (e instanceof Error) {
      logError(new ErrorManager(msg, e.message));
    } else {
      logError(new ErrorManager(msg, String(e)));
    }
    return null;
  }
}

// src/Log.ts
var LOG = 0;
var ALERT = 1;
var ERROR = 2;
var WARNING = 3;
var INFO = 4;
var DEBUG = 5;
var TRACE = 6;
function logError(e) {
  const notice = new import_obsidian.Notice("", 8e3);
  if (e instanceof ErrorManager && e.console_msg) {
    notice.messageEl.innerHTML = `<b>Frontmatter Automate Error</b>:<br/>${e.message}<br/>Check console for more information`;
    console.error(`Frontmatter Error:`, e.message, "\n", e.console_msg);
  } else {
    notice.messageEl.innerHTML = `<b>Frontmatter Automate Error</b>:<br/>${e.message}`;
  }
}
var Logger = class {
  constructor() {
    this.logLevel = INFO;
  }
  setLevel(level) {
    if (typeof level === "number") {
      this.logLevel = level;
      this.log(LOG, `Log level set to ${this.getLevelName(this.logLevel)}`);
    } else {
      const levelName = level.toUpperCase();
      const levelIndex = this.getLevelNames().indexOf(levelName) + 1;
      if (levelIndex >= 0) {
        this.setLevel(levelIndex);
      } else {
        this.log(WARNING, `Invalid log level name: ${levelName}`);
      }
    }
  }
  getLevel() {
    return this.logLevel;
  }
  getLevelByName(levelName) {
    const levelIndex = this.getLevelNames().indexOf(levelName.toUpperCase()) + 1;
    if (levelIndex >= 0) {
      return levelIndex;
    } else {
      this.log(WARNING, `Invalid log level name: ${levelName}`);
      return INFO;
    }
  }
  getLevelByIndex(levelIndex) {
    if (levelIndex >= ALERT && levelIndex <= TRACE) {
      return levelIndex;
    } else {
      this.log(WARNING, `Invalid log level index: ${levelIndex}`);
      return INFO;
    }
  }
  getLevelByValue(levelValue) {
    if (levelValue >= ALERT && levelValue <= TRACE) {
      return levelValue;
    } else {
      this.log(WARNING, `Invalid log level value: ${levelValue}`);
      return INFO;
    }
  }
  shouldLog(level) {
    if (level === 0)
      return true;
    return level <= this.logLevel;
  }
  getLevelName(level) {
    switch (level) {
      case ALERT:
        return "ALERT";
      case ERROR:
        return "ERROR";
      case WARNING:
        return "WARNING";
      case INFO:
        return "INFO";
      case DEBUG:
        return "DEBUG";
      case TRACE:
        return "TRACE";
      default:
        return "LOG";
    }
  }
  getLevelNames() {
    return [ALERT, ERROR, WARNING, INFO, DEBUG, TRACE].map((level) => this.getLevelName(level));
  }
  log(level, ...msg) {
    if (!this.shouldLog(level))
      return;
    const levelName = this.getLevelName(level);
    let color = "";
    switch (level) {
      case ALERT:
        color = "background: #d32f2f; color: white; font-weight: bold";
        break;
      case ERROR:
        color = "color: #d32f2f; font-weight: bold";
        break;
      case WARNING:
        color = "color: #fbc02d; font-weight: bold";
        break;
      case INFO:
        color = "color: #1976d2; font-weight: bold";
        break;
      case DEBUG:
        color = "color: #388e3c;";
        break;
      case TRACE:
        color = "color: #616161;";
        break;
      default:
        color = "";
        break;
    }
    const prefix = `%c[${levelName}]`;
    const err = new Error();
    let caller = "";
    if (err.stack) {
      const stackLines = err.stack.split("\n");
      if (stackLines.length >= 3) {
        caller = stackLines[2].trim();
      }
    }
    switch (level) {
      case ALERT:
      case ERROR:
        console.groupCollapsed(prefix, color, ...msg);
        console.log("Caller Stack:", err);
        console.groupEnd();
        break;
      case WARNING:
        console.groupCollapsed(prefix, color, ...msg);
        console.log("Caller Stack:", err);
        console.groupEnd();
        break;
      case INFO:
        console.info(prefix, color, ...msg);
        break;
      case DEBUG:
      case TRACE:
      default:
        console.groupCollapsed(prefix, color, ...msg);
        console.log("Caller Stack:", err);
        console.groupEnd();
        break;
    }
    if (level === ALERT || level === ERROR) {
      new import_obsidian.Notice(`<b>Frontmatter Automate ${levelName}</b>:<br/>${msg.join(" ")}`, 8e3);
    }
  }
  groupCollapsed(level, ...msg) {
    if (!this.shouldLog(level))
      return;
    const levelName = this.getLevelName(level);
    let color = "";
    switch (level) {
      case ALERT:
        color = "background: #d32f2f; color: white; font-weight: bold";
        break;
      case ERROR:
        color = "color: #d32f2f; font-weight: bold";
        break;
      case WARNING:
        color = "color: #fbc02d; font-weight: bold";
        break;
      case INFO:
        color = "color: #1976d2; font-weight: bold";
        break;
      case DEBUG:
        color = "color: #388e3c;";
        break;
      case TRACE:
        color = "color: #616161;";
        break;
      default:
        color = "";
        break;
    }
    const prefix = `%c[${levelName}]`;
    console.groupCollapsed(prefix, color, ...msg);
  }
  groupEnd() {
    console.groupEnd();
  }
  logUpdate(msg) {
    new import_obsidian.Notice(`<b>Frontmatter Automate update</b>:<br/>${msg}`, 15e3);
  }
  logError(e) {
    const notice = new import_obsidian.Notice("", 8e3);
    if (e instanceof ErrorManager && e.console_msg) {
      notice.messageEl.innerHTML = `<b>Frontmatter Automate Error</b>:<br/>${e.message}<br/>Check console for more information`;
      logger.log(ERROR, `Frontmatter Error:`, e.message, "\n", e.console_msg);
    } else {
      notice.messageEl.innerHTML = `<b>Frontmatter Automate Error</b>:<br/>${e.message}`;
    }
  }
};
var logger = new Logger();

// src/frontmatter-tools.ts
function getPropertiesFromMetadataManager(app) {
  try {
    const metadataManager = app.metadataTypeManager;
    logger.log(DEBUG, "get properties:", metadataManager);
    return Object.values(metadataManager.properties).map((value) => ({
      name: value.name,
      type: value.type,
      count: value.count,
      source: "registered"
    })).sort((a, b) => a.name.localeCompare(b.name));
  } catch (e) {
    logger.log(ERROR, "Couldn't access properties from Metadata Manager", e);
    return [];
  }
}
function getTypesFromMetadataManager(app) {
  try {
    const metadataManager = app.metadataTypeManager;
    logger.log(DEBUG, "get types:", metadataManager);
    return Object.values(metadataManager.registeredTypeWidgets).map((value, index, array) => ({
      type: value.type,
      icon: value.icon,
      jsType: ""
    })).sort((a, b) => a.type.localeCompare(b.type));
  } catch (e) {
    logger.log(ERROR, "Couldn't access properties from Metadata Manager", e);
    return [];
  }
}

// src/tools.ts
var import_obsidian4 = require("obsidian");

// src/alertBox.ts
var import_obsidian3 = require("obsidian");
var AlertModal = class extends import_obsidian3.Modal {
  constructor(app, title, description, btn1, btn2, askAgainLabel) {
    super(app);
    this.title = title;
    this.description = description;
    this.btn1Text = btn1;
    this.btn2Text = btn2;
    this.askAgainLabel = askAgainLabel;
    this.promise = new Promise((resolve) => {
      this.resolvePromise = resolve;
    });
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.title });
    contentEl.createEl("p", { text: this.description });
    const settings = new import_obsidian3.Setting(contentEl);
    if (this.askAgainLabel) {
      const itemInfoDiv = settings.settingEl.getElementsByClassName("setting-item-info")[0];
      if (itemInfoDiv) {
        this.checkboxEl = itemInfoDiv.createEl("input", { type: "checkbox" });
        const label = itemInfoDiv.createEl("label", { text: this.askAgainLabel });
        label.style.marginLeft = "8px";
      }
    }
    settings.addButton((btn) => {
      btn.setButtonText(this.btn1Text).setCta().onClick(() => {
        var _a;
        this.close();
        this.resolvePromise({ proceed: true, data: { askConfirmation: (_a = this.checkboxEl) == null ? void 0 : _a.checked } });
      });
    });
    settings.addButton((btn) => {
      btn.setButtonText(this.btn2Text).onClick(() => {
        var _a;
        this.close();
        this.resolvePromise({ proceed: false, data: { askConfirmation: (_a = this.checkboxEl) == null ? void 0 : _a.checked } });
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  async openAndGetValue() {
    this.open();
    return this.promise;
  }
};

// src/rules/rules.ts
var RulePrototype = class {
  constructor(app, plugin) {
    this.rulesConfigDiv = void 0;
    this.ruleType = "buildIn";
    this.isLiveRule = false;
    // If true, the rule is a live rule and will be executed on file change
    this.type = ["text"];
    // Types that are supported by this rule
    this.configElements = {};
    // Elements that are used to configure the rule
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = ''\n  return result;\n}";
    this.scriptingTools = new ScriptingTools(app, plugin);
  }
  getSource() {
    return this.source;
  }
  fx(app, file, tools, input) {
    if (input === void 0 || input === null)
      input = tools.getCurrentContent();
    return input;
  }
  /**
   * Configures the settings tab for a specific rule in the plugin.
   *
   * @param optionEL - The HTML element where the configuration options will be rendered.
   * @param rule - The settings object for the frontmatter automation rule.
   * @param that - The context or reference to the calling object.
   * @param previewComponent - The component used to render a preview of the rule's effect.
   */
  configTab(optionEL, rule, that, previewComponent) {
    optionEL.empty();
  }
  defaultConfigElements(modifiers) {
    const configElements = {
      removeContent: true,
      ruleActive: true,
      modifyOnly: true,
      inputProperty: false,
      addPrefix: true,
      spaceReplacement: true,
      specialCharacterReplacement: true,
      convertToLowerCase: true,
      resultAsLink: true,
      addContent: true,
      excludeFolders: true,
      includeFolders: true,
      script: true
    };
    return Object.assign({}, configElements, modifiers);
  }
  /**
   * Checks if a specific rule option is enabled.
   *
   * @param {string} option - The name of the rule option to check.
   * @returns {boolean} - Returns true if the option is enabled, false otherwise.
   */
  useRuleOption(option) {
    if (this.configElements[option] === void 0) {
      return false;
    }
    return this.configElements[option] || false;
  }
  /**
   * Checks if the rule has any configuration options.
   *
   * @returns {boolean} - Returns true if the rule has options, false otherwise.
   */
  hasOwnConfigTab() {
    return Object.getPrototypeOf(this).configTab !== RulePrototype.prototype.configTab;
  }
  /**
   * Executes the `fx` function based on the `ruleType`.
   * Handles different function signatures dynamically.
   * 
   * @param {App} app - The Obsidian app instance.
   * @param {any} file - The file to pass to the rule's `fx` function.
   * @param {ScriptingTools} tools - The scripting tools to pass to the rule's `fx` function.
   * @param {any} [input] - Optional input for rules that require it (e.g., `buildIn.inputProperty`).
   * @returns {string} - The result of the `fx` function.
  */
  execute(app, file, tools, input) {
    switch (this.ruleType) {
      case "formatter":
      case "linkFormatter":
        return this.fx(app, file, tools, input);
      case "buildIn.inputProperty":
        return this.fx(app, file, tools, input);
      case "autocomplete.modal":
      case "automation":
        let result = "";
        this.fx(app, file, tools).then((res) => {
          result = res;
        }).catch((err) => {
          logger.log(ERROR, `Error executing async automation rule: ${err}`);
        });
        return result;
      default:
        return this.fx(app, file, tools);
    }
  }
};
var Rules = class {
  constructor(app, plugin) {
    this.app = void 0;
    this.plugin = void 0;
    this.tools = void 0;
    this.plugin = plugin;
    this.app = app;
    this.tools = void 0;
    this.rules = [];
  }
  init(app, plugin, tools) {
    this.app = app;
    this.plugin = plugin;
    this.tools = tools;
  }
  /**
   * Registers a new rule by adding it to the list of existing rules.
   *
   * @param rule - The rule prototype to be registered. This should conform to the `RulePrototype` interface.
   */
  registerRule(rule) {
    this.rules.push(rule);
  }
  /**
   * Retrieves a list of rules filtered by the specified rule type and property type.
   *
   * @param ruleType - The type of rule to filter by.
   * @param propertyType - The property type to filter by within the rule's type array.
   * @returns An array of objects containing the `id` and `name` of each matching rule, sorted alphabetically by name.
   */
  getRulesByType(ruleType, propertyType) {
    return this.rules.filter((rule) => rule.ruleType === ruleType && (!propertyType || rule.type.includes(propertyType))).map((rule) => ({ id: rule.id, name: rule.name })).sort((a, b) => a.name.localeCompare(b.name));
  }
  /**
   * Retrieves a rule object by its unique identifier.
   *
   * @param id - The unique identifier of the rule to retrieve.
   * @returns The rule object matching the provided ID, or `undefined` if no matching rule is found.
   * @throws Logs a warning to the console if the rule with the specified ID is not found.
   */
  getRuleById(id) {
    const ruleObject = this.rules.find((rule) => rule.id === id);
    if (!ruleObject) {
      logger.log(WARNING, `Rule with id "${id}" not found.`);
      return void 0;
    }
    return ruleObject;
  }
  /**
   * Retrieves the source code of a rule by its unique identifier.
   *
   * @param id - The unique identifier of the rule for which to retrieve the source code.
   * @returns The source code of the rule, or `undefined` if the rule is not found.
   */
  getSource(id) {
    const ruleObject = this.getRuleById(id);
    if (!ruleObject) {
      logger.log(WARNING, `Source for rule with id "${id}" not found.`);
      return void 0;
    }
    return ruleObject.getSource();
  }
  /**
   * Executes the `fx` function of a rule matching the given `id` and returns its result.
   * 
   * @param {string} id - The unique identifier of the rule to execute.
   * @param {App} app - The Obsidian app instance.
   * @param {any} file - The file to pass to the rule's `fx` function.
   * @param {ScriptingTools} tools - The scripting tools to pass to the rule's `fx` function.
   * @param {any} [input] - Optional input for rules that require it.
   * @returns {string | null} - The result of the `fx` function, or `null` if the rule is not found.
  */
  executeRuleById(id, ruleSettings, app, file, tools, input) {
    const rule = this.rules.find((rule2) => rule2.id === id);
    if (!rule) {
      logger.log(WARNING, `Rule with id "${id}" not found.`);
      return null;
    }
    return this.executeRule(ruleSettings, rule, app, file, tools, input);
  }
  /**
   * Executes the `fx` function of a given rule and returns its result.
   *
   * @param rule - The rule to execute.
   * @param app - The Obsidian app instance.
   * @param file - The file to pass to the rule's `fx` function.
   * @param tools - The scripting tools to pass to the rule's `fx` function.
   * @param input - Optional input for rules that require it.
   * @returns {string | null} - The result of the `fx` function, or `null` if the rule is not found.
   */
  executeRule(ruleSettings, rule, app, file, tools, input) {
    switch (rule.ruleType) {
      case "formatter":
      case "linkFormatter":
      case "buildIn.inputProperty":
        return rule.execute(app, file, tools, input);
      case "automation":
        return rule.execute(app, file, tools);
      default:
        if (ruleSettings.useCustomCode && ruleSettings.buildInCode && ruleSettings.buildInCode !== "") {
          const code = parseJSCode(ruleSettings.buildInCode);
          if (typeof code === "function") {
            return code(app, file, tools);
          } else {
            logger.log(ERROR, `Invalid custom code for rule "${ruleSettings.content}": ${ruleSettings.buildInCode}`);
            return `Invalid custom code for rule "${ruleSettings.id}"`;
          }
        } else {
          return rule.execute(app, file, tools, input);
        }
    }
  }
  applyFormatOptions(value, rule, activeFile, tools) {
    if (rule.type === "number" || rule.type === "checkbox" || rule.type === "date" || rule.type === "datetime")
      return value;
    switch (typeof value) {
      case "boolean":
      case "number":
        return value;
      case "string":
        if (rule.formatters && rule.formatters.length > 0) {
          rule.formatters.forEach((formatterId) => {
            value = this.executeRuleById(formatterId, rule, this.app, activeFile, tools, value);
          });
        }
        if (rule.linkFormatter && rule.linkFormatter !== "") {
          value = this.executeRuleById(rule.linkFormatter, rule, this.app, activeFile, tools, value);
        }
        return value;
      case "object":
        if (Array.isArray(value)) {
          return value.map((value2) => this.applyFormatOptions(value2, rule, activeFile, tools));
        }
        return value;
    }
    return;
  }
  mergeResult(result, oldResult, returnResult, rule) {
    if (!this.tools) {
      console.warn("Tools are not available for merging results.");
      return result;
    }
    switch (rule.addContent) {
      case "overwrite":
        returnResult = result;
        break;
      case "end":
        if (rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
          if (!result)
            result = [];
          if (typeof result === "string")
            result = [result];
          if (!Array.isArray(returnResult))
            returnResult = [returnResult];
          if (!Array.isArray(oldResult))
            oldResult = [oldResult];
          let filtered = returnResult.filter((value) => !oldResult.includes(value));
          returnResult = this.tools.removeDuplicateStrings(filtered.concat(result));
        } else {
          if (!returnResult)
            returnResult = "";
          returnResult = returnResult.replaceAll(returnResult, oldResult);
          returnResult = returnResult + result;
        }
        break;
      case "start":
        if (rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
          if (!result)
            result = [];
          if (typeof result === "string")
            result = [result];
          if (!Array.isArray(returnResult))
            returnResult = [returnResult];
          if (!Array.isArray(oldResult))
            oldResult = [oldResult];
          let filtered = returnResult.filter((value) => !oldResult.includes(value));
          returnResult = this.tools.removeDuplicateStrings(result.concat(filtered));
        } else {
          if (!returnResult)
            returnResult = "";
          returnResult = returnResult.replaceAll(returnResult, oldResult);
          returnResult = result + returnResult;
        }
        break;
    }
    return returnResult;
  }
  /**
   * Builds the configuration tab for a specific rule by its ID.
   *
   * @param id - The unique identifier of the rule for which the configuration tab is being built.
   * @param optionEL - The HTML element where the configuration tab will be rendered.
   * @param rule - The definition of the rule, containing its properties and settings.
   * @param that - A reference to the current context or object, typically used for maintaining scope.
   * @param previewComponent - A component used to render a preview of the rule's effect or configuration.
   *
   * @remarks
   * If a rule with the specified ID is found, its `configTab` method is invoked to build the configuration tab.
   * If no rule is found, a warning is logged to the console.
   */
  buildConfigTab(id, optionEL, rule, that, previewComponent) {
    const ruleInstance = this.rules.find((rule2) => rule2.id === id);
    if (ruleInstance) {
      ruleInstance.configTab(optionEL, rule, that, previewComponent);
    } else {
      console.warn(`Rule with id "${id}" not found for config tab.`);
    }
  }
};
var rulesManager = new Rules();

// src/tools.ts
function parseJSCode(jsCode) {
  function parseFunction(jsCode2) {
    try {
      jsCode2 = cleanCodeString(jsCode2);
      var funcReg = /function *\(([^()]*)\)[ \n\t]*{(.*)}/gmi;
      var match = funcReg.exec(jsCode2.replace(/\n/g, " "));
      if (!match)
        return void 0;
      var args = match[1].split(",");
      args.push(match[2]);
      return new Function(...args);
    } catch (error) {
      logger.log(ERROR, "error parsing JS function!", error);
      return error.message;
    }
  }
  ;
  return parseFunction(jsCode);
}
function cleanCodeString(codeString) {
  if (typeof codeString !== "string") {
    throw new TypeError("Input must be a string.");
  }
  let inMultiLineComment = false;
  let inSingleLineComment = false;
  let inString = null;
  let inRegExp = false;
  let cleanedCode = "";
  let i = 0;
  while (i < codeString.length) {
    const char = codeString[i];
    const nextChar = codeString[i + 1];
    if (inMultiLineComment) {
      if (char === "*" && nextChar === "/") {
        inMultiLineComment = false;
        i += 2;
        continue;
      } else {
        i++;
        continue;
      }
    }
    if (inSingleLineComment) {
      if (char === "\n" || char === "\r") {
        inSingleLineComment = false;
        cleanedCode += char;
        i++;
        continue;
      } else {
        i++;
        continue;
      }
    }
    if (inString) {
      if (char === inString) {
        inString = null;
      } else if (char === "\\") {
        cleanedCode += char;
        i++;
        if (i < codeString.length) {
          cleanedCode += codeString[i];
        }
        i++;
        continue;
      }
      cleanedCode += char;
      i++;
      continue;
    }
    if (inRegExp) {
      if (char === "/") {
        inRegExp = false;
      } else if (char === "\\") {
        cleanedCode += char;
        i++;
        if (i < codeString.length) {
          cleanedCode += codeString[i];
        }
        i++;
        continue;
      }
      cleanedCode += char;
      i++;
      continue;
    }
    if (char === "/" && nextChar === "*") {
      inMultiLineComment = true;
      i += 2;
      continue;
    }
    if (char === "/" && nextChar === "/") {
      inSingleLineComment = true;
      i += 2;
      continue;
    }
    if (char === '"' || char === "'") {
      inString = char;
      cleanedCode += char;
      i++;
      continue;
    }
    if (char === "/") {
      const prevMeaningfulChar = cleanedCode.trim().slice(-1);
      if (prevMeaningfulChar === "" || ["(", ",", "=", ":", "[", "!", "&", "|", "?", "{", ";", "\n", "\r"].includes(prevMeaningfulChar)) {
        inRegExp = true;
        cleanedCode += char;
        i++;
        continue;
      }
    }
    cleanedCode += char;
    i++;
  }
  return cleanedCode;
}
function resolveFolder(app, folder_str) {
  folder_str = (0, import_obsidian4.normalizePath)(folder_str);
  const folder = app.vault.getAbstractFileByPath(folder_str);
  if (!folder) {
    throw new ErrorManager(`Folder "${folder_str}" doesn't exist`);
  }
  if (!(folder instanceof import_obsidian4.TFolder)) {
    throw new ErrorManager(`${folder_str} is a file, not a folder`);
  }
  return folder;
}
function getFilesFromFolder(app, folder_str) {
  const folder = resolveFolder(app, folder_str);
  const files = [];
  import_obsidian4.Vault.recurseChildren(folder, (file) => {
    if (file instanceof import_obsidian4.TFile) {
      files.push(file);
    }
  });
  files.sort((a, b) => {
    return a.path.localeCompare(b.path);
  });
  return files;
}
var ScriptingTools = class {
  constructor(app, plugin, settings, rule, frontmatter, activeFile) {
    this.knownProperties = {};
    this.app = app;
    this.plugin = plugin;
    this.settings = settings;
    this.rule = rule;
    this.frontmatter = frontmatter;
    this.activeFile = activeFile;
  }
  /**
   * Retrieves the frontmatter object associated with the current instance.
   *
   * @returns The frontmatter data.
   */
  getFrontmatter() {
    return this.frontmatter;
  }
  /**
   * Sets the frontmatter property for the current instance.
   *
   * @param frontmatter - The frontmatter object to assign.
   */
  setFrontmatter(frontmatter) {
    this.frontmatter = frontmatter;
  }
  /**
   * Sets a property in the frontmatter object. If the frontmatter does not exist, it initializes it as an empty object.
   *
   * @param key - The property name to set in the frontmatter.
   * @param value - The value to assign to the specified property.
   */
  setFrontmatterProperty(key, value) {
    if (!this.frontmatter)
      this.frontmatter = {};
    this.frontmatter[key] = value;
  }
  /**
   * Retrieves the value of a specified property from the frontmatter object.
   *
   * @param key - The name of the property to retrieve from the frontmatter.
   * @returns The value associated with the specified key in the frontmatter, or `undefined` if the key does not exist.
   */
  getFrontmatterProperty(key) {
    return this.frontmatter[key];
  }
  /**
   * Sets the currently active file.
   *
   * @param file - The file to set as active. Must be an instance of `TFile`.
   */
  setActiveFile(file) {
    this.activeFile = file;
  }
  /**
   * Returns the currently active file.
   *
   * @returns The active file object, or `undefined` if no file is active.
   */
  getActiveFile() {
    return this.activeFile;
  }
  /**
   * Sets the current rule configuration for the frontmatter automation.
   *
   * @param rule - The rule settings to apply, represented by a `FrontmatterAutomateRuleSettings` object.
   */
  setRule(rule) {
    this.rule = rule;
  }
  /**
   * Retrieves the current rule associated with this instance.
   *
   * @returns The rule object or value stored in the `rule` property.
   */
  getRule() {
    return this.rule;
  }
  /**
   * Retrieves a rule function based on the provided rule settings.
   *
   * @param rule - Optional. The rule settings to use for retrieving the rule function.
   *               If not provided, the method uses the instance's default rule.
   * @returns The rule function associated with the specified rule settings, or `undefined` if no rule is found.
   */
  getRuleFunction(rule) {
    if (!rule)
      rule = this.rule;
    if (rule) {
      return rulesManager.getRuleById(rule.content);
    }
  }
  /**
   * Sets the current content to the provided value.
   *
   * @param content - The content to set as the current content. Can be of any type.
   */
  setCurrentContent(content) {
    this.currentContent = content;
  }
  /**
   * Retrieves the current content stored in the instance.
   *
   * @returns The current content.
   */
  getCurrentContent() {
    return this.currentContent;
  }
  /**
   * Updates the specified frontmatter property of a given file with new content.
   *
   * If no file is provided, the currently active file is used. If neither is available, the method returns early.
   * The method logs the update operation and only supports updating properties with primitive values or arrays.
   * If `newContent` is an object (but not an array), a warning is issued and the update is not performed.
   * The file's modification time (`mtime`) is preserved and not changed during the update.
   *
   * @param property - The frontmatter property to update.
   * @param newContent - The new value to assign to the property. Objects (except arrays) are not supported.
   * @param file - (Optional) The file whose frontmatter should be updated. If omitted, the active file is used.
   */
  updateFrontmatter(property, newContent, file) {
    if (!this.app)
      return;
    if (!file)
      file = this.activeFile;
    if (!file)
      return;
    this.app.fileManager.processFrontMatter(file, (frontmatter) => {
      logger.log(DEBUG, `updateFrontmatter '${file.path}' frontmatter '${property}' to '${newContent.toString()}'`);
      if (typeof newContent === "object" && !Array.isArray(newContent)) {
        logger.log(WARNING, `updateFrontmatter '${file.path}'|'${property}' object not supported!`);
      } else {
        frontmatter[property] = newContent;
      }
    }, { "mtime": file.stat.mtime });
  }
  /**
   * Displays a confirmation dialog with customizable message, title, and button labels.
   *
   * @param message - The message to display in the confirmation dialog.
   * @param title - The title of the dialog window. Defaults to 'Confirm'.
   * @param button1 - The label for the confirmation button. Defaults to 'Yes'.
   * @param button2 - The label for the cancellation button. Defaults to 'No'.
   * @returns A promise that resolves to a boolean indicating whether the user confirmed (true) or cancelled (false).
   */
  async showConfirmDialog(message, title = "Confirm", button1 = "Yes", button2 = "No") {
    const result = await new AlertModal(this.app, title, message, button1, button2).openAndGetValue();
    return result.proceed;
  }
  /**
   * * Get the option config for a specific rule. Optional the specific parameter by providing an option ID.
   *
   * @param {string} ruleId
   * @param {string} [optionId]
   * @return {*} 
   */
  getOptionConfig(ruleId, optionId) {
    if (!ruleId || ruleId === void 0 || !this.settings)
      return void 0;
    const rule = this.settings.rules.find((rule2) => rule2.id === ruleId);
    if (rule && rule.hasOwnProperty("optionsConfig")) {
      const optionConfig = rule.optionsConfig[ruleId];
      if (optionConfig) {
        if (optionId) {
          return optionConfig[optionId];
        } else {
          return optionConfig;
        }
      }
    }
    return void 0;
  }
  /**
   * Retrieves all markdown files in the vault whose paths include the specified matching string.
   *
   * The `matching` parameter is normalized to ensure it ends with a single '/' character,
   * and is used to filter files whose paths contain this substring.
   *
   * @param folderPath - The folder path or substring to match within file paths.
   * @returns An array of `TFile` objects whose paths include the normalized `matching` string.
   */
  getFilesInVault(folderPath) {
    folderPath = folderPath.replace(/^\/|\/$/g, "") + "/";
    const files = this.app.vault.getMarkdownFiles();
    const matchingFiles = files.filter((file) => file instanceof import_obsidian4.TFile && file.path.includes(folderPath));
    return matchingFiles;
  }
  /**
   * Creates a mock `TFile` object from a given file path string.
   *
   * This method parses the provided path to construct a `TFile`-like object,
   * extracting the file name, extension, and base name. The returned object
   * contains placeholder values for file statistics and parent, as these details
   * are unknown. If the input path is empty or undefined, the method returns `undefined`.
   *
   * @param path - The file path string to generate the mock `TFile` from.
   * @returns A mock `TFile` object representing the file at the given path, or `undefined` if the path is invalid.
   */
  getMockFileFromPath(path) {
    if (!path)
      return void 0;
    let oldFile;
    let oldFileParts = path.split("/");
    oldFile = {
      path,
      extension: oldFileParts[oldFileParts.length - 1].split(".")[1],
      name: oldFileParts[oldFileParts.length - 1],
      stat: { mtime: 0, ctime: 0, size: 0 },
      // stats are unknown
      basename: this.removeAllExtensions(oldFileParts[oldFileParts.length - 1]),
      vault: this.app.vault,
      parent: null
      // parent is unknown
    };
    return oldFile;
  }
  /**
   * Retrieves a `TFile` object from a given file path.
   *
   * @param path - The file path to search for. If `undefined`, the function returns `undefined`.
   * @param filesCheck - An optional array of `TFile` objects to search within. If not provided, all markdown files in the vault are used.
   * @returns The matching `TFile` if found; otherwise, `undefined`.
   */
  getTFileFromPath(path, filesCheck = void 0) {
    if (!path)
      return void 0;
    const files = filesCheck ? filesCheck : this.app.vault.getMarkdownFiles();
    const matchingFiles = files.filter(
      (file) => file instanceof import_obsidian4.TFile && file.path.toLocaleLowerCase() === path.toLocaleLowerCase()
    );
    return matchingFiles.length > 0 ? matchingFiles[0] : void 0;
  }
  /**
   * Creates a new file at the specified path using the content from a template file.
   * If the file already exists, returns the existing file instead of creating a new one.
   *
   * @param fileNameWithPath - The full path (including file name) where the new file should be created.
   * @param templateFileWithPath - The full path to the template file whose content will be used.
   * @returns A promise that resolves to the newly created file or the existing file if it already exists.
   * @throws {ErrorManager} If the folder path is invalid, does not exist, or is not a folder.
   */
  async createFileFromPath(fileNameWithPath, templateFileWithPath) {
    const fileName = fileNameWithPath.replace(/^\/|\/$/g, "");
    const templateFile = templateFileWithPath.replace(/^\/|\/$/g, "");
    const folderPath = this.getFolderFromPath(fileName);
    const fileNameOnly = fileName.split("/").pop() || fileName;
    if (!folderPath) {
      throw new ErrorManager(`Invalid folder path: "${folderPath}"`);
    }
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    if (!folder) {
      throw new ErrorManager(`Folder "${folderPath}" doesn't exist`);
    }
    if (!(folder instanceof import_obsidian4.TFolder)) {
      throw new ErrorManager(`${folderPath} is a file, not a folder`);
    }
    const templateContent = await this.app.vault.read(this.app.vault.getAbstractFileByPath(templateFile));
    const fileExists = this.app.vault.getAbstractFileByPath(fileNameWithPath);
    if (!fileExists) {
      return await this.app.vault.create(folder.path + "/" + fileNameOnly, templateContent);
    }
    return fileExists;
  }
  // create the file if it does not exist
  /**
   * * Fetches custom property information from all markdown files in the vault.
   *
   * @return {*} 
   */
  fetchCustomPropertyInfos(app) {
    const propertyInfos = {};
    const files = app.vault.getMarkdownFiles();
    files.forEach((file) => {
      const metadata = app.metadataCache.getFileCache(file);
      if (metadata == null ? void 0 : metadata.frontmatter) {
        Object.keys(metadata.frontmatter).forEach((key) => {
          if (!propertyInfos[key]) {
            propertyInfos[key] = { name: key, type: "text" };
          }
        });
      }
    });
    return propertyInfos;
  }
  /**
   * Fetches known properties from the metadata cache.
   * If the method getAllPropertyInfos is not available, it falls back to fetchCustomPropertyInfos.
   * @param app The Obsidian app instance.
   */
  async fetchKnownProperties(app) {
    let propertyInfos = {};
    if (typeof app.metadataCache.getAllPropertyInfos === "function") {
      propertyInfos = app.metadataCache.getAllPropertyInfos();
    } else {
      propertyInfos = this.fetchCustomPropertyInfos(app);
    }
    propertyInfos = Object.fromEntries(
      Object.entries(propertyInfos).sort(([keyA], [keyB]) => keyA.localeCompare(keyB))
    );
    this.knownProperties = {};
    Object.keys(propertyInfos).forEach((key) => {
      this.knownProperties[propertyInfos[key].name] = propertyInfos[key];
    });
    logger.log(DEBUG, this.knownProperties);
    return this.knownProperties;
  }
  /**
   * Retrieves the known properties, initializing them if they have not been loaded yet.
   * If the properties are not already cached, this method fetches them using `fetchCustomPropertyInfos`
   * and stores them for future access.
   *
   * @returns The cached or newly fetched known properties.
   */
  getKnownProperties() {
    if (!this.knownProperties) {
      this.knownProperties = this.fetchCustomPropertyInfos(this.app);
    }
    return this.knownProperties;
  }
  /**
   * Extracts the path and title from a given link string.
   *
   * The input link is expected to be in the format `[[path|title]]` or `[[path]]`.
   * This function removes square brackets, splits the link by the `|` character,
   * and determines the path and title. If the title is not provided, the path is
   * used as the title.
   *
   * @param link - The link string to extract parts from, typically in the format `[[path|title]]` or `[[path]]`.
   * @returns An object containing the `path` and `title` extracted from the link.
   */
  extractLinkParts(link) {
    const cleanedLink = link.replace(/[\[\]]/g, "");
    const parts = cleanedLink.split("|");
    const path = parts[0].trim();
    const title = parts.length > 1 ? parts[1].trim() : path;
    return { path, title };
  }
  /**
   * Extracts the path, title, and file name from a given file link string.
   *
   * Splits the input string by the "/" character to separate the file name from its path.
   * The title is derived from the file name by removing all extensions and trimming whitespace.
   *
   * @param link - The file link string to extract parts from.
   * @returns An object containing:
   *   - `path`: The directory path portion of the link (excluding the file name).
   *   - `title`: The file name without extensions and trimmed.
   *   - `fileName`: The full file name (with extensions, if any).
   */
  extractPathParts(link) {
    const parts = link.split("/");
    const fileName = parts.pop() || "";
    const title = this.removeAllExtensions(fileName).trim();
    const path = parts.join("/").trim();
    return { path, title, fileName };
  }
  /**
   * Removes one or more leading slashes from the beginning of the given path string.
   *
   * @param path - The input string from which to remove leading slashes.
   * @returns The input string without any leading slashes.
   */
  removeLeadingSlash(path) {
    return path.replace(/^\/+/, "");
  }
  /**
   * Ensures that the given path string starts with a leading slash ('/').
   * If the path already begins with a slash, it is returned unchanged.
   *
   * @param path - The input path string to modify.
   * @returns The path string guaranteed to start with a leading slash.
   */
  addLeadingSlash(path) {
    return path.replace(/^(?!\/)/, "/");
  }
  /**
   * Check if a string complies with ISO Standard
   * 
   * @param str Any string
   * @param options Options to look for
   * @returns 
   */
  isISOString(str, options = {}) {
    const {
      withMilliseconds = false,
      withTimezone = false,
      withTime = true,
      withDate = true
    } = options;
    let dateRegexStr = "^(?:\\d{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12]\\d|3[01]))";
    let timeRegexStr = "(?:T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";
    if (withMilliseconds) {
      timeRegexStr += "\\.\\d{3}";
    }
    if (withTimezone) {
      timeRegexStr += "(?:Z|[+-](?:[01]\\d|2[0-3]):[0-5]\\d)?)?";
    } else {
      timeRegexStr += ")?";
    }
    let regexStr = "";
    if (withDate && withTime) {
      regexStr = `${dateRegexStr}${timeRegexStr}$`;
    } else if (withDate) {
      regexStr = `${dateRegexStr}$`;
    } else if (withTime) {
      regexStr = `^${timeRegexStr.slice(4)}$`;
    } else {
      return false;
    }
    const regex = new RegExp(regexStr);
    return regex.test(str);
  }
  /**
   * Try to convert Any Types to a specific Type
   * @param input 
   * @param typeString 'string' | 'number' | 'boolean' | 'string[]'
   * @returns 
   */
  tryConvert(input, typeString) {
    switch (typeString) {
      case "string":
        if (typeof input === "string") {
          return input;
        }
        return void 0;
      case "number":
        const num = Number(input);
        if (!isNaN(num)) {
          return num;
        }
        return void 0;
      case "boolean":
        if (typeof input === "boolean") {
          return input;
        }
        if (typeof input === "string") {
          const lowerValue = input.toLowerCase();
          if (lowerValue === "true") {
            return true;
          }
          if (lowerValue === "false") {
            return false;
          }
        }
        if (typeof input === "number") {
          if (input === 1) {
            return true;
          }
          if (input === 0) {
            return false;
          }
        }
        return void 0;
      case "string[]":
        if (Array.isArray(input) && input.every((item) => typeof item === "string")) {
          return input;
        }
        return void 0;
      default:
        return void 0;
    }
  }
  /**
   * Formats a given text string to be safe for use in YAML by replacing special characters.
   *
   * Replaces all characters that are not alphanumeric, dash, underscore, slash, or certain accented characters
   * with a specified replacement string. If no replacement string is provided, it uses the value from settings,
   * or defaults to `'-'`.
   *
   * @param text - The input string to format.
   * @param replaceBy - Optional. The string to replace special characters with. If not provided, uses the value from settings or `'-'`.
   * @returns The formatted string safe for YAML usage.
   */
  formatToYAMLSaveString(text, replaceBy = void 0) {
    let replaceString = "-";
    if (!replaceBy && this.settings) {
      replaceString = this.settings.specialCharReplacement || "-";
    } else {
      if (replaceBy)
        replaceString = replaceBy;
    }
    return text.replace(/[^a-zA-Z0-9\-_\/äöüßÄÖÜáéíóúýÁÉÍÓÚÝàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛãñõÃÑÕ]/g, replaceString);
  }
  /**
   * Converts a string to a YAML-safe format by adding quotes when necessary.
   * @param input The string, boolean, number or array to make YAML-safe
   * @returns The safely quoted string when needed, or the original string if safe
   */
  toYamlSafeString(input) {
    if (Array.isArray(input)) {
      input.forEach((item, index) => {
        input[index] = this.toYamlSafeString(item).toString();
      });
      return input;
    }
    switch (typeof input) {
      case "number":
        return input;
      case "boolean":
        return input ? "true" : "false";
      case "string":
        const trimmed = input.trim();
        if (trimmed === "")
          return '""';
        const needsQuotes = /[:{}\[\],&*#?|<>=!%@`"'\\]|^[-?\n]|[\s\n]|^[yYnN]|^[0-9]|^[+-]|^(true|false|yes|no|on|off)$/i.test(trimmed);
        const isAlreadyQuoted = trimmed.startsWith('"') && trimmed.endsWith('"') || trimmed.startsWith("'") && trimmed.endsWith("'");
        if (!needsQuotes && !isAlreadyQuoted) {
          return trimmed;
        }
        if (!isAlreadyQuoted) {
          return `"${trimmed.replace(/"/g, '\\"')}"`;
        }
        return trimmed;
      default:
        logger.log(ERROR, `toYamlSafeString(${input}) if of type '${typeof input}'`);
        return input;
    }
  }
  /**
   * Converts an input string or array of strings into a Markdown Link format.
   * 
   * @param input - The input to be converted. Can be a string or an array of strings.
   * @param replaceSpaces - Optional parameter to specify a replacement for spaces in the path or title.
   *                        If provided, spaces will be replaced with this value.
   * @returns A string in Markdown Link format if the input is a single string, or a concatenated string
   *          of Markdown Links if the input is an array of strings.
   * 
   * The Markdown Link format is `[title](path)`, where:
   * - `path` is the formatted path of the link.
   * - `title` is the formatted title of the link.
   * 
   * If the input is an array, each element is converted to a WikiLink and joined with a comma.
   */
  toMarkdownLink(input, replaceSpaces) {
    if (Array.isArray(input)) {
      return input.map((item) => this.toWikiLink(item)).join(", ");
    }
    if (typeof input === "string") {
      const { path, title, fileName } = this.extractPathParts(input);
      const formattedPath = this.replaceSpaces(input, replaceSpaces);
      const formattedTitle = this.replaceSpaces(title, replaceSpaces);
      return `[[${formattedPath}|${formattedTitle}]]`;
    }
    return input;
  }
  /**
   * Converts an input string or array of strings into a WikiLink format string or array of strings.
   * 
   * @param input - The input to be converted. Can be a string or an array of strings.
   * @param replaceSpaces - Optional parameter to specify a replacement for spaces in the path or title.
   *                        If provided, spaces will be replaced with this value.
   * @returns A string in WikiLink format if the input is a single string, or a concatenated string
   *          of WikiLinks if the input is an array of strings.
   * 
   * The WikiLink format is `[[fileName]]`, where:
   * - `fileName` is the formatted unique fileName of the link.
   * 
   * If the input is an array, each element is converted to a WikiLink and joined with a comma.
   */
  toWikiLink(input, replaceSpaces = " ") {
    if (Array.isArray(input)) {
      return input.flatMap((item) => this.toWikiLink(item));
    }
    if (typeof input === "string") {
      const { path, title } = this.extractLinkParts(input);
      const formattedTitle = this.replaceSpaces(this.removeAllExtensions(title), replaceSpaces);
      return `[[${formattedTitle}]]`;
    }
    return input;
  }
  /**
   * Replaces all whitespace characters in the given text with a specified replacement string.
   *
   * @param text - The input string in which spaces will be replaced.
   * @param replaceBy - Optional. The string to replace spaces with. If not provided, uses the value from `this.settings.spaceReplacement` or defaults to '_'.
   * @returns The modified string with spaces replaced by the specified replacement string.
   */
  replaceSpaces(text, replaceBy = void 0) {
    let replaceString = "_";
    if (!replaceBy && this.settings) {
      replaceString = this.settings.spaceReplacement || "_";
    } else {
      if (replaceBy)
        replaceString = replaceBy;
    }
    return text.replace(/\s+/g, replaceString);
  }
  /**
   * Removes the ALL file extension(s) from a given file name.
   *
   * @param fileName - The name of the file, including its extension.
   * @returns The file name without its extension.
   */
  removeAllExtensions(fileName) {
    return fileName.split(".")[0];
  }
  /**
   * Removes the last file extension(s) from a given file name.
   *
   * @param fileName - The name of the file, including its extension.
   * @returns The file name without its extension.
   */
  removeExtensions(fileName) {
    const result = fileName.split(".");
    result.pop();
    if (result.length === 0)
      return fileName;
    return result.join(".") || fileName;
  }
  /**
   * Converts a given string to camelCase format.
   *
   * Splits the input text by spaces, lowercases the first word,
   * and capitalizes the first letter of each subsequent word,
   * then joins them together without spaces.
   *
   * @param text - The input string to be converted.
   * @returns The camelCase formatted string.
   */
  formatUpperCamelCase(text) {
    let textParts = text.split(" ");
    let convertedTextParts = [];
    textParts.forEach((text2, index) => {
      let newTextPart = text2.toLowerCase();
      newTextPart = newTextPart.charAt(0).toUpperCase() + newTextPart.slice(1);
      convertedTextParts.push(newTextPart);
    });
    return convertedTextParts.join("");
  }
  /**
   * get the path to a file from a string containing the full parh/name string
   * @param path string
   * @param separator string defaults to '/'
   * @returns string
   */
  getFolderFromPath(path, separator = "/") {
    if (path === null)
      return null;
    if (path === void 0)
      return void 0;
    const currentPathParts = path.split("/");
    currentPathParts.pop();
    return currentPathParts.join(separator);
  }
  /**
   * removes duplicate strings in an array and deletes empty strings
   * @param stringArray 
   * @returns 
   */
  removeDuplicateStrings(stringArray) {
    if (!stringArray)
      return [];
    const uniqueStringsSet = new Set(stringArray);
    uniqueStringsSet.delete("");
    return [...uniqueStringsSet];
  }
};
function getFolderFromPath(path, separator = "/") {
  if (path === null)
    return null;
  if (path === void 0)
    return void 0;
  const currentPathParts = path.split("/");
  currentPathParts.pop();
  return currentPathParts.join(separator);
}

// src/types.ts
var versionString = "0.0.23";
var DEFAULT_FILTER_FILES_AND_FOLDERS = {
  selectedFolders: [],
  selectedFiles: [],
  mode: "exclude",
  display: "folders"
};
var DEFAULT_FRONTMATTER_AUTOMATE_SETTINGS = {
  tagPrefix: "",
  excludeRootFolder: false,
  tagsPropertyName: "tags",
  spaceReplacement: "",
  specialCharReplacement: "",
  lowercaseTags: false,
  knownProperties: [],
  rules: [],
  liveRules: [],
  useTextArea: false,
  exclude: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "exclude",
    display: "folders"
  },
  include: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "include",
    display: "folders"
  },
  configuredProperties: [],
  debugLevel: WARNING,
  delayCreateEvent: 0
  // default to no delay
};
var DEFAULT_RULE_DEFINITION = {
  id: "",
  active: true,
  asLink: false,
  //deprecated
  addContent: "overwrite",
  property: "",
  value: "",
  customProperty: "",
  type: "text",
  typeProperty: { name: "", type: "text", source: "registered" },
  content: "",
  buildInCode: "",
  jsCode: "",
  showContent: false,
  exclude: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "exclude",
    display: "folders"
  },
  include: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "include",
    display: "folders"
  },
  prefix: "",
  spaceReplacement: "",
  specialCharReplacement: "",
  lowercaseTags: false,
  //deprecated
  formatter: "toOriginal",
  //deprecated
  formatters: ["toOriginal"],
  linkFormatter: "toOriginalLink",
  inputProperty: "",
  onlyModify: true,
  useCustomCode: false
};

// src/directorySelectionModal.ts
var import_obsidian5 = require("obsidian");
var DirectorySelectionModal = class extends import_obsidian5.Modal {
  // Reference to update dropdown on reset
  /**
   * Creates an instance of the DirectorySelectionModal.
   * @param app - The Obsidian App instance.
   * @param initialFolders - Array of initially selected folder paths.
   * @param initialFiles - Array of initially selected file paths.
   * @param initialMode - The initial selection mode ('include' or 'exclude').
   * @param okCallback - Function to call when the user clicks "OK". Receives the selection result.
   */
  constructor(app, initialFolders, initialFiles, initialOptions, okCallback) {
    super(app);
    this.showFiles = false;
    // Container for the tree view
    this.treeNodes = /* @__PURE__ */ new Map();
    // Map path to node info for quick access
    this.modeDropdown = null;
    this.initialFoldersSnapshot = new Set(initialFolders);
    this.initialFilesSnapshot = new Set(initialFiles);
    this.initialModeSnapshot = initialOptions.selectionMode;
    this.initialDisplaySnapshot = initialOptions.displayMode;
    this.showFiles = initialOptions.displayMode === "files" || initialOptions.displayMode === "file" || initialFiles.length > 0;
    this.options = initialOptions;
    this.okCallback = okCallback;
    this.resetSelectionToInitial();
  }
  /**
   * Resets the current selection state to the initial state provided at construction.
   */
  resetSelectionToInitial() {
    this.currentFolders = new Set(this.initialFoldersSnapshot);
    this.currentFiles = new Set(this.initialFilesSnapshot);
    this.currentMode = this.initialModeSnapshot;
  }
  /**
   * Resets the current selection state to empty.
   */
  resetSelectionToEmpty() {
    this.currentFolders = /* @__PURE__ */ new Set([]);
    this.currentFiles = /* @__PURE__ */ new Set([]);
    this.currentMode = this.initialModeSnapshot;
  }
  /**
   * Called when the modal is opened. Builds the UI.
   */
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("directory-selection-modal");
    if (this.includeExcludeSelectable) {
      contentEl.createEl("h2", { text: this.options.title || "Include or Exclude Folders and Files" });
    } else {
      contentEl.createEl("h2", { text: this.options.title || `${this.currentMode === "exclude" ? "Exclude" : "Include"} Folders and Files` });
    }
    const controlsEl = contentEl.createDiv({ cls: "modal-controls" });
    this.createModeSetting(controlsEl);
    this.createShowFilesSetting(controlsEl);
    this.treeRootElement = contentEl.createDiv({ cls: "tree-view-container" });
    this.treeRootElement.style.maxHeight = "600px";
    this.treeRootElement.style.overflowY = "auto";
    this.treeRootElement.style.border = "1px solid var(--background-modifier-border)";
    this.treeRootElement.style.padding = "10px";
    this.treeRootElement.style.marginTop = "10px";
    this.treeRootElement.style.marginBottom = "10px";
    if (!this.treeNodes.size) {
      this.buildAndRenderTree();
    }
    this.createActionButtons(contentEl);
  }
  /**
   * Creates the dropdown setting for choosing the selection mode.
   * @param containerEl - The HTML element to append the setting to.
   */
  createModeSetting(containerEl) {
    if (this.includeExcludeSelectable) {
      this.modeDropdown = new import_obsidian5.Setting(containerEl).setName("Selection Mode").setDesc("Choose if the selected files and folders should be excluded or included.").addDropdown((dropdown) => {
        dropdown.addOption("exclude", "exclude").addOption("include", "include").setValue(this.currentMode).onChange((value) => {
          this.currentMode = value;
          this.updateTreeAppearance();
        });
      });
    }
  }
  /**
   * Updates the mode dropdown UI element to reflect the currentMode state.
   */
  updateModeDropdown() {
    var _a;
    const dropdownComponent = (_a = this.modeDropdown) == null ? void 0 : _a.components[0];
    if (dropdownComponent && typeof dropdownComponent.setValue === "function") {
      dropdownComponent.setValue(this.currentMode);
    }
  }
  /**
   * Creates the toggle setting for showing/hiding files in the tree.
   * @param containerEl - The HTML element to append the setting to.
   */
  createShowFilesSetting(containerEl) {
    if (this.options.optionShowFiles) {
      new import_obsidian5.Setting(containerEl).setName("Show Files").setDesc("Show Files within the directory tree.").addToggle((toggle) => {
        toggle.setValue(this.showFiles).onChange((value) => {
          this.showFiles = value;
          this.buildAndRenderTree();
        });
      });
    }
  }
  /**
   * Creates the "OK" and "Reset" buttons.
   * @param containerEl - The HTML element to append the buttons to.
   */
  createActionButtons(containerEl) {
    const buttonsEl = containerEl.createDiv({ cls: "modal-buttons" });
    buttonsEl.style.marginTop = "15px";
    buttonsEl.style.display = "flex";
    buttonsEl.style.justifyContent = "flex-end";
    buttonsEl.style.gap = "10px";
    const resetButton = buttonsEl.createEl("button");
    (0, import_obsidian5.setIcon)(resetButton, "reset");
    resetButton.ariaLabel = "Reset selection";
    resetButton.onclick = () => {
      this.resetSelectionToInitial();
      this.updateModeDropdown();
      this.buildAndRenderTree();
    };
    const emptyButton = buttonsEl.createEl("button");
    (0, import_obsidian5.setIcon)(emptyButton, "eraser");
    emptyButton.ariaLabel = "Clear selection";
    emptyButton.onclick = () => {
      this.resetSelectionToEmpty();
      this.updateModeDropdown();
      this.buildAndRenderTree();
    };
    const cancelButton = buttonsEl.createEl("button", { text: "Cancel" });
    cancelButton.ariaLabel = "close and discard changes";
    cancelButton.onclick = () => {
      this.okCallback(null);
      this.close();
    };
    const okButton = buttonsEl.createEl("button", { text: "OK", cls: "mod-cta" });
    okButton.ariaLabel = "close and save changes";
    okButton.onclick = () => {
      this.close();
    };
  }
  /**
   * Builds the logical tree structure data from the vault's files and folders.
   * @returns The root node of the tree structure.
   */
  buildTreeData() {
    const vaultRootNode = {
      path: "/",
      // Root folder path
      name: this.app.vault.getName() || "Vault",
      // Use vault name or default
      type: "folder",
      children: [],
      // Placeholder elements, will be assigned during rendering
      element: null,
      checkbox: null,
      label: null,
      container: null
    };
    const folderNodes = /* @__PURE__ */ new Map();
    folderNodes.set("/", vaultRootNode);
    const allFiles = this.app.vault.getFiles();
    allFiles.forEach((file) => {
      const parentFolder = file.parent;
      if (!parentFolder)
        return;
      let currentPath = "";
      const pathParts = parentFolder.path.split("/").filter((p) => p.length > 0);
      let parentNode = vaultRootNode;
      pathParts.forEach((part) => {
        currentPath = currentPath === "/" ? part : `${currentPath}/${part}`;
        if (!folderNodes.has(currentPath)) {
          const newFolderNode = {
            path: currentPath,
            name: part,
            type: "folder",
            children: [],
            element: null,
            checkbox: null,
            label: null,
            container: null
          };
          folderNodes.set(currentPath, newFolderNode);
          if (!parentNode.children) {
            parentNode.children = [];
          }
          parentNode.children.push(newFolderNode);
          parentNode = newFolderNode;
        } else {
          parentNode = folderNodes.get(currentPath);
        }
      });
    });
    if (this.showFiles) {
      allFiles.forEach((file) => {
        const parentFolder = file.parent;
        let parentPath = "";
        if (parentFolder) {
          parentPath = "/" + (parentFolder.path === "/" ? "" : parentFolder.path);
        }
        const parentNode = folderNodes.get(parentPath);
        const fileNode = {
          path: file.path,
          name: file.name,
          type: "file",
          element: null,
          checkbox: null,
          label: null,
          container: null
        };
        if (parentNode) {
          if (!parentNode.children) {
            parentNode.children = [];
          }
          parentNode.children.push(fileNode);
        }
      });
    }
    const sortNodes = (a, b) => {
      if (a.type === "folder" && b.type === "file")
        return -1;
      if (a.type === "file" && b.type === "folder")
        return 1;
      return a.name.localeCompare(b.name);
    };
    folderNodes.forEach((node) => {
      var _a;
      return (_a = node.children) == null ? void 0 : _a.sort(sortNodes);
    });
    return vaultRootNode;
  }
  /**
   * Renders the entire tree structure in the DOM based on the tree data.
   */
  renderTree() {
    var _a;
    this.treeRootElement.empty();
    this.treeNodes.clear();
    const treeData = this.buildTreeData();
    const rootUl = this.treeRootElement.createEl("ul");
    rootUl.addClass("tree-root-ul");
    rootUl.style.listStyle = "none";
    rootUl.style.paddingLeft = "0";
    this.renderTreeNode(treeData, rootUl, 0, this.currentFolders, this.currentFiles);
    (_a = treeData.children) == null ? void 0 : _a.forEach((childNode) => {
    });
  }
  /**
   * Recursively renders a single tree node and its children in the DOM.
   * @param node - The TreeNode data to render.
   * @param parentElement - The HTML `ul` element to append this node's `li` to.
   * @param level - The current indentation level.
   */
  renderTreeNode(node, parentElement, level, selectedPaths, selectedfiles) {
    const li = parentElement.createEl("li");
    li.style.marginLeft = `${level * 20}px`;
    li.addClass(`tree-node-${node.type}`);
    const container = li.createDiv({ cls: "tree-node-container" });
    container.style.display = "flex";
    container.style.alignItems = "center";
    container.style.padding = "2px 0";
    let toggleButton = null;
    let isCollapsed = true;
    if (node.type === "folder") {
      toggleButton = container.createSpan({ cls: "tree-toggle-button" });
      toggleButton.textContent = "\u25B6";
      toggleButton.style.cursor = "pointer";
      toggleButton.style.marginRight = "5px";
      const shouldExpand = this.shouldExpandFolder(node, selectedPaths, selectedfiles);
      if (shouldExpand) {
        isCollapsed = false;
      }
      toggleButton.onclick = () => {
        isCollapsed = !isCollapsed;
        if (toggleButton)
          toggleButton.textContent = isCollapsed ? "\u25B6" : "\u25BC";
        if (childrenUl)
          childrenUl.style.display = isCollapsed ? "none" : "block";
      };
    }
    const checkbox = container.createEl("input", { type: "checkbox" });
    checkbox.id = `tree-cb-${node.path.replace(/[^a-zA-Z0-9]/g, "-")}`;
    checkbox.dataset.path = node.path;
    checkbox.dataset.type = node.type;
    const label = container.createEl("label");
    label.textContent = `${node.type === "folder" ? "\u{1F4C1}" : "\u{1F4C4}"} ${node.name}`;
    label.htmlFor = checkbox.id;
    label.style.marginLeft = "5px";
    label.style.cursor = "pointer";
    label.title = node.path;
    node.element = li;
    node.checkbox = checkbox;
    node.label = label;
    node.container = container;
    this.treeNodes.set(node.path, node);
    if (node.type === "folder") {
      checkbox.checked = this.currentFolders.has(node.path);
    } else {
      checkbox.checked = this.currentFiles.has(node.path);
    }
    checkbox.onchange = (event) => {
      const target = event.target;
      const path = target.dataset.path;
      const type = target.dataset.type;
      if (target.checked) {
        if (type === "folder") {
          if (this.options.displayMode === "folder") {
            this.currentFolders.clear();
          }
          this.currentFolders.add(path);
        } else {
          if (this.options.displayMode === "file") {
            this.currentFiles.clear();
          }
          this.currentFiles.add(path);
        }
      } else {
        if (type === "folder")
          this.currentFolders.delete(path);
        else
          this.currentFiles.delete(path);
      }
      this.updateTreeAppearance();
    };
    let childrenUl = null;
    if (node.type === "folder" && node.children && node.children.length > 0) {
      childrenUl = li.createEl("ul");
      childrenUl.style.listStyle = "none";
      childrenUl.style.paddingLeft = "0";
      childrenUl.style.marginLeft = "0";
      childrenUl.style.display = isCollapsed ? "none" : "block";
      node.children.forEach((child) => this.renderTreeNode(child, childrenUl, level + 1, selectedPaths, selectedfiles));
    }
  }
  // Helper method to determine if a folder should be expanded
  shouldExpandFolder(node, selectedPaths, selectedFiles) {
    if (selectedPaths.has(node.path) || selectedFiles.has(node.path)) {
      return true;
    }
    if (node.children) {
      for (const child of node.children) {
        if (this.shouldExpandFolder(child, selectedPaths, selectedFiles)) {
          return true;
        }
      }
    }
    return false;
  }
  /**
   * Updates the visual appearance (enabled/disabled/styling) of all nodes
   * in the tree based on the current mode and selections.
   */
  updateTreeAppearance() {
    this.treeNodes.forEach((node) => {
      let isDisabled = false;
      let isEffectivelyIncluded = false;
      let isEffectivelyExcluded = false;
      let ancestorFolderSelected = false;
      let currentPath = node.path;
      while (currentPath !== "/") {
        const parentPath = currentPath.substring(0, currentPath.lastIndexOf("/")) || "/";
        if (this.currentFolders.has(parentPath)) {
          ancestorFolderSelected = true;
          break;
        }
        if (parentPath === currentPath)
          break;
        currentPath = parentPath;
      }
      const nodeSelected = node.type === "folder" ? this.currentFolders.has(node.path) : this.currentFiles.has(node.path);
      if (this.currentMode === "exclude") {
        isEffectivelyExcluded = nodeSelected || ancestorFolderSelected;
        isDisabled = isEffectivelyExcluded;
      } else {
        if (node.type === "folder") {
          isEffectivelyIncluded = nodeSelected || ancestorFolderSelected;
        } else {
          const parentPath = node.path.substring(0, node.path.lastIndexOf("/")) || "/";
          const parentEffectivelyIncluded = this.isPathEffectivelyIncluded(parentPath);
          isEffectivelyIncluded = nodeSelected || parentEffectivelyIncluded;
        }
        isDisabled = !isEffectivelyIncluded;
      }
      node.checkbox.disabled = false;
      node.checkbox.checked = nodeSelected;
      if (isDisabled) {
        node.element.addClass("is-disabled");
      } else {
        node.element.removeClass("is-disabled");
      }
      node.element.classList.remove("is-included", "is-excluded");
      if (this.currentMode === "include" && isEffectivelyIncluded) {
        node.element.addClass("is-included");
      } else if (this.currentMode === "exclude" && isEffectivelyExcluded) {
        node.element.addClass("is-excluded");
      }
    });
  }
  /**
   * Helper function to determine if a given path is effectively included
   * in the current selection under 'include' mode.
   * A path is included if it (file or folder) is selected, or if any of its ancestor FOLDERS are selected.
   * @param path - The folder or file path to check.
   * @returns True if the path should be considered included, false otherwise.
   */
  isPathEffectivelyIncluded(path) {
    if (this.currentMode !== "include") {
      return !this.isPathEffectivelyExcluded(path);
    }
    if (this.currentFiles.has(path) || this.currentFolders.has(path)) {
      return true;
    }
    let current = path;
    while (current !== "/") {
      const parentPath = current.substring(0, current.lastIndexOf("/")) || "/";
      if (this.currentFolders.has(parentPath)) {
        return true;
      }
      if (parentPath === current)
        break;
      current = parentPath;
    }
    return false;
  }
  /**
  * Helper function to determine if a given path is effectively excluded
  * in the current selection under 'exclude' mode.
  * A path is excluded if it (file or folder) is selected, or if any of its ancestor FOLDERS are selected.
  * @param path - The folder or file path to check.
  * @returns True if the path should be considered excluded, false otherwise.
  */
  isPathEffectivelyExcluded(path) {
    if (this.currentMode !== "exclude") {
      return false;
    }
    if (this.currentFiles.has(path) || this.currentFolders.has(path)) {
      return true;
    }
    let current = path;
    while (current !== "/") {
      const parentPath = current.substring(0, current.lastIndexOf("/")) || "/";
      if (this.currentFolders.has(parentPath)) {
        return true;
      }
      if (parentPath === current)
        break;
      current = parentPath;
    }
    return false;
  }
  /**
   * Combines building the tree data, rendering the DOM, and applying initial appearance.
   */
  buildAndRenderTree() {
    this.renderTree();
    this.updateTreeAppearance();
  }
  /**
   * Called when the modal is closed. Cleans up resources.
   */
  onClose() {
    const result = {
      folders: Array.from(this.currentFolders),
      files: Array.from(this.currentFiles),
      mode: this.currentMode,
      display: this.currentDisplay
    };
    this.okCallback(result);
    const { contentEl } = this;
    contentEl.empty();
    this.treeNodes.clear();
    this.modeDropdown = null;
  }
};
function openDirectorySelectionModal(app, initialFolders, initialFiles, options, okCallback) {
  new DirectorySelectionModal(
    app,
    initialFolders,
    initialFiles,
    options,
    okCallback
  ).open();
}

// src/settings-properties.ts
var import_obsidian9 = require("obsidian");

// src/rules.ts
function executeRuleObject(event, app, plugin, settings, currentFile, currentContent, rule, frontMatter, oldPath) {
  if (!rule)
    return currentContent;
  if (!rule.active)
    return currentContent;
  if (!currentFile)
    return currentContent;
  if (!checkIfFileAllowed(currentFile, settings, rule))
    return currentContent;
  const tools = new ScriptingTools(app, plugin, settings, rule, frontMatter);
  let result = currentContent;
  let oldResult = void 0;
  let oldFile = tools.getMockFileFromPath(oldPath);
  tools.setCurrentContent(frontMatter[rule.property]);
  tools.setRule(rule);
  tools.setFrontmatter(frontMatter);
  tools.setActiveFile(currentFile);
  const ruleObject = rulesManager.getRuleById(rule.content);
  if (!ruleObject)
    return currentContent;
  result = rulesManager.executeRule(rule, ruleObject, app, currentFile, tools, frontMatter);
  result = rulesManager.applyFormatOptions(result, rule, currentFile, tools);
  if (oldFile && rule.addContent !== "overwrite") {
    oldResult = rulesManager.executeRule(rule, ruleObject, app, oldFile, tools, frontMatter);
    oldResult = rulesManager.applyFormatOptions(oldResult, rule, oldFile, tools);
    result = rulesManager.mergeResult(result, oldResult, currentContent, rule);
  } else {
    result = rulesManager.mergeResult(result, result, currentContent, rule);
  }
  return result;
}
function filterFile(file, fileList, filterMode, type) {
  let result = false;
  const filterArray = type === "folders" ? fileList[filterMode].selectedFolders : fileList[filterMode].selectedFiles;
  if (filterArray.length === 0)
    return filterMode === "include" ? false : true;
  const filePath = file.path;
  const fileFolder = getFolderFromPath(file.path);
  const fileName = file.basename + "." + file.extension;
  if (type === "files") {
    result = filterArray.includes(filePath);
  }
  if (type === "folders") {
    for (let path of filterArray) {
      result = (fileFolder == null ? void 0 : fileFolder.startsWith(path.slice(1))) || false;
      if (result === true)
        return filterMode === "exclude" ? !result : result;
    }
    ;
  }
  ;
  return filterMode === "exclude" ? !result : result;
}
function checkIfFileAllowed(file, settings, rule) {
  let result = true;
  if (!file)
    return false;
  if (settings) {
    try {
      if (settings.exclude.selectedFiles.length > 0) {
        result = filterFile(file, settings, "exclude", "files");
      }
      if (result && settings.exclude.selectedFolders.length > 0) {
        result = filterFile(file, settings, "exclude", "folders");
      }
      if (!result && settings.include.selectedFiles.length > 0) {
        result = filterFile(file, settings, "include", "files");
      }
      if (!result && settings.include.selectedFolders.length > 0) {
        result = filterFile(file, settings, "include", "folders");
      }
    } catch (error) {
      logger.log(ERROR, `Error filtering file ${file.path} globally: ${error}`);
      return false;
    }
  }
  if (rule) {
    try {
      if (result && rule.exclude.selectedFiles.length > 0) {
        result = filterFile(file, rule, "exclude", "files");
      }
      if (result && rule.exclude.selectedFolders.length > 0) {
        result = filterFile(file, rule, "exclude", "folders");
      }
      if (!result && rule.include.selectedFiles.length > 0) {
        result = filterFile(file, rule, "include", "files");
      }
      if (!result && rule.include.selectedFolders.length > 0) {
        result = filterFile(file, rule, "include", "folders");
      }
    } catch (error) {
      logger.log(ERROR, `Error filtering file ${file.path} by rule ${rule.property}|${rule.content}: ${error}`);
      return false;
    }
  }
  return result;
}

// src/settings-properties.ts
var import_crypto = require("crypto");

// src/editorModal.ts
var import_obsidian7 = require("obsidian");

// src/uiElements.ts
var import_obsidian6 = require("obsidian");
function renderValueInput(containerEl, propertyInfo, currentValue, changeCallback) {
  let returnComponent;
  containerEl.empty();
  if (!propertyInfo) {
    containerEl.setText("");
    containerEl.addClass("text-muted");
    return;
  }
  const type = propertyInfo.type;
  switch (type) {
    case "number":
      returnComponent = new import_obsidian6.TextComponent(containerEl).setPlaceholder("Numeric Value").setValue(currentValue !== void 0 && currentValue !== null ? String(currentValue) : "").onChange(async (value) => {
        const numValue = value === "" ? void 0 : parseFloat(value);
        changeCallback(propertyInfo, isNaN(numValue) ? void 0 : numValue);
      });
      returnComponent.inputEl.type = "number";
      break;
    case "checkbox":
      returnComponent = containerEl.createDiv({ cls: "tri-state-checkbox clickable-icon" });
      returnComponent.setAttribute("aria-label", "Checkbox change state");
      returnComponent.setAttribute("role", "checkbox");
      const updateCheckboxVisual = (state) => {
        let iconName;
        let ariaState;
        if (state === true) {
          iconName = "check-square";
          ariaState = "true";
        } else if (state === false) {
          iconName = "square";
          ariaState = "false";
        } else {
          iconName = "minus-square";
          ariaState = "mixed";
        }
        (0, import_obsidian6.setIcon)(returnComponent, iconName);
        returnComponent.setAttribute("aria-checked", ariaState);
        returnComponent.dataset.state = String(state);
      };
      updateCheckboxVisual(currentValue);
      returnComponent.addEventListener("click", async () => {
        let currentState = returnComponent.dataset.state;
        let nextState;
        if (currentState === "false") {
          nextState = true;
        } else if (currentState === "true") {
          nextState = void 0;
        } else {
          nextState = false;
        }
        changeCallback(propertyInfo, nextState);
        updateCheckboxVisual(nextState);
      });
      break;
    case "date":
      returnComponent = new import_obsidian6.TextComponent(containerEl).setPlaceholder("YYYY-MM-DD").setValue(currentValue || "").onChange(async (value) => {
        changeCallback(propertyInfo, value || void 0);
      });
      returnComponent.inputEl.type = "date";
      break;
    case "datetime":
      returnComponent = new import_obsidian6.TextComponent(containerEl).setPlaceholder("YYYY-MM-DDTHH:mm").setValue(currentValue || "").onChange(async (value) => {
        changeCallback(propertyInfo, value || void 0);
      });
      returnComponent.inputEl.type = "datetime-local";
      break;
    case "aliases":
    case "tags":
    case "multitext":
      returnComponent = new import_obsidian6.TextComponent(containerEl).setPlaceholder("values (divided by comma)").setValue(Array.isArray(currentValue) ? currentValue.join(", ") : currentValue || "").onChange(async (value) => {
        const arrayValue = value.split(",").map((s) => s.trim()).filter((s) => s);
        changeCallback(propertyInfo, arrayValue.length > 0 ? arrayValue : void 0);
      });
      break;
    case "text":
    default:
      returnComponent = new import_obsidian6.TextComponent(containerEl).setPlaceholder("value").setValue(currentValue || "").onChange(async (value) => {
        changeCallback(propertyInfo, value || void 0);
      });
      break;
  }
  if (type !== "checkbox") {
    returnComponent.inputEl.style.backgroundColor = "transparent";
    returnComponent.inputEl.style.width = "100%";
    returnComponent.inputEl.style.border = "none";
  }
  return returnComponent;
}
function updatePropertyIcon(iconEl, type) {
  let iconName = "hash";
  switch (type) {
    case "text":
      iconName = "align-left";
      break;
    case "number":
      iconName = "binary";
      break;
    case "multitext":
      iconName = "list";
      break;
    case "date":
      iconName = "calendar";
      break;
    case "datetime":
      iconName = "clock";
      break;
    case "checkbox":
      iconName = "check-square";
      break;
    case "tags":
      iconName = "tags";
      break;
    case "aliases":
      iconName = "forward";
      break;
    default:
      iconName = "help-circle";
  }
  (0, import_obsidian6.setIcon)(iconEl, iconName);
}

// src/editorModal.ts
var codeEditorModal = class extends import_obsidian7.Modal {
  /**
   * Creates an instance of the DirectorySelectionModal.
   * @param app - The Obsidian App instance.
   * @param plugin - The plugin instance.
   * @param initialCode - String with the initial code.
   * @param expectedType - Expected return type.
   * @param activeFile - The currently active file or folder.
   * @param frontmatter - Frontmatter data for the active file.
   * @param okCallback - Function to call when the user clicks "OK". Receives the selection result.
   */
  constructor(app, plugin, initialCode, expectedType, activeFile, frontmatter, okCallback) {
    super(app);
    this.initialCode = initialCode;
    this.expectedType = expectedType;
    this.useTextArea = false;
    this.checkedSuccessfully = false;
    this.activeFile = activeFile;
    this.frontmatter = frontmatter;
    this.currentType = expectedType;
    this.currentCode = initialCode;
    this.plugin = plugin;
    this.scriptingTools = new ScriptingTools(
      app,
      this.plugin,
      this.plugin.settings,
      void 0,
      this.frontmatter,
      this.activeFile instanceof import_obsidian7.TFile ? this.activeFile : void 0
    );
    this.okCallback = okCallback;
    this.resetSelectionToInitial();
  }
  /**
   * Resets the current selection state to the initial state provided at construction.
   */
  resetSelectionToInitial() {
    var _a;
    this.currentCode = this.initialCode;
    (_a = this.cmEditor) == null ? void 0 : _a.setValue(this.currentCode);
    if (this.functionResultTextComponent)
      this.functionResultTextComponent.setValue("");
  }
  /**
   * Resets the current selection state to empty.
   */
  resetSelectionToEmpty() {
    var _a;
    this.currentCode = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    (_a = this.cmEditor) == null ? void 0 : _a.setValue(this.currentCode);
    if (this.functionResultTextComponent)
      this.functionResultTextComponent.setValue("");
  }
  loadCodeMirrorMode(mode) {
    try {
      require(`obsidian/lib/codemirror/mode/${mode}/${mode}.js`);
      logger.log(DEBUG, `CodeMirror mode '${mode}' loaded successfully (using require).`);
    } catch (error) {
      logger.log(ERROR, `Failed to load CodeMirror mode '${mode}' (using require):`, error);
    }
  }
  /**
   * Called when the modal is opened. Builds the UI.
   */
  async onOpen() {
    const { contentEl } = this;
    if (contentEl.parentElement)
      contentEl.parentElement.style.width = "900px";
    contentEl.empty();
    contentEl.addClass("codeEditor-modal");
    contentEl.createEl("h2", { text: "JavaScript Editor" });
    contentEl.createEl("body", { text: `Make sure your code results: ${this.expectedType}` });
    this.editorRootElement = contentEl.createDiv({ cls: "codeEditor-container" });
    this.editorRootElement.style.height = "600px";
    this.editorRootElement.style.overflowY = "auto";
    this.editorRootElement.style.padding = "10px";
    this.editorRootElement.style.marginTop = "10px";
    this.editorRootElement.style.marginBottom = "10px";
    this.cmEditor = null;
    const ruleOptionsDiv = contentEl.createDiv({ cls: "codeEditor-options" });
    if (this.useTextArea) {
      const ruleOptionsSettings = new import_obsidian7.Setting(this.editorRootElement).addTextArea((textArea) => {
        textArea.setPlaceholder("ender valid JS Code");
        textArea.inputEl.setAttribute("style", `height:190px; width:80%;`);
        textArea.onChange(async (value) => {
          if (this.functionTestButton)
            this.functionTestButton.buttonEl.addClass("mod-warning");
          this.currentCode = value;
        });
      });
    } else {
      const CodeMirror = window.CodeMirror;
      if (CodeMirror) {
        if (!CodeMirror.modes.javascript) {
          await this.loadCodeMirrorMode("javascript");
          logger.log(TRACE, "javaScript support loaded");
        }
      }
      let jsCode = this.currentCode;
      this.cmEditor = CodeMirror(this.editorRootElement, {
        value: jsCode || "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result; // return you result.\n}",
        mode: "javascript",
        lineNumbers: true,
        theme: "obsidian",
        indentUnit: 4,
        lineWrapping: false,
        readOnly: false,
        outerHeight: "600px"
      });
      if (this.cmEditor) {
        this.cmEditor.on("change", (cmEditor) => {
          if (this.functionTestButton)
            this.functionTestButton.buttonEl.addClass("mod-warning");
        });
        this.cmEditor.on("blur", (cmEditor) => {
          this.currentCode = cmEditor.getValue();
        });
      }
      ;
      new import_obsidian7.Setting(ruleOptionsDiv).addButton((button) => {
        this.functionTestButton = button;
        button.setWarning().setButtonText("Run Code").setTooltip("Run the code and check for errors").onClick(async () => {
          if (this.cmEditor) {
            let jsCode2 = this.cmEditor.getValue();
            let userFunction = parseJSCode(jsCode2);
            if (typeof userFunction === "string") {
              let errorHint = "See console for details!";
              if (userFunction.contains("Unexpected token")) {
                errorHint = "Did you missed a semicolon (;)?";
              }
              if (this.functionResultTextComponent)
                this.functionResultTextComponent.setValue(`Syntax error: ${userFunction}! ${errorHint}`);
              this.checkedSuccessfully = false;
              button.buttonEl.addClass("mod-warning");
            } else {
              if (userFunction) {
                try {
                  const result = userFunction(this.app, this.activeFile, this.scriptingTools);
                  if (this.functionResultTextComponent)
                    this.functionResultTextComponent.setValue(`'${result.toString()}' (${typeof result})`);
                  this.updateTypeIcons(result, typesContainer, this.expectedType, this.currentType, this.plugin.settings);
                  button.buttonEl.removeClass("mod-warning");
                  this.checkedSuccessfully = true;
                } catch (e) {
                  if (this.functionResultTextComponent) {
                    const errorMessage = e instanceof Error ? e.message : String(e);
                    this.functionResultTextComponent.setValue(`Syntax error: ${errorMessage}! See console for details!`);
                  }
                  logger.log(ERROR, "Syntax error. ", e, jsCode2, userFunction);
                  this.checkedSuccessfully = false;
                  button.buttonEl.addClass("mod-warning");
                }
              } else {
                logger.log(ERROR, "syntax error");
                this.checkedSuccessfully = false;
              }
            }
          }
        });
      }).addText((text) => {
        this.functionResultTextComponent = text;
        text.setPlaceholder("function result").setDisabled(true);
        this.functionResultTextComponent.inputEl.style.width = "580px";
      });
      const typesContainer = ruleOptionsDiv.createDiv({ cls: "property-icons-container" });
    }
    this.createActionButtons(contentEl);
  }
  updateTypeIcons(value, container, expectedType, currentType, settings) {
    const newType = typeof value;
    const typeIcons = {
      "string": ["text", "tags", "aliases", "multitext", "date", "datetime"],
      "number": ["number"],
      "boolean": ["checkbox"],
      "object": ["tags", "aliases", "multitext"]
    };
    if (newType === "string") {
      if (!this.scriptingTools.isISOString(value, { withDate: true })) {
        typeIcons[newType].splice(typeIcons[newType].indexOf("date"), 1);
      }
      if (!this.scriptingTools.isISOString(value, { withDate: true, withTime: true })) {
        typeIcons[newType].splice(typeIcons[newType].indexOf("datetime"), 1);
      }
    }
    container.empty();
    for (let obsidianType of typeIcons[newType]) {
      if (obsidianType) {
        const iconEl = container.createSpan({ cls: "property-icon setting-item-icon" });
        updatePropertyIcon(iconEl, obsidianType);
      }
    }
  }
  /**
   * Creates the "OK" and "Reset" buttons.
   * @param containerEl - The HTML element to append the buttons to.
   */
  createActionButtons(containerEl) {
    const buttonsEl = containerEl.createDiv({ cls: "modal-buttons" });
    buttonsEl.style.marginTop = "15px";
    buttonsEl.style.display = "flex";
    buttonsEl.style.justifyContent = "flex-end";
    buttonsEl.style.gap = "10px";
    const resetButton = buttonsEl.createEl("button");
    (0, import_obsidian7.setIcon)(resetButton, "reset");
    resetButton.ariaLabel = "Reset selection";
    resetButton.onclick = () => {
      this.resetSelectionToInitial();
    };
    const emptyButton = buttonsEl.createEl("button");
    (0, import_obsidian7.setIcon)(emptyButton, "eraser");
    emptyButton.ariaLabel = "Clear selection";
    emptyButton.onclick = () => {
      this.resetSelectionToEmpty();
    };
    const cancelButton = buttonsEl.createEl("button", { text: "Cancel" });
    cancelButton.ariaLabel = "close and discard changes";
    cancelButton.onclick = () => {
      logger.log(TRACE, "Cancel Clicked - Returning");
      this.okCallback(null);
      this.close();
    };
    const okButton = buttonsEl.createEl("button", { text: "OK", cls: "mod-cta" });
    cancelButton.ariaLabel = "close and save changes";
    okButton.onclick = () => {
      this.close();
    };
  }
  /**
   * Called when the modal is closed. Cleans up resources.
   */
  onClose() {
    const result = {
      code: this.currentCode,
      checked: this.checkedSuccessfully,
      type: "text"
    };
    logger.log(TRACE, "OK Clicked - Returning Result:", result);
    this.okCallback(result);
    const { contentEl } = this;
    contentEl.empty();
  }
};
function openCodeEditorModal(app, plugin, initialCode, expectedType, activeFile, frontmatter, okCallback) {
  new codeEditorModal(
    app,
    plugin,
    initialCode,
    expectedType,
    activeFile,
    frontmatter,
    okCallback
  ).open();
}

// src/uiMultiPropertySetting.ts
var import_obsidian8 = require("obsidian");
var MultiPropertySetting = class {
  constructor(container) {
    this.name = "";
    this.desc = "";
    this.value = [];
    this.onChangeCb = () => {
    };
    this.options = [];
    this.extraButtonCallbacks = [];
    this.container = container;
    this.settingEl = container.createDiv();
  }
  setName(name) {
    this.name = name;
    return this;
  }
  setDesc(desc) {
    this.desc = desc;
    return this;
  }
  setValue(value) {
    this.value = value.length ? [...value] : [""];
    this.render();
    return this;
  }
  setOptions(options) {
    this.options = options;
    this.render();
    return this;
  }
  onChange(cb) {
    this.onChangeCb = cb;
    return this;
  }
  /**
   * Allows adding extra buttons to each row.
   * The callback receives the Setting and the row index.
   */
  addExtraButton(cb) {
    this.extraButtonCallbacks.push(cb);
    this.render();
    return this;
  }
  styleDisabled(el, disabled) {
    if (disabled) {
      el.extraSettingsEl.addClass("mod-disabled");
      el.extraSettingsEl.setAttr("aria-disabled", "true");
      el.extraSettingsEl.tabIndex = -1;
      el.extraSettingsEl.removeAttribute("aria-label");
    } else {
      el.extraSettingsEl.removeClass("mod-disabled");
      el.extraSettingsEl.setAttr("aria-disabled", "false");
    }
  }
  render() {
    this.settingEl.empty();
    const arr = this.value;
    arr.forEach((selected, idx) => {
      const setting = new import_obsidian8.Setting(this.settingEl).setName(idx === 0 ? this.name : "").setDesc(idx === 0 ? this.desc : "").addDropdown((dd) => {
        this.options.forEach((item) => {
          if (typeof item === "string") {
            dd.addOption(item, item);
          } else {
            dd.addOption(item.id, item.name);
          }
        });
        dd.setValue(selected || "");
        dd.onChange((value) => {
          arr[idx] = value;
          this.value = arr;
          this.onChangeCb([...arr]);
          this.render();
        });
      });
      if (idx > 0) {
        setting.settingEl.style.borderTop = "none";
        setting.settingEl.style.padding = "0 0 0.75em";
      } else {
        setting.settingEl.style.padding = "0.75em 0";
      }
      const settingControl = setting.controlEl;
      if (settingControl) {
        settingControl.style.gap = "0.1em";
      }
      setting.addExtraButton((btn) => {
        btn.setIcon("arrow-up").setTooltip("Move up").setDisabled(idx === 0).onClick(() => {
          [arr[idx - 1], arr[idx]] = [arr[idx], arr[idx - 1]];
          this.value = arr;
          this.onChangeCb([...arr]);
          this.render();
        });
        this.styleDisabled(btn, idx === 0);
      });
      setting.addExtraButton((btn) => {
        btn.setIcon("arrow-down").setTooltip("Move down").setDisabled(idx === arr.length - 1).onClick(() => {
          [arr[idx], arr[idx + 1]] = [arr[idx + 1], arr[idx]];
          this.value = arr;
          this.onChangeCb([...arr]);
          this.render();
        });
        this.styleDisabled(btn, idx === arr.length - 1);
      });
      setting.addExtraButton((btn) => {
        btn.setIcon("minus-circle").setTooltip("Remove property").setDisabled(arr.length === 1).onClick(() => {
          arr.splice(idx, 1);
          this.value = arr.length ? arr : [""];
          this.onChangeCb([...this.value]);
          this.render();
        });
        this.styleDisabled(btn, arr.length === 1);
      });
      this.extraButtonCallbacks.forEach((cb) => cb(setting, idx));
    });
    const plusButton = new import_obsidian8.Setting(this.settingEl).addExtraButton((btn) => {
      btn.setIcon("plus-circle").setTooltip("Add property").setDisabled(arr[arr.length - 1] === "" || !arr[arr.length - 1]).onClick(() => {
        if (arr[arr.length - 1] !== "" && arr[arr.length - 1]) {
          arr.push("");
          this.value = arr;
          this.onChangeCb([...arr]);
          this.render();
        }
      });
      this.styleDisabled(btn, arr[arr.length - 1] === "" || !arr[arr.length - 1]);
    });
    plusButton.settingEl.style.borderTop = "none";
    plusButton.settingEl.style.padding = "0 0 0.75em";
  }
};

// src/settings-properties.ts
var RulesTable = class extends import_obsidian9.PluginSettingTab {
  constructor(app, plugin, container, settingsParameter) {
    super(app, plugin);
    this.knownProperties = {};
    this.activeFile = null;
    this.plugin = plugin;
    this.container = container;
    this.settingsParameter = settingsParameter;
    this.tools = new ScriptingTools(app, plugin);
    this.activeFile = this.app.workspace.getActiveFile();
  }
  // Helper to render one rule
  renderPropertyRow(containerEl, rule, index) {
    const rowEl = containerEl.createDiv({ cls: "property-setting-row setting-item" });
    rowEl.id = rule.id;
    const controlEl = rowEl.createDiv({ cls: "setting-item-control" });
    controlEl.style.gap = "0px";
    const leftContainer = controlEl.createDiv({ cls: "property-left-container" });
    const iconEl = leftContainer.createSpan({ cls: "property-icon setting-item-icon" });
    (0, import_obsidian9.setIcon)(iconEl, "hash");
    const searchContainer = leftContainer.createDiv({ cls: "property-search-container" });
    const nameInput = new import_obsidian9.TextComponent(searchContainer).setPlaceholder("Select property...").setValue(rule.property || "").onChange(async (value) => {
      this.renderSearchResults(searchContainer, value, index);
    });
    nameInput.inputEl.style.border = "none";
    nameInput.inputEl.addEventListener("focus", () => {
      this.renderSearchResults(searchContainer, nameInput.getValue(), index);
    });
    nameInput.inputEl.addEventListener("input", () => {
      this.renderSearchResults(searchContainer, nameInput.getValue(), index);
    });
    nameInput.inputEl.addEventListener("blur", (event) => {
      setTimeout(() => {
        const relatedTarget = event.relatedTarget;
        const resultsEl = searchContainer.querySelector(".property-search-results");
        if (!resultsEl || !resultsEl.contains(relatedTarget)) {
          this.clearSearchResults(searchContainer);
        }
      }, 100);
    });
    const currentPropertyInfo = this.knownProperties[rule.property];
    if (currentPropertyInfo) {
      updatePropertyIcon(iconEl, currentPropertyInfo.type);
    } else if (rule.property) {
      (0, import_obsidian9.setIcon)(iconEl, "alert-circle");
    }
    const middleContainer = controlEl.createDiv({ cls: "property-middle-container" });
    const valueContainer = middleContainer.createDiv({ cls: "property-value-container" });
    if (this.activeFile) {
      this.app.fileManager.processFrontMatter(this.activeFile, async (frontmatter) => {
        rule.value = await executeRuleObject("preview", this.app, this, this.plugin.settings, this.activeFile, "", rule, frontmatter);
      }, { "mtime": this.activeFile.stat.mtime });
    }
    const previewComponent = this.renderValueInput(valueContainer, currentPropertyInfo, rule.value, index);
    this.updatePreview(rule, previewComponent);
    const propertyDevDropdown = new import_obsidian9.DropdownComponent(middleContainer);
    propertyDevDropdown.selectEl.setAttribute("style", "width:35%");
    propertyDevDropdown.addOption("", "Select a content");
    rulesManager.getRulesByType("buildIn", rule.type).forEach((rule2) => {
      propertyDevDropdown.addOption(rule2.id, rule2.name);
    });
    propertyDevDropdown.setValue(rule.content);
    propertyDevDropdown.onChange(async (value) => {
      if (value !== "") {
        const ruleFunction = rulesManager.getRuleById(value);
        switch (ruleFunction == null ? void 0 : ruleFunction.ruleType) {
          case "script":
          case "buildIn.inputProperty":
          case "buildIn":
            let oldOriginalCode = rulesManager.getSource(value) || rulesManager.getSource("default") || "";
            if (rule.buildInCode !== "" && rule.buildInCode !== oldOriginalCode) {
              const shouldProceed = await new AlertModal(
                this.app,
                "Overwrite existing code?",
                "I sees like you have custom code for this rule! Should this be overwritten by default code for this parameter?",
                "Yes",
                "No"
              ).openAndGetValue();
              if (shouldProceed.proceed) {
                rule.buildInCode = rulesManager.getSource(value) || rulesManager.getSource("default") || "";
                rule.useCustomCode = false;
              } else {
                rule.buildInCode;
              }
              await this.plugin.saveSettings();
            } else {
              rule.buildInCode = rulesManager.getSource(value) || rulesManager.getSource("default") || "";
              rule.useCustomCode = false;
              await this.plugin.saveSettings();
            }
            await this.plugin.saveSettings();
            break;
          case "automation":
          case "autocomplete.modal":
            break;
          default:
        }
        rule.content = value;
        await this.plugin.saveSettings();
        this.updatePreview(rule, previewComponent);
        this.renderPropertyOptions(optionEL, rule, previewComponent);
      }
    });
    new import_obsidian9.ButtonComponent(middleContainer).setIcon("gear").setTooltip("open settings").setClass("property-icon-button").onClick(async () => {
      let settingsContainers = containerEl.getElementsByClassName("property-options-container");
      for (let container of settingsContainers) {
        if (container.getAttribute("id") !== rule.id)
          container.setAttribute("style", "display: none;");
      }
      this.renderPropertyOptions(optionEL, rule, previewComponent);
      optionEL.style.display = optionEL.style.display === "block" ? "none" : "block";
    });
    const deleteButtonContainer = controlEl.createDiv({ cls: "property-delete-button-container" });
    new import_obsidian9.ButtonComponent(deleteButtonContainer).setIcon("trash-2").setTooltip("remove this rule").setClass("mod-subtle").onClick(async () => {
      this.plugin.settings[this.settingsParameter].splice(index, 1);
      await this.plugin.saveSettings();
      this.display();
    });
    controlEl.style.display = "flex";
    controlEl.style.alignItems = "center";
    controlEl.style.justifyContent = "space-between";
    controlEl.style.width = "100%";
    leftContainer.style.display = "flex";
    leftContainer.style.alignItems = "center";
    leftContainer.style.minWidth = "150px";
    iconEl.style.marginRight = "8px";
    searchContainer.style.position = "relative";
    searchContainer.style.flexGrow = "1";
    valueContainer.style.flexGrow = "2";
    deleteButtonContainer.style.marginLeft = "auto";
    const optionEL = containerEl.createDiv({ cls: "property-options-container" });
    optionEL.id = rule.id;
    optionEL.style.display = "none";
  }
  renderPropertyOptions(optionEL, rule, previewComponent) {
    var _a, _b, _c, _d, _e, _f;
    if (!(previewComponent instanceof import_obsidian9.TextComponent))
      return;
    optionEL.empty();
    const ruleFn = rulesManager.getRuleById(rule.content);
    if (!ruleFn)
      return;
    if (ruleFn.useRuleOption("removeContent")) {
      const removeContentButton = new import_obsidian9.Setting(optionEL).setName("Remove content").setDesc(`Before making changes you might consider to remove content generated by this rule`).addButton(
        (button) => {
          button.setWarning().setButtonText("Remove Content").setCta().onClick(() => {
            let count = this.plugin.removeFrontmatterParamsFromAllFiles(rule);
            button.removeCta();
            button.setDisabled(true);
            removeContentButton.setDesc(`Removed this rule from ${count.files} files.`);
          });
        }
      );
    }
    if (ruleFn.useRuleOption("ruleActive")) {
      new import_obsidian9.Setting(optionEL).setName("Rule active").setDesc("If enabled, the rule will be executed").addToggle(
        (toggle) => toggle.setValue(rule.active).onChange(async (value) => {
          rule.active = value;
          await this.plugin.saveSettings();
        })
      );
    }
    if (ruleFn.useRuleOption("modifyOnly")) {
      new import_obsidian9.Setting(optionEL).setName("Modify only").setDesc("Only modify existing properties").addToggle((toggle) => toggle.setValue(rule.onlyModify).onChange(async (value) => {
        rule.onlyModify = value;
        await this.plugin.saveSettings();
        this.updatePreview(rule, previewComponent);
      }));
    }
    if (rule.type === "text" || rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
      let formatRule = rulesManager.getRuleById(rule.formatter);
      const formatterRules = rulesManager.getRulesByType("formatter") || [];
      let formatOptionsButton;
      if (ruleFn.useRuleOption("convertToLowerCase")) {
        const multiProp = new MultiPropertySetting(optionEL).setName("Format output").setDesc("Format output using selected options.").setOptions(formatterRules).setValue(rule.formatters || ["toOriginal"]).onChange((formatter) => {
          rule.formatters = formatter;
          formatRule = rulesManager.getRuleById(rule.formatter);
          this.updatePreview(rule, previewComponent);
        });
        multiProp.addExtraButton((setting, idx) => {
          setting.addExtraButton((btn) => {
            var _a2, _b2, _c2, _d2, _e2, _f2;
            btn.setIcon("gear").setTooltip("Options").setDisabled(!((_c2 = rulesManager.getRuleById((_b2 = (_a2 = rule == null ? void 0 : rule.formatters) == null ? void 0 : _a2[idx]) != null ? _b2 : "toOriginal")) == null ? void 0 : _c2.hasOwnConfigTab()) || false).onClick(() => {
              var _a3, _b3;
              converterOptionDiv.style.display = "block";
              converterOptionDiv.empty();
              formatRule = rulesManager.getRuleById((_b3 = (_a3 = rule == null ? void 0 : rule.formatters) == null ? void 0 : _a3[idx]) != null ? _b3 : "toOriginal");
              formatRule == null ? void 0 : formatRule.configTab(converterOptionDiv, rule, this, previewComponent);
            });
            multiProp.styleDisabled(btn, !((_f2 = rulesManager.getRuleById((_e2 = (_d2 = rule == null ? void 0 : rule.formatters) == null ? void 0 : _d2[idx]) != null ? _e2 : "toOriginal")) == null ? void 0 : _f2.hasOwnConfigTab()) || false);
          });
        });
      }
      let converterOptionDiv = optionEL.createDiv({ cls: "property-converter-option" });
      converterOptionDiv.style.display = "none";
      converterOptionDiv.style.marginLeft = "20px";
      if (ruleFn.useRuleOption("resultAsLink")) {
        new import_obsidian9.Setting(optionEL).setName("Result as Link").setDesc("Format Result as Link").addDropdown((dropdown) => {
          rulesManager.getRulesByType("linkFormatter").forEach((rule2) => {
            dropdown.addOption(rule2.id, rule2.name);
          });
          dropdown.setValue(rule.linkFormatter || "toOriginalLink");
          dropdown.onChange(async (value) => {
            rule.linkFormatter = value;
            await this.plugin.saveSettings();
            this.updatePreview(rule, previewComponent);
          });
        });
      }
    }
    if (rule.type === "text" || rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
      if (ruleFn.useRuleOption("addContent")) {
        new import_obsidian9.Setting(optionEL).setName("Add content").setDesc("select how the content should be stored").addDropdown(
          (dropdown) => dropdown.addOption("overwrite", "replace content").addOption("start", "place on start").addOption("end", "place on end").setValue(rule.addContent).onChange(async (value) => {
            if (value !== "") {
              rule.addContent = value === "overwrite" ? "overwrite" : value === "start" ? "start" : "end";
              await this.plugin.saveSettings();
              this.updatePreview(rule, previewComponent);
            }
          })
        );
      }
    }
    if (ruleFn.useRuleOption("excludeFolders")) {
      const excludeEL = new import_obsidian9.Setting(optionEL).setName("Exclude Files and Folders from this rule").setDesc(`Currently ${((_a = rule.exclude) == null ? void 0 : _a.selectedFolders.length) || 0} folders and ${((_b = rule.exclude) == null ? void 0 : _b.selectedFiles.length) || 0} files will be ${((_c = rule.exclude) == null ? void 0 : _c.mode) || "exclude"}d.`).addButton((button) => {
        button.setIcon("folder-x").setButtonText("Exclude").setCta().onClick(() => {
          var _a2, _b2, _c2;
          openDirectorySelectionModal(
            this.app,
            ((_a2 = rule.exclude) == null ? void 0 : _a2.selectedFolders) || [],
            ((_b2 = rule.exclude) == null ? void 0 : _b2.selectedFiles) || [],
            {
              selectionMode: "exclude",
              displayMode: ((_c2 = rule.exclude) == null ? void 0 : _c2.display) || "folders",
              optionSelectionMode: false,
              optionShowFiles: true
            },
            (result) => {
              var _a3, _b3, _c3;
              if (!result)
                return;
              if (!rule.exclude) {
                rule.exclude = Object.assign({}, DEFAULT_FILTER_FILES_AND_FOLDERS, {
                  mode: "exclude"
                });
              }
              ;
              rule.exclude.selectedFolders = result.folders;
              rule.exclude.selectedFiles = result.files;
              rule.exclude.mode = "exclude";
              rule.exclude.display = result.display;
              this.plugin.saveSettings();
              logger.log(DEBUG, rule.exclude);
              this.updateFilterIndicator(this.activeFile, this.propertiesListEl);
              excludeEL.setDesc(`Currently ${((_a3 = rule.exclude) == null ? void 0 : _a3.selectedFolders.length) || 0} folders and ${((_b3 = rule.exclude) == null ? void 0 : _b3.selectedFiles.length) || 0} files will be ${((_c3 = rule.exclude) == null ? void 0 : _c3.mode) || "exclude"}d.`);
            }
          );
        });
      });
    }
    if (ruleFn.useRuleOption("includeFolders")) {
      const includeEL = new import_obsidian9.Setting(optionEL).setName("Include Files and Folders for this rule ").setDesc(`Currently ${((_d = rule.include) == null ? void 0 : _d.selectedFolders.length) || 0} folders and ${((_e = rule.include) == null ? void 0 : _e.selectedFiles.length) || 0} files will be ${((_f = rule.include) == null ? void 0 : _f.mode) || "include"}d even if they are excluded globally.`).addButton((button) => {
        button.setIcon("folder-check").setButtonText("Include").setCta().onClick(() => {
          var _a2, _b2, _c2;
          openDirectorySelectionModal(
            this.app,
            ((_a2 = rule.include) == null ? void 0 : _a2.selectedFolders) || [],
            ((_b2 = rule.include) == null ? void 0 : _b2.selectedFiles) || [],
            {
              selectionMode: "include",
              displayMode: ((_c2 = rule.include) == null ? void 0 : _c2.display) || "folders",
              optionSelectionMode: false,
              optionShowFiles: true
            },
            (result) => {
              var _a3, _b3, _c3;
              if (!result)
                return;
              if (!rule.include) {
                rule.include = Object.assign({}, DEFAULT_FILTER_FILES_AND_FOLDERS, {
                  mode: "include"
                });
              }
              ;
              rule.include.selectedFolders = result.folders;
              rule.include.selectedFiles = result.files;
              rule.include.mode = "include";
              rule.include.display = result.display;
              this.plugin.saveSettings();
              logger.log(DEBUG, rule.include);
              this.updateFilterIndicator(this.activeFile, this.propertiesListEl);
              includeEL.setDesc(`Currently ${((_a3 = rule.include) == null ? void 0 : _a3.selectedFolders.length) || 0} folders and ${((_b3 = rule.include) == null ? void 0 : _b3.selectedFiles.length) || 0} files will be ${((_c3 = rule.include) == null ? void 0 : _c3.mode) || "include"}d.`);
            }
          );
        });
      });
    }
    if (ruleFn.useRuleOption("script")) {
      new import_obsidian9.Setting(optionEL).setName("Script").setDesc("edit the script for own modifications").addButton((button) => {
        button.setButtonText("JS Editor").onClick(() => {
          var _a2, _b2, _c2;
          logger.log(
            DEBUG,
            `Opening code editor for rule ${rule.id} with content ${rule.content}, file: ${(_a2 = this.activeFile) == null ? void 0 : _a2.path}`,
            this.activeFile,
            this.activeFile ? this.app.metadataCache.getFileCache(this.activeFile) || {} : {}
          );
          openCodeEditorModal(
            this.app,
            this.plugin,
            rule.buildInCode,
            ((_b2 = rule.typeProperty) == null ? void 0 : _b2.type) || "text",
            this.activeFile,
            this.activeFile ? ((_c2 = this.app.metadataCache.getFileCache(this.activeFile)) == null ? void 0 : _c2.frontmatter) || {} : {},
            (result) => {
              if (!result)
                return;
              rule.buildInCode = result.code;
              rule.useCustomCode = true;
              button.setCta();
              this.plugin.saveSettings();
              this.updatePreview(rule, previewComponent);
            }
          );
        });
        if (rule.useCustomCode) {
          button.setCta();
        } else {
          button.removeCta();
        }
      });
    }
    let ruleOptionDiv = optionEL.createDiv({ cls: "property-rule-option" });
    ruleOptionDiv.style.marginLeft = "20px";
    rulesManager.buildConfigTab(rule.content, ruleOptionDiv, rule, this, previewComponent);
    this.updatePreview(rule, previewComponent);
  }
  /**
   * Retrieves the configuration option for a specific rule and property.
   *
   * @param ruleId - The unique identifier of the rule.
   * @param propertyId - The specific property for which the configuration is being retrieved.
   * @returns The configuration value for the specified property, or undefined if not found.
   */
  getOptionConfig(ruleId, propertyId) {
    const rule = this.plugin.settings.rules.find((rule2) => rule2.id === ruleId);
    if (rule) {
      const optionConfig = rule.optionsConfig[ruleId];
      if (optionConfig[propertyId]) {
        return optionConfig[propertyId];
      }
    }
    return void 0;
  }
  /**
   * Sets the configuration option for a specific rule and property.
   *
   * @param ruleId - The unique identifier of the rule.
   * @param propertyId - The specific property for which the configuration is being set.
   * @param config - The configuration value to be set.
   */
  setOptionConfig(ruleId, propertyId, config) {
    const rule = this.plugin.settings.rules.find((rule2) => rule2.id === ruleId);
    if (rule) {
      if (!rule.optionsConfig)
        rule.optionsConfig = {};
      if (!rule.optionsConfig[ruleId])
        rule.optionsConfig[ruleId] = {};
      rule.optionsConfig[ruleId][propertyId] = config;
      this.plugin.saveSettings();
    }
  }
  hasOptionConfig(ruleId) {
    const rule = this.plugin.settings.rules.find((rule2) => rule2.id === ruleId);
    if (rule) {
      if (!rule.optionsConfig)
        rule.optionsConfig = {};
      if (!rule.optionsConfig[ruleId])
        rule.optionsConfig[ruleId] = {};
      return Object.keys(rule.optionsConfig[ruleId]).length > 0;
    }
    return false;
  }
  setOptionConfigDefaults(ruleId, defaults) {
    const rule = this.plugin.settings.rules.find((rule2) => rule2.id === ruleId);
    if (rule) {
      if (!rule.optionsConfig)
        rule.optionsConfig = {};
      rule.optionsConfig[ruleId] = Object.assign({}, defaults, rule.optionsConfig[ruleId] || {});
    }
    return rule.optionsConfig[ruleId];
  }
  renderSearchResults(searchContainerEl, searchTerm, rowIndex) {
    this.clearSearchResults(searchContainerEl);
    const filteredProperties = Object.entries(this.knownProperties).filter(([name]) => name.toLowerCase().includes(searchTerm.toLowerCase()));
    if (filteredProperties.length === 0 && searchTerm) {
      return;
    }
    if (filteredProperties.length === 0 && !searchTerm) {
      return;
    }
    const resultsEl = searchContainerEl.createDiv({ cls: "property-search-results menu" });
    resultsEl.style.position = "absolute";
    resultsEl.style.top = "100%";
    resultsEl.style.left = "0";
    resultsEl.style.width = "calc(100% + 100px)";
    resultsEl.style.zIndex = "10";
    resultsEl.style.maxHeight = "200px";
    resultsEl.style.overflowY = "auto";
    let activeIndex = -1;
    const updateActiveItem = (newIndex) => {
      const items = resultsEl.querySelectorAll(".menu-item");
      items.forEach((item, index) => {
        if (index === newIndex) {
          item.addClass("property-search-is-active");
          item.scrollIntoView({ block: "nearest" });
        } else {
          item.removeClass("property-search-is-active");
        }
      });
      activeIndex = newIndex;
    };
    const selectActiveItem = async () => {
      if (activeIndex >= 0 && activeIndex < filteredProperties.length) {
        const [name, info] = filteredProperties[activeIndex];
        this.plugin.settings[this.settingsParameter][rowIndex].property = name;
        this.plugin.settings[this.settingsParameter][rowIndex].type = info.type;
        this.plugin.settings[this.settingsParameter][rowIndex].value = void 0;
        await this.plugin.saveSettings();
        this.clearSearchResults(searchContainerEl);
        this.display();
      }
    };
    filteredProperties.forEach(([name, info], index) => {
      const itemEl = resultsEl.createDiv({ cls: "menu-item" });
      const itemIcon = itemEl.createSpan({ cls: "menu-item-icon" });
      updatePropertyIcon(itemIcon, info.type);
      itemEl.createSpan({ text: name });
      itemEl.addEventListener("mousedown", async (e) => {
        e.preventDefault();
        activeIndex = index;
        await selectActiveItem();
      });
    });
    searchContainerEl.addEventListener("keydown", async (e) => {
      const items = resultsEl.querySelectorAll(".menu-item");
      if (e.key === "ArrowDown") {
        e.preventDefault();
        updateActiveItem((activeIndex + 1) % items.length);
      } else if (e.key === "ArrowUp") {
        e.preventDefault();
        updateActiveItem((activeIndex - 1 + items.length) % items.length);
      } else if (e.key === "Enter") {
        e.preventDefault();
        await selectActiveItem();
      }
    });
  }
  clearSearchResults(searchContainerEl) {
    const resultsEl = searchContainerEl.querySelector(".property-search-results");
    if (resultsEl) {
      resultsEl.remove();
    }
  }
  renderValueInput(containerEl, propertyInfo, currentValue, index) {
    let returnComponent;
    if (!propertyInfo) {
      containerEl.setText("");
      containerEl.addClass("text-muted");
      return;
    }
    const type = propertyInfo.type;
    switch (type) {
      case "number":
        returnComponent = new import_obsidian9.TextComponent(containerEl).setPlaceholder("Numeric Value").setValue(currentValue !== void 0 && currentValue !== null ? String(currentValue) : "").onChange(async (value) => {
          const numValue = value === "" ? void 0 : parseFloat(value);
          this.plugin.settings[this.settingsParameter][index].value = isNaN(numValue) ? void 0 : numValue;
          await this.plugin.saveSettings();
        });
        returnComponent.inputEl.type = "number";
        break;
      case "checkbox":
        returnComponent = containerEl.createDiv({ cls: "tri-state-checkbox clickable-icon" });
        returnComponent.setAttribute("aria-label", "Checkbox change state");
        returnComponent.setAttribute("role", "checkbox");
        const updateCheckboxVisual = (state) => {
          let iconName;
          let ariaState;
          if (state === true) {
            iconName = "check-square";
            ariaState = "true";
          } else if (state === false) {
            iconName = "square";
            ariaState = "false";
          } else {
            iconName = "minus-square";
            ariaState = "mixed";
          }
          (0, import_obsidian9.setIcon)(returnComponent, iconName);
          returnComponent.setAttribute("aria-checked", ariaState);
          returnComponent.dataset.state = String(state);
        };
        updateCheckboxVisual(currentValue);
        returnComponent.addEventListener("click", async () => {
          let currentState = returnComponent.dataset.state;
          let nextState;
          if (currentState === "false") {
            nextState = true;
          } else if (currentState === "true") {
            nextState = void 0;
          } else {
            nextState = false;
          }
          this.plugin.settings[this.settingsParameter][index].value = nextState;
          await this.plugin.saveSettings();
          updateCheckboxVisual(nextState);
        });
        break;
      case "date":
        returnComponent = new import_obsidian9.TextComponent(containerEl).setPlaceholder("YYYY-MM-DD").setValue(currentValue || "").onChange(async (value) => {
          this.plugin.settings[this.settingsParameter][index].value = value || void 0;
          await this.plugin.saveSettings();
        });
        returnComponent.inputEl.type = "date";
        break;
      case "datetime":
        returnComponent = new import_obsidian9.TextComponent(containerEl).setPlaceholder("YYYY-MM-DDTHH:mm").setValue(currentValue || "").onChange(async (value) => {
          this.plugin.settings[this.settingsParameter][index].value = value || void 0;
          await this.plugin.saveSettings();
        });
        returnComponent.inputEl.type = "datetime-local";
        break;
      case "aliases":
      case "tags":
      case "multitext":
        returnComponent = new import_obsidian9.TextComponent(containerEl).setPlaceholder("values (divided by comma)").setValue(Array.isArray(currentValue) ? currentValue.join(", ") : currentValue || "").onChange(async (value) => {
          const arrayValue = value.split(",").map((s) => s.trim()).filter((s) => s);
          this.plugin.settings[this.settingsParameter][index].value = arrayValue.length > 0 ? arrayValue : void 0;
          await this.plugin.saveSettings();
        });
        break;
      case "text":
      default:
        returnComponent = new import_obsidian9.TextComponent(containerEl).setPlaceholder("value").setValue(currentValue || "").onChange(async (value) => {
          this.plugin.settings[this.settingsParameter][index].value = value || void 0;
          await this.plugin.saveSettings();
        });
        break;
    }
    if (type !== "checkbox") {
      returnComponent.inputEl.style.backgroundColor = "transparent";
      returnComponent.inputEl.style.width = "100%";
      returnComponent.inputEl.style.border = "none";
    }
    return returnComponent;
  }
  async updatePreview(rule, previewComponent) {
    if (this.activeFile) {
      let ruleResult;
      await this.app.fileManager.processFrontMatter(this.activeFile, async (frontmatter) => {
        ruleResult = await executeRuleObject("preview", this.app, this, this.plugin.settings, this.activeFile, "", rule, frontmatter);
      }, { "mtime": this.activeFile.stat.mtime });
      switch (typeof ruleResult) {
        case "object":
          if (Array.isArray(ruleResult))
            previewComponent.inputEl.value = ruleResult.toString();
          break;
        default:
          if (previewComponent == null ? void 0 : previewComponent.inputEl)
            previewComponent.inputEl.value = ruleResult;
          break;
      }
    }
  }
  async display() {
    const containerEl = this.container;
    containerEl.empty();
    this.knownProperties = await this.tools.fetchKnownProperties(this.app);
    this.propertiesListEl = containerEl.createDiv("properties-list");
    this.plugin.settings.rules.forEach((rule, index) => {
      this.renderPropertyRow(this.propertiesListEl, rule, index);
    });
    let activeFile = this.app.workspace.getActiveFile();
    this.updateFilterIndicator(activeFile, this.propertiesListEl);
    const addBtnContainer = containerEl.createDiv({ cls: "setting-item-control" });
    addBtnContainer.style.justifyContent = "right";
    new import_obsidian9.ButtonComponent(addBtnContainer).setButtonText("Add Property").setIcon("plus-circle").setCta().onClick(async () => {
      const defaultName = "";
      this.plugin.settings[this.settingsParameter].push(Object.assign({}, DEFAULT_RULE_DEFINITION, {
        id: (0, import_crypto.randomUUID)().toString()
      }));
      await this.plugin.saveSettings();
      this.display();
    }).buttonEl.className = "property-plus-button";
  }
  updateFilterIndicator(activeFile, propertiesListEl) {
    if (activeFile) {
      this.plugin.settings.rules.forEach((rule, index) => {
        const propertyRowEl = propertiesListEl.getElementsByClassName("property-setting-row")[index];
        const propertyLeftDiv = propertyRowEl.querySelector(".property-left-container");
        if (checkIfFileAllowed(activeFile, this.plugin.settings, rule)) {
          propertyLeftDiv == null ? void 0 : propertyLeftDiv.addClass("property-left-container-allowed");
        } else {
          propertyLeftDiv == null ? void 0 : propertyLeftDiv.removeClass("property-left-container-allowed");
        }
      });
    }
  }
};

// src/settings.ts
var FolderTagSettingTab = class extends import_obsidian10.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.scriptingTools = new ScriptingTools(app, plugin);
  }
  hide() {
    this.plugin.settings.liveRules = [];
    this.plugin.settings.rules.forEach((rule) => {
      let ruleFunction = rulesManager.getRuleById(rule.content);
      if (!ruleFunction)
        return;
      if (ruleFunction.isLiveRule) {
        this.plugin.settings.liveRules.push(rule);
      }
    });
    this.plugin.saveSettings();
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile && activeFile.extension === "md") {
      this.plugin.updateFrontmatterParameters("active-leaf-change", activeFile, this.plugin.settings.rules);
    }
  }
  display() {
    this.knownProperties = getPropertiesFromMetadataManager(this.app);
    this.knownTypes = getTypesFromMetadataManager(this.app);
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: `Front matter automate V${versionString}` });
    new import_obsidian10.Setting(containerEl).setName("Exclude Files and Folders globally").setDesc(`Currently ${this.plugin.settings.exclude.selectedFolders.length} folders and ${this.plugin.settings.exclude.selectedFiles.length} files will be ${this.plugin.settings.exclude.mode}d.`).addButton((button) => {
      button.setIcon("folder-x").setButtonText("Exclude").setCta().onClick(() => {
        openDirectorySelectionModal(
          this.app,
          this.plugin.settings.exclude.selectedFolders || [],
          this.plugin.settings.exclude.selectedFiles || [],
          {
            selectionMode: this.plugin.settings.exclude.mode || "exclude",
            displayMode: this.plugin.settings.exclude.display || "folders",
            optionSelectionMode: false,
            optionShowFiles: true
          },
          (result) => {
            if (!result)
              return;
            this.plugin.settings.exclude.selectedFolders = result.folders;
            this.plugin.settings.exclude.selectedFiles = result.files;
            this.plugin.settings.exclude.mode = result.mode;
            this.plugin.settings.exclude.display = result.display;
            this.plugin.saveSettings();
            this.display();
          }
        );
      });
    });
    new import_obsidian10.Setting(containerEl).setName("Include Files and Folders globally").setDesc(`Currently ${this.plugin.settings.include.selectedFolders.length} folders and ${this.plugin.settings.include.selectedFiles.length} files will be ${this.plugin.settings.include.mode}d even if they are excluded.`).addButton((button) => {
      button.setIcon("folder-check").setButtonText("Include").setCta().onClick(() => {
        openDirectorySelectionModal(
          this.app,
          this.plugin.settings.include.selectedFolders || [],
          this.plugin.settings.include.selectedFiles || [],
          {
            selectionMode: this.plugin.settings.include.mode || "include",
            displayMode: this.plugin.settings.include.display || "folders",
            optionSelectionMode: false,
            optionShowFiles: true
          },
          (result) => {
            if (!result)
              return;
            this.plugin.settings.include.selectedFolders = result.folders;
            this.plugin.settings.include.selectedFiles = result.files;
            this.plugin.settings.include.mode = result.mode;
            this.plugin.settings.include.display = result.display;
            this.plugin.saveSettings();
            this.display();
          }
        );
      });
    });
    new import_obsidian10.Setting(containerEl).setName("Debug").setDesc("Select the debug level to show in the console").addDropdown((dropdown) => {
      dropdown.addOptions(
        Object.fromEntries(logger.getLevelNames().map((level) => [level, level]))
      );
      dropdown.setValue(logger.getLevelName(this.plugin.settings.debugLevel));
      dropdown.onChange((value) => {
        this.plugin.settings.debugLevel = logger.getLevelByName(value);
        logger.setLevel(this.plugin.settings.debugLevel);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian10.Setting(containerEl).setName("Delay create event (until better solution is found)").setDesc("Set a delay before triggering the create event to allow for file creation to complete. (in milliseconds)").addText((text) => {
      text.setValue(this.plugin.settings.delayCreateEvent.toString());
      text.onChange(async (value) => {
        this.plugin.settings.delayCreateEvent = parseInt(value) || 0;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian10.Setting(containerEl).setName("Rules").setDesc("add rules to update selected parameters");
    this.rulesContainer = containerEl.createDiv("properties-list");
    const rulesTable = new RulesTable(this.app, this.plugin, this.rulesContainer, "rules");
    rulesTable.display();
  }
};

// src/rules/addPrefix.ts
var import_obsidian11 = require("obsidian");
var RuleAddPrefix = class extends RulePrototype {
  constructor() {
    super();
    this.id = "addPrefix";
    this.name = "Add a Prefix";
    this.description = "Adds a prefix to the input value.";
    this.ruleType = "formatter";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    var _a;
    const prefix = tools.getOptionConfig((_a = tools.getRule()) == null ? void 0 : _a.id, "prefix");
    return `${prefix}${input}`;
  }
  configTab(optionEL, rule, that, previewComponent) {
    optionEL.empty();
    that.setOptionConfigDefaults(rule.id, {
      prefix: ""
      // Default prefix
    });
    new import_obsidian11.Setting(optionEL).setName("Prefix").setDesc("Enter a prefix to be added at the beginning.").addText(
      (text) => text.setPlaceholder('e.g. "pre-"').setValue(that.getOptionConfig(rule.id, "prefix") || "").onChange(async (value) => {
        that.setOptionConfig(rule.id, "prefix", value);
        that.updatePreview(rule, previewComponent);
      })
    );
  }
};

// src/rules/addSuffix.ts
var import_obsidian12 = require("obsidian");
var RuleAddSuffix = class extends RulePrototype {
  constructor() {
    super();
    this.id = "addSuffix";
    this.name = "Add a Suffix";
    this.description = "Adds a suffix to the input value.";
    this.ruleType = "formatter";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    var _a;
    const suffix = tools.getOptionConfig((_a = tools.getRule()) == null ? void 0 : _a.id, "suffix");
    return `${input}${suffix}`;
  }
  configTab(optionEL, rule, that, previewComponent) {
    optionEL.empty();
    that.setOptionConfigDefaults(rule.id, {
      suffix: ""
      // Default suffix
    });
    new import_obsidian12.Setting(optionEL).setName("Suffix").setDesc("Enter a suffix to be added at the end.").addText(
      (text) => text.setPlaceholder('e.g. "_done"').setValue(that.getOptionConfig(rule.id, "suffix") || "").onChange(async (value) => {
        that.setOptionConfig(rule.id, "suffix", value);
        that.updatePreview(rule, previewComponent);
      })
    );
  }
};

// src/rules/automationAutoLink.ts
var import_obsidian16 = require("obsidian");

// src/suggesters/FolderSuggester.ts
var import_obsidian14 = require("obsidian");

// src/suggesters/suggest.ts
var import_obsidian13 = require("obsidian");

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element.document
  )) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element)
  );
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x, y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }, getWindow(popper2)) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)))
  );
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/suggesters/suggest.ts
var wrapAround = (value, size) => {
  return (value % size + size) % size;
};
var Suggest = class {
  constructor(owner, containerEl, scope) {
    this.owner = owner;
    this.containerEl = containerEl;
    containerEl.on(
      "click",
      ".suggestion-item",
      this.onSuggestionClick.bind(this)
    );
    containerEl.on(
      "mousemove",
      ".suggestion-item",
      this.onSuggestionMouseover.bind(this)
    );
    scope.register([], "ArrowUp", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem - 1, true);
        return false;
      }
    });
    scope.register([], "ArrowDown", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem + 1, true);
        return false;
      }
    });
    scope.register([], "Enter", (event) => {
      if (!event.isComposing) {
        this.useSelectedItem(event);
        return false;
      }
    });
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(_event, el) {
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  setSuggestions(values) {
    this.containerEl.empty();
    const suggestionEls = [];
    values.forEach((value) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(value, suggestionEl);
      suggestionEls.push(suggestionEl);
    });
    this.values = values;
    this.suggestions = suggestionEls;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    const currentValue = this.values[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  setSelectedItem(selectedIndex, scrollIntoView) {
    const normalizedIndex = wrapAround(
      selectedIndex,
      this.suggestions.length
    );
    const prevSelectedSuggestion = this.suggestions[this.selectedItem];
    const selectedSuggestion = this.suggestions[normalizedIndex];
    prevSelectedSuggestion == null ? void 0 : prevSelectedSuggestion.removeClass("is-selected");
    selectedSuggestion == null ? void 0 : selectedSuggestion.addClass("is-selected");
    this.selectedItem = normalizedIndex;
    if (scrollIntoView) {
      selectedSuggestion.scrollIntoView(false);
    }
  }
};
var TextInputSuggest = class {
  constructor(app, inputEl) {
    this.app = app;
    this.inputEl = inputEl;
    this.scope = new import_obsidian13.Scope();
    this.suggestEl = createDiv("suggestion-container");
    const suggestion = this.suggestEl.createDiv("suggestion");
    this.suggest = new Suggest(this, suggestion, this.scope);
    this.scope.register([], "Escape", this.close.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on(
      "mousedown",
      ".suggestion-container",
      (event) => {
        event.preventDefault();
      }
    );
  }
  onInputChanged() {
    const inputStr = this.inputEl.value;
    const suggestions = this.getSuggestions(inputStr);
    if (!suggestions) {
      this.close();
      return;
    }
    if (suggestions.length > 0) {
      this.suggest.setSuggestions(suggestions);
      this.open(this.app.dom.appContainerEl, this.inputEl);
    } else {
      this.close();
    }
  }
  open(container, inputEl) {
    this.app.keymap.pushScope(this.scope);
    container.appendChild(this.suggestEl);
    this.popper = createPopper(inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "sameWidth",
          enabled: true,
          fn: ({ state, instance }) => {
            const targetWidth = `${state.rects.reference.width}px`;
            if (state.styles.popper.width === targetWidth) {
              return;
            }
            state.styles.popper.width = targetWidth;
            instance.update();
          },
          phase: "beforeWrite",
          requires: ["computeStyles"]
        }
      ]
    });
  }
  close() {
    this.app.keymap.popScope(this.scope);
    this.suggest.setSuggestions([]);
    if (this.popper)
      this.popper.destroy();
    this.suggestEl.detach();
  }
};

// src/suggesters/FolderSuggester.ts
var FolderSuggest = class extends TextInputSuggest {
  constructor(app, inputEl) {
    super(app, inputEl);
  }
  getSuggestions(inputStr) {
    const abstractFiles = this.app.vault.getAllLoadedFiles();
    const folders = [];
    const lowerCaseInputStr = inputStr.toLowerCase();
    abstractFiles.forEach((folder) => {
      if (folder instanceof import_obsidian14.TFolder && folder.path.toLowerCase().contains(lowerCaseInputStr)) {
        folders.push(folder);
      }
    });
    return folders.slice(0, 1e3);
  }
  renderSuggestion(file, el) {
    el.setText(file.path.replace(/^(?!\/)/, "/"));
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path.replace(/^(?!\/)/, "/");
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/suggesters/FileSuggester.ts
var import_obsidian15 = require("obsidian");
var FileSuggest = class extends TextInputSuggest {
  constructor(inputEl, plugin, folder) {
    super(plugin.app, inputEl);
    this.inputEl = inputEl;
    this.plugin = plugin;
    this.folder = folder;
  }
  get_error_msg() {
    return `Folder ${this.folder} doesn't exist`;
  }
  getSuggestions(input_str) {
    const all_files = errorWrapperSync(
      () => getFilesFromFolder(
        this.plugin.app,
        this.folder
      ),
      this.get_error_msg()
    );
    if (!all_files) {
      return [];
    }
    const files = [];
    const lower_input_str = input_str.toLowerCase();
    all_files.forEach((file) => {
      if (file instanceof import_obsidian15.TFile && file.extension === "md" && file.path.toLowerCase().contains(lower_input_str)) {
        files.push(file);
      }
    });
    return files.slice(0, 1e3);
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/rules/automationAutoLink.ts
var RuleAutomationAutoLink = class extends RulePrototype {
  constructor() {
    super();
    this.id = "autoLink";
    this.name = "Auto Link (advanced)";
    this.description = "Checks if a link exists in a specified folder. If not, it creates a new file based on a specified template and adds a link to it.";
    this.ruleType = "automation";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "multitext"];
    this.configElements = this.defaultConfigElements({ removeContent: false, inputProperty: false, addPrefix: false, spaceReplacement: false, specialCharacterReplacement: false, convertToLowerCase: false, resultAsLink: false, script: false });
  }
  /**
   * Function to create a link to a file. If the file does not exist, it creates a new file based on a template.
   * @param app - The Obsidian app instance.
   * @param file - The current file.
   * @param tools - The scripting tools instance.
   * @returns The new content for the frontmatter property.
   */
  async fx(app, file, tools) {
    const currentContent = tools.getCurrentContent();
    let newContent = new Array();
    const rule = tools.getRule();
    if (!rule) {
      logger.log(ERROR, `autoLink: rule not found, returning current content ${currentContent}`);
      return currentContent;
    }
    const options = tools.getOptionConfig(rule.id);
    const filesToCheck = tools.getFilesInVault(options.destinationFolder);
    let links = currentContent || [];
    if (typeof links === "object" && !Array.isArray(links)) {
      links = [];
    } else if (typeof links === "string") {
      links = [links];
    }
    for (const part of links) {
      let link = tools.extractLinkParts(part);
      let linkFile = tools.getTFileFromPath(link.path, filesToCheck);
      if (!linkFile) {
        if (options.askConfirmation) {
          const result = await new AlertModal(app, "Create new file", `File ${link.path} does not exist. Do you want to create it?`, "Create", "Cancel", "Don't ask again.").openAndGetValue();
          if (!result.proceed)
            return;
          options.askConfirmation = !result.data.askConfirmation;
        }
        link.path = options.destinationFolder + "/" + link.title + ".md";
        linkFile = await tools.createFileFromPath(link.path, options.addTemplate ? options.templateFile : void 0);
        tools.updateFrontmatter(rule.property, [`[[${tools.removeLeadingSlash(link.path)}|${link.title}]]`], linkFile);
      } else {
      }
      if (linkFile) {
        link.path = linkFile.path;
        newContent.push(`[[${tools.removeLeadingSlash(link.path)}|${link.title}]]`);
      }
    }
    tools.updateFrontmatter(rule.property, newContent);
    return newContent;
  }
  configTab(optionEL, rule, that, previewComponent) {
    optionEL.empty();
    that.setOptionConfigDefaults(rule.id, {
      addTemplate: true,
      askConfirmation: true,
      destinationFolder: "/",
      templateFile: ""
    });
    new import_obsidian16.Setting(optionEL).setName("Add template to new files").setDesc("Automatically add template to new files").addToggle((toggle) => toggle.setValue(that.getOptionConfig(rule.id, "addTemplate") || false).onChange(async (value) => {
      that.setOptionConfig(rule.id, "addTemplate", value);
    }));
    new import_obsidian16.Setting(optionEL).setName("Ask for confirmation").setDesc("Ask for confirmation before creating new files").addToggle((toggle) => toggle.setValue(that.getOptionConfig(rule.id, "askConfirmation") || false).onChange(async (value) => {
      that.setOptionConfig(rule.id, "askConfirmation", value);
    }));
    let destinationFolderEl;
    new import_obsidian16.Setting(optionEL).setName("Destination Folder").setDesc("Folder to place new files").addSearch((cb) => {
      destinationFolderEl = cb;
      new FolderSuggest(that.app, cb.inputEl);
      cb.setPlaceholder("enter folder or browse ...").setValue(that.getOptionConfig(rule.id, "destinationFolder") || "").onChange((newFolder) => {
        newFolder = newFolder.trim();
        newFolder = newFolder.replace(/\/$/, "");
        that.setOptionConfig(rule.id, "destinationFolder", newFolder);
      });
      cb.containerEl.addClass("frontmatter-automate-search");
    }).addExtraButton(
      (button) => button.setIcon("folder-tree").setTooltip("Select template folder").onClick(async () => {
        openDirectorySelectionModal(
          that.app,
          [that.getOptionConfig(rule.id, "destinationFolder")],
          [],
          {
            title: "Select folder to place new files",
            selectionMode: "include",
            displayMode: "folder",
            optionSelectionMode: false,
            optionShowFiles: false
          },
          (result) => {
            if (!result)
              return;
            if (result.folders.length === 0 || !result.folders[0] || typeof result.folders[0] !== "string")
              return;
            let selectedFolder = result.folders[0].trim().replace(/\/$/, "");
            if (selectedFolder === "")
              selectedFolder = "/";
            if (!selectedFolder)
              return;
            destinationFolderEl.setValue(selectedFolder);
            that.setOptionConfig(rule.id, "destinationFolder", selectedFolder);
          }
        );
      })
    );
    let destinationFileEl;
    new import_obsidian16.Setting(optionEL).setName("Template File").setDesc("Select a template file to add to new files").addSearch((cb) => {
      destinationFileEl = cb;
      new FileSuggest(cb.inputEl, that.plugin, "");
      cb.setPlaceholder("enter folder or browse ...").setValue(that.getOptionConfig(rule.id, "templateFile") || "").onChange((newFile) => {
        newFile = newFile.trim();
        newFile = newFile.replace(/\/$/, "");
        that.setOptionConfig(rule.id, "templateFile", newFile);
      });
      cb.containerEl.addClass("frontmatter-automate-search");
    }).addExtraButton(
      (button) => button.setIcon("folder-tree").setTooltip("Select template file").onClick(async () => {
        openDirectorySelectionModal(
          that.app,
          [],
          [that.getOptionConfig(rule.id, "templateFile")],
          {
            title: "Select template for new files",
            selectionMode: "include",
            displayMode: "file",
            optionSelectionMode: false,
            optionShowFiles: true
          },
          (result) => {
            if (!result)
              return;
            if (result.files.length === 0 || !result.files[0] || typeof result.files[0] !== "string")
              return;
            let selectedFile = result.files[0].trim().replace(/\/$/, "");
            if (!selectedFile)
              return;
            destinationFileEl.setValue(selectedFile);
            that.setOptionConfig(rule.id, "templateFile", selectedFile);
          }
        );
      })
    );
  }
};

// src/rules/buildInAutoCompleteModal.ts
var import_obsidian18 = require("obsidian");

// src/autocompleteModal.ts
var import_obsidian17 = require("obsidian");
var AutocompleteModal = class extends import_obsidian17.Modal {
  /**
   * Creates an instance of the DirectorySelectionModal.
   * @param app - The Obsidian App instance.
   * @param plugin - The plugin instance.
   * @param expectedType - Expected return type.
   * @param activeFile - The currently active file or folder.
   * @param frontmatter - Frontmatter data for the active file.
   * @param okCallback - Function to call when the user clicks "OK". Receives the selection result.
   */
  constructor(app, plugin, rule, options, activeFile, frontmatter, okCallback) {
    super(app);
    this.knownProperties = {};
    this.result = {};
    this.changeCallback = (propertyInfo, value) => {
      if (propertyInfo) {
        this.result[propertyInfo.name] = value;
      }
    };
    this.app = app;
    this.tools = new ScriptingTools(app, this.plugin, this.frontmatter);
    this.activeFile = activeFile;
    this.frontmatter = frontmatter;
    this.plugin = plugin;
    this.rule = rule;
    this.options = options;
    this.expectedType = rule.type;
    this.promise = new Promise((resolve) => {
      this.resolvePromise = resolve;
    });
    if (okCallback)
      this.okCallback = okCallback;
    this.resetToInitial();
  }
  /**
   * Resets the current selection state to the initial state provided at construction.
   */
  resetToInitial() {
  }
  /**
   * Resets the current selection state to empty.
   */
  resetToEmpty() {
  }
  /**
   * Called when the modal is opened. Builds the UI.
   */
  async onOpen() {
    var _a;
    this.knownProperties = await this.tools.fetchKnownProperties(this.app);
    const { contentEl } = this;
    if (contentEl.parentElement)
      contentEl.parentElement.style.width = "900px";
    contentEl.empty();
    contentEl.addClass("codeEditor-modal");
    contentEl.createEl("h2", { text: "Please complete the following properties" });
    contentEl.createEl("body", { text: `File: ${(_a = this.activeFile) == null ? void 0 : _a.path}` });
    this.contentRootElement = contentEl.createDiv({ cls: "codeEditor-container" });
    this.contentRootElement.style.overflowY = "auto";
    this.contentRootElement.style.padding = "10px";
    this.contentRootElement.style.marginTop = "10px";
    this.contentRootElement.style.marginBottom = "10px";
    const propertyContainerEl = contentEl.createDiv({ cls: "codeEditor-options" });
    propertyContainerEl.style.flexDirection = "column";
    for (const [key, value] of Object.entries(this.frontmatter)) {
      if (key.startsWith(this.rule.property + this.options.propertyDelimiter)) {
        const rowEl = propertyContainerEl.createDiv({ cls: "property-setting-row setting-item" });
        rowEl.style.width = "100%";
        const controlEl = rowEl.createDiv({ cls: "setting-item-control" });
        controlEl.style.display = "flex";
        controlEl.style.alignItems = "center";
        controlEl.style.justifyContent = "space-between";
        controlEl.style.width = "100%";
        controlEl.style.gap = "0px";
        const leftContainer = controlEl.createDiv({ cls: "property-left-container" });
        leftContainer.style.display = "flex";
        leftContainer.style.alignItems = "center";
        leftContainer.style.minWidth = "250px";
        const iconEl = leftContainer.createSpan({ cls: "property-icon setting-item-icon" });
        iconEl.style.marginRight = "8px";
        updatePropertyIcon(iconEl, this.knownProperties[key].type);
        const searchContainer = leftContainer.createDiv({ cls: "property-search-container" });
        const nameInput = new import_obsidian17.TextComponent(searchContainer).setValue(key).setPlaceholder("Property name").setDisabled(true);
        nameInput.inputEl.style.border = "none";
        const middleContainer = controlEl.createDiv({ cls: "property-middle-container" });
        const valueContainer = middleContainer.createDiv({ cls: "property-value-container" });
        valueContainer.style.width = "100%";
        let previewComponent = renderValueInput(valueContainer, this.knownProperties[key], this.frontmatter[key], this.changeCallback);
        previewComponent.inputEl.style.width = "100%";
        previewComponent.inputEl.style.backgroundColor = "transparent";
        const deleteButtonContainer = controlEl.createDiv({ cls: "property-right-container" });
        deleteButtonContainer.style.marginLeft = "auto";
      }
    }
    this.createActionButtons(contentEl);
  }
  /**
   * Creates the "OK" and "Reset" buttons.
   * @param containerEl - The HTML element to append the buttons to.
   */
  createActionButtons(containerEl) {
    const buttonsEl = containerEl.createDiv({ cls: "modal-buttons" });
    buttonsEl.style.marginTop = "15px";
    buttonsEl.style.display = "flex";
    buttonsEl.style.justifyContent = "flex-end";
    buttonsEl.style.gap = "10px";
    const resetButton = buttonsEl.createEl("button");
    (0, import_obsidian17.setIcon)(resetButton, "reset");
    resetButton.ariaLabel = "Reset selection";
    resetButton.onclick = () => {
      this.resetToInitial();
    };
    const emptyButton = buttonsEl.createEl("button");
    (0, import_obsidian17.setIcon)(emptyButton, "eraser");
    emptyButton.ariaLabel = "Clear selection";
    emptyButton.onclick = () => {
      this.resetToEmpty();
    };
    const cancelButton = buttonsEl.createEl("button", { text: "Cancel" });
    cancelButton.ariaLabel = "close and discard changes";
    cancelButton.onclick = () => {
      logger.log(DEBUG, "Cancel Clicked - Returning");
      this.resolvePromise(null);
      this.close();
    };
    const okButton = buttonsEl.createEl("button", { text: "OK", cls: "mod-cta" });
    cancelButton.ariaLabel = "close and save changes";
    okButton.onclick = () => {
      this.resolvePromise({ values: this.result });
      this.close();
    };
  }
  /**
   * Called when the modal is closed. Cleans up resources.
   */
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  openAndGetValues() {
    this.open();
    return this.promise;
  }
};
async function openAutocompleteModal(app, plugin, rule, options, activeFile, frontmatter) {
  if (!app) {
    logger.log(ERROR, "App is undefined");
    return null;
  }
  const modal = new AutocompleteModal(app, plugin, rule, options, activeFile, frontmatter);
  return await modal.openAndGetValues();
}

// src/rules/buildInAutoCompleteModal.ts
var RuleBuildInAutoCompleteModal = class extends RulePrototype {
  constructor() {
    super();
    this.id = "autoCompleteModal";
    this.ruleType = "autocomplete.modal";
    this.name = "Auto-Complete Modal";
    this.description = "Displays an auto-complete modal for the frontmatter parameter.";
    this.source = "function (app, file, tools) { // do not change this line!\n  const input = tools.getCurrentContent(); // Get the current content of property\n  return input; // Return the input unaltered\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    logger.log(DEBUG, `autocomplete modal, work in progress...`);
    const currentContent = tools.getCurrentContent();
    const rule = tools.getRule();
    if (!rule)
      return currentContent;
    const options = tools.getOptionConfig(rule.id);
    if (!rule)
      return tools.getCurrentContent() || "autocomplete.modal";
    const frontmatter = tools.getFrontmatter();
    const hasAutocompleteProperties = Object.keys(frontmatter).some(
      (key) => key.startsWith(rule.property + options.propertyDelimiter) && (frontmatter[key] === void 0 || frontmatter[key] === null || frontmatter[key] === "")
    );
    if (!hasAutocompleteProperties)
      return tools.getCurrentContent() || "autocomplete.modal";
    openAutocompleteModal(
      tools.app,
      tools.plugin,
      rule,
      options,
      tools.getActiveFile(),
      tools.getFrontmatter()
    ).then((result) => {
      logger.log(DEBUG, "autocomplete modal result", result, tools.getFrontmatter());
      if (result == null ? void 0 : result.values) {
        if (!tools.app) {
          logger.log(ERROR, "App is not defined");
          return tools.getCurrentContent() || "autocomplete.modal Error. See console for details.";
        }
        tools.app.fileManager.processFrontMatter(file, (frontmatter2) => {
          for (const [key, value] of Object.entries(result.values)) {
            frontmatter2[key] = value;
          }
        }, { "mtime": file.stat.mtime });
      }
      return tools.getCurrentContent();
    }).catch((error) => {
      logger.log(ERROR, "Error opening autocomplete modal:", error);
      return tools.getCurrentContent() || "autocomplete.modal Error. See console for details.";
    });
  }
  configTab(optionEL, rule, that, previewComponent) {
    optionEL.empty();
    that.setOptionConfigDefaults(rule.id, {
      propertyDelimiter: "."
    });
    new import_obsidian18.Setting(optionEL).setName("Delimiter").setDesc("Character to determine which property should appear in the modal").addText((text) => text.setValue(that.getOptionConfig(rule.id, "propertyDelimiter") || ".").onChange(async (value) => {
      that.setOptionConfig(rule.id, "propertyDelimiter", value);
    }));
  }
};

// src/rules/buildInConcatProperties.ts
var import_obsidian19 = require("obsidian");
var RuleBuildInConcatProperties = class extends RulePrototype {
  constructor() {
    super();
    this.id = "concatProperties";
    this.ruleType = "buildIn";
    this.name = "Concat Properties";
    this.description = "Concatenates multiple properties from the frontmatter.";
    this.source = "function (app, file, tools) { // do not change this line!\n  const propertyIds = tools.getOptionConfig(tools.getRule()?.id,'inputProperties');\n  if (!Array.isArray(propertyIds) || propertyIds.length === 0) {\n    return 'No properties selected';\n  }\n  const delimiter = tools.getOptionConfig(tools.getRule()?.id,'delimiter');\n  const onlyWhenAllPropertiesExist = tools.getOptionConfig(tools.getRule()?.id, 'onlyWhenAllPropertiesExist') || false;\n  if (onlyWhenAllPropertiesExist) {\n    // Check if all properties exist\n    const allExist = propertyIds.every(id => { \n      if (id === undefined || id === null || id === '') {\n        return true; // Skip empty or undefined property IDs\n      }\n      const propertyValue = tools.getFrontmatterProperty(id);\n      const result = propertyValue !== undefined && propertyValue !== null && propertyValue !== '';\n      return result;\n    });\n    if (!allExist) {\n      return '';\n    }\n  }\n  const result = propertyIds.map(id => {\n    let value = tools.getFrontmatterProperty(id);\n    if (value === undefined || value === null || value === '') {\n      return ''; // Skip empty or undefined properties\n    }\n    return value.toString();\n  }).filter(res => res !== undefined).join(delimiter);\n  return result;\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    var _a, _b, _c;
    const propertyIds = tools.getOptionConfig((_a = tools.getRule()) == null ? void 0 : _a.id, "inputProperties");
    if (!Array.isArray(propertyIds) || propertyIds.length === 0) {
      return "No properties selected";
    }
    const delimiter = tools.getOptionConfig((_b = tools.getRule()) == null ? void 0 : _b.id, "delimiter");
    const onlyWhenAllPropertiesExist = tools.getOptionConfig((_c = tools.getRule()) == null ? void 0 : _c.id, "onlyWhenAllPropertiesExist") || false;
    if (onlyWhenAllPropertiesExist) {
      const allExist = propertyIds.every((id) => {
        if (id === void 0 || id === null || id === "") {
          return true;
        }
        const propertyValue = tools.getFrontmatterProperty(id);
        const result2 = propertyValue !== void 0 && propertyValue !== null && propertyValue !== "";
        return result2;
      });
      if (!allExist) {
        return "";
      }
    }
    const result = propertyIds.map((id) => {
      let value = tools.getFrontmatterProperty(id);
      if (value === void 0 || value === null || value === "") {
        return "";
      }
      return value.toString();
    }).filter((res) => res !== void 0).join(delimiter);
    return result;
  }
  configTab(optionEL, rule, that, previewComponent) {
    that.setOptionConfigDefaults(rule.id, {
      delimiter: " ",
      // Default delimiter for concatenation
      inputProperties: [],
      onlyWhenAllPropertiesExist: true
      // Default to false
    });
    const multiProp = new MultiPropertySetting(optionEL).setName("Input Properties").setDesc("Select properties as input. Use 'Space replacement' as delimiter.").setOptions(Object.keys(that.knownProperties).map((key) => key)).setValue(that.getOptionConfig(rule.id, "inputProperties") || []).onChange((arr) => {
      that.setOptionConfig(rule.id, "inputProperties", arr);
      that.updatePreview(rule, previewComponent);
    });
    new import_obsidian19.Setting(optionEL).setName("Delimiter").setDesc("Specify a delimiter to use when concatenating properties. Default is a space.").addText(
      (text) => text.setValue(that.getOptionConfig(rule.id, "delimiter") || "").setPlaceholder("Enter delimiter").onChange(async (value) => {
        that.setOptionConfig(rule.id, "delimiter", value);
        that.updatePreview(rule, previewComponent);
      })
    );
    new import_obsidian19.Setting(optionEL).setName("Only when all properties exist").setDesc("If enabled, the rule will only return a value if all selected properties exist and not empty.").addToggle(
      (toggle) => toggle.setValue(that.getOptionConfig(rule.id, "onlyWhenAllPropertiesExist") || true).onChange(async (value) => {
        that.setOptionConfig(rule.id, "onlyWhenAllPropertiesExist", value);
        that.updatePreview(rule, previewComponent);
      })
    );
  }
};

// src/rules/buildInConstant.ts
var import_obsidian20 = require("obsidian");
var RuleBuildInConstant = class extends RulePrototype {
  constructor() {
    super();
    this.id = "constant";
    this.ruleType = "buildIn";
    this.name = "Constant value";
    this.description = "Returns a constant value instead of the frontmatter parameter.";
    this.source = "function (app, file, tools) { // do not change this line!\n  const result = tools.getOptionConfig(tools.getRule()?.id,'constantValue');\n  return result; // Return the constant value\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    var _a;
    const result = tools.getOptionConfig((_a = tools.getRule()) == null ? void 0 : _a.id, "constantValue");
    return result;
  }
  configTab(optionEL, rule, that, previewComponent) {
    optionEL.empty();
    that.setOptionConfigDefaults(rule.id, {
      constantValue: ""
    });
    new import_obsidian20.Setting(optionEL).setName("Constant value").setDesc("Enter a constant value to be used in the rule").addText(
      (text) => text.setValue(that.getOptionConfig(rule.id, "constantValue") || "").onChange(async (value) => {
        that.setOptionConfig(rule.id, "constantValue", value);
        that.updatePreview(rule, previewComponent);
      })
    );
  }
};

// src/rules/buildInDateTimeCreated.ts
var RuleBuildInDateTimeCreated = class extends RulePrototype {
  constructor() {
    super();
    this.id = "dateTimeCreated";
    this.ruleType = "buildIn";
    this.name = "Date (and Time) created";
    this.description = "This rule returns the date and time when the file was created, adjusted for local timezone.";
    this.source = "function(app: App | undefined, file: TFile, tools: ScriptingTools) { // do not change this line! \n const timeOffset = new Date(Date.now()).getTimezoneOffset()*60000; // get local time offset \n const result = new Date(file.stat.ctime-timeOffset); \n return result.toISOString().split('Z')[0]; // remove UTC symbol \n }";
    this.type = ["date", "datetime"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    const timeOffset = new Date(Date.now()).getTimezoneOffset() * 6e4;
    const result = new Date(file.stat.ctime - timeOffset);
    return result.toISOString().split("Z")[0];
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInDateTimeModified.ts
var RuleBuildInDateTimeModified = class extends RulePrototype {
  constructor() {
    super();
    this.id = "dateTimeModified";
    this.ruleType = "buildIn";
    this.name = "Date (and Time) modified";
    this.description = "This rule returns the date and time when the file was last modified, adjusted for local timezone.";
    this.source = "function(app: App | undefined, file: TFile, tools: ScriptingTools) { // do not change this line! \n const timeOffset = new Date(Date.now()).getTimezoneOffset()*60000; // get local time offset \n const result = new Date(file.stat.mtime-timeOffset); \n return result.toISOString().split('Z')[0]; // remove UTC symbol \n }";
    this.type = ["date", "datetime"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    const timeOffset = new Date(Date.now()).getTimezoneOffset() * 6e4;
    const result = new Date(file.stat.mtime - timeOffset);
    return result.toISOString().split("Z")[0];
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInDefault.ts
var RuleBuildInDefault = class extends RulePrototype {
  constructor() {
    super();
    this.id = "default";
    this.ruleType = "buildIn";
    this.name = "Pass parameter unaltered";
    this.description = "Pass the content of the frontmatter parameter unaltered.";
    this.source = "function (app, file, tools) { // do not change this line!\n  const input = tools.getCurrentContent(); // Get the current content of property\n  return input; // Return the input unaltered\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    const input = tools.getCurrentContent();
    return input;
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInFileSizeBytes.ts
var RuleBuildInFileSizeBytes = class extends RulePrototype {
  constructor() {
    super();
    this.id = "fileSizeBytes";
    this.ruleType = "buildIn";
    this.name = "File Size in Bytes";
    this.description = "This rule returns the size of the file in bytes.";
    this.source = "function(app: App | undefined, file: TFile, tools: ScriptingTools) { // do not change this line! \n const result = file.stat.size; \n return result; // return you result. \n }";
    this.type = ["number"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    const result = file.stat.size;
    return result;
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInFileSizeString.ts
var RuleBuildInFileSizeString = class extends RulePrototype {
  constructor() {
    super();
    this.id = "fileSizeString";
    this.ruleType = "buildIn";
    this.name = "File Size as String";
    this.description = "Converts the file size to a human-readable string (e.g., KB, MB, GB) with 2 decimal places precision.";
    this.source = "function(app: App | undefined, file: TFile, tools: ScriptingTools) { // do not change this line! \n let size =file.stat.size; \n const precision = 2; // number of decimal places \n if (size > 1024) { \n   size = size / 1024; \n   if (size > 1024) { \n     size = size / 1024; \n     if (size > 1024) { \n       size = size / 1024; \n       return size.toFixed(precision) + ' GB'; \n     } \n     return size.toFixed(precision) + ' MB'; \n   } \n   return size.toFixed(precision) + ' KB'; \n }   \n return size + ' Bytes'; // return you result. \n }";
    this.type = ["text"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    let size = file.stat.size;
    const precision = 2;
    if (size > 1024) {
      size = size / 1024;
      if (size > 1024) {
        size = size / 1024;
        if (size > 1024) {
          size = size / 1024;
          return size.toFixed(precision) + " GB";
        }
        return size.toFixed(precision) + " MB";
      }
      return size.toFixed(precision) + " KB";
    }
    return size + " Bytes";
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInFolder.ts
var RuleBuildInFolder = class extends RulePrototype {
  constructor() {
    super();
    this.id = "folder";
    this.ruleType = "buildIn";
    this.name = "Parent folder";
    this.description = "Returns the parent folder of the file.";
    this.source = "function (app, file, tools) { // do not change this line!\n  const input = tools.getCurrentContent(); // Get the current content of property\n  return input; // Return the input unaltered\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    const path = file.path;
    const parts = path.split("/");
    let result = "";
    if (parts.length > 1) {
      result = parts[parts.length - 2];
    }
    return result;
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInFolderFolderNotes.ts
var RuleBuildInFolderFolderNotes = class extends RulePrototype {
  constructor() {
    super();
    this.id = "folderFolderNotes";
    this.ruleType = "buildIn";
    this.name = 'Parent Folder (complies with "folder notes")';
    this.description = "Returns the parent folder of the file compatible with Folder Notes.";
    this.source = "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;const parts = file.path.split('/');\n  let index = parts.length-2; // index of parent folder\n  if (parts[parts.length-2]===file.basename) {\n      index--; // folder note parent is the child\n  }\n  if (index >= 0) {\n    return parts[index]; // file in folder\n  } else {\n    return tools.app?.vault?.getName() || 'Vault'; // file in root = vault\n  }\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    var _a, _b;
    const path = file.path;
    const parts = file.path.split("/");
    let index = parts.length - 2;
    if (parts[parts.length - 2] === file.basename) {
      index--;
    }
    if (index >= 0) {
      return parts[index];
    } else {
      return ((_b = (_a = tools.app) == null ? void 0 : _a.vault) == null ? void 0 : _b.getName()) || "Vault";
    }
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInFolders.ts
var RuleBuildInFolders = class extends RulePrototype {
  constructor() {
    super();
    this.id = "folders";
    this.ruleType = "buildIn";
    this.name = "All folders of the file as a list";
    this.description = "Returns all folders the file is stored in as a list.";
    this.source = "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const result = path.split('/');\n  result.pop(); // remove the file name\n  return result;\n}";
    this.type = ["tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    const path = file.path;
    const result = path.split("/");
    result.pop();
    return result;
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInFullPath.ts
var RuleBuildInFullPath = class extends RulePrototype {
  constructor() {
    super();
    this.id = "fullPath";
    this.ruleType = "buildIn";
    this.name = "Full path, filename";
    this.description = "Returns the full path of the file, including the filename.";
    this.source = "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  parts.pop();\n  parts.push(file.basename);\n  return parts.join('/');\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    let parts = file.path.split("/");
    parts.pop();
    parts.push(file.basename);
    return parts.join("/");
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInFullPathExt.ts
var RuleBuildInFullPathExt = class extends RulePrototype {
  constructor() {
    super();
    this.id = "fullPathExt";
    this.ruleType = "buildIn";
    this.name = "Full path, filename and extension";
    this.description = "Returns the full path of the file, including its filename and extension.";
    this.source = "function (app, file, tools) { // do not change this line!\n  return `${file.path}`;\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    return `${file.path}`;
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInFullPathExtFolderNotes.ts
var RuleBuildInFullPathExtFolderNotes = class extends RulePrototype {
  constructor() {
    super();
    this.id = "fullPathExtFolderNotes";
    this.ruleType = "buildIn";
    this.name = 'Full Path with Extension (comply with "folder notes")';
    this.description = "Path with Extensions compatible with folder notes.";
    this.source = "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  parts.pop();\n  if (parts[parts.length-1] === file.basename) parts.pop();\n  parts.push(file.basename);\n  return parts.join('/');\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    let parts = file.path.split("/");
    parts.pop();
    if (parts[parts.length - 1] === file.basename)
      parts.pop();
    parts.push(file.name);
    return parts.join("/");
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInFullPathFolderNotes.ts
var RuleBuildInFullPathFolderNotes = class extends RulePrototype {
  constructor() {
    super();
    this.id = "fullPathFolderNotes";
    this.ruleType = "buildIn";
    this.name = 'Full Path (comply with "folder notes")';
    this.description = "Path compatible compatible with folder notes.";
    this.source = "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  parts.pop();\n  if (parts[parts.length-1] === file.basename) parts.pop();\n  parts.push(file.basename);\n  return parts.join('/');\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    let parts = file.path.split("/");
    parts.pop();
    if (parts[parts.length - 1] === file.basename)
      parts.pop();
    parts.push(file.basename);
    return parts.join("/");
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInGetProperty.ts
var import_obsidian21 = require("obsidian");
var RuleBuildInGetProperty = class extends RulePrototype {
  constructor() {
    super();
    this.id = "getProperty";
    this.ruleType = "buildIn";
    this.name = "Get property";
    this.description = "Gets a property from selected property.";
    this.source = "function(app: App | undefined, file: TFile, tools: ScriptingTools) { // do not change this line! \n const propertyId = tools.getOptionConfig(tools.getRule()?.id,'inputProperty'); \n if (propertyId === undefined || propertyId === '') { \n return 'Property not set'; \n } \n const result = tools.getFrontmatterProperty(propertyId); \n if (result === undefined) { \n return 'Property not found'; \n } \n return result; \n }";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    var _a;
    const propertyId = tools.getOptionConfig((_a = tools.getRule()) == null ? void 0 : _a.id, "inputProperty");
    if (propertyId === void 0 || propertyId === "") {
      return "Property not set";
    }
    const result = tools.getFrontmatterProperty(propertyId);
    if (result === void 0) {
      return "Property not found";
    }
    return result;
  }
  configTab(optionEL, rule, that, previewComponent) {
    that.setOptionConfigDefaults(rule.id, {
      inputProperty: ""
    });
    let inputPropertiesDropdown;
    new import_obsidian21.Setting(optionEL).setName("Input Property").setDesc("Select a property as input").addDropdown((dropdown) => {
      inputPropertiesDropdown = dropdown;
      dropdown.setValue(that.getOptionConfig(rule.id, "inputProperty") || "").onChange(async (value) => {
        if (value !== "") {
          that.setOptionConfig(rule.id, "inputProperty", value);
          that.updatePreview(rule, previewComponent);
        }
      });
    });
    Object.keys(that.knownProperties).forEach((key) => {
      const item = that.knownProperties[key];
      inputPropertiesDropdown.addOption(item.name, item.name);
    });
  }
};

// src/rules/buildInIsRoot.ts
var RuleBuildInIsRoot = class extends RulePrototype {
  constructor() {
    super();
    this.id = "isRoot";
    this.ruleType = "buildIn";
    this.name = "File in Root folder";
    this.description = "Check if the file is in the root folder.";
    this.source = "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  return parts.length === 1;\n};";
    this.type = ["checkbox"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    let parts = file.path.split("/");
    return parts.length === 1;
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInLinkToFile.ts
var import_obsidian22 = require("obsidian");
var RuleBuildInLinkToFile = class extends RulePrototype {
  constructor() {
    super();
    this.id = "linkToFile";
    this.ruleType = "buildIn";
    this.name = "Create link to file";
    this.description = "Create a link to the file in the current vault. Can be configured to include the file extension.";
    this.source = "function (app, file, tools) { // do not change this line!\n  const parts = file.path.split('/');\n  const rule = tools.getRule();\n  if (!rule) return tools.getCurrentContent();\n  const addExtension = tools.getOptionConfig(rule.id,'addExtension') \n  parts.pop();\n  if (parts[parts.length-1] === file.basename) parts.pop();\n  let fileName = addExtension? file.basename + '.' + file.extension : file.basename; \n  return `[[${parts.join('/')}/${fileName}|${file.basename}]]`;\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    const parts = file.path.split("/");
    const rule = tools.getRule();
    if (!rule)
      return tools.getCurrentContent();
    const addExtension = tools.getOptionConfig(rule.id, "addExtension");
    parts.pop();
    if (parts[parts.length - 1] === file.basename)
      parts.pop();
    let fileName = addExtension ? file.basename + "." + file.extension : file.basename;
    return `[[${parts.join("/")}/${fileName}|${file.basename}]]`;
  }
  configTab(optionEL, rule, that, previewComponent) {
    that.setOptionConfigDefaults(rule.id, {
      addExtension: true
    });
    new import_obsidian22.Setting(optionEL).setName("Include file extension").setDesc("Add file extension to pathname").addToggle(
      (toggle) => toggle.setValue(that.getOptionConfig(rule.id, "addExtension") || false).onChange(async (value) => {
        that.setOptionConfig(rule.id, "addExtension", value);
        that.updatePreview(rule, previewComponent);
      })
    );
  }
};

// src/rules/buildInName.ts
var RuleBuildInName = class extends RulePrototype {
  constructor() {
    super();
    this.id = "name";
    this.ruleType = "buildIn";
    this.name = "File name without extension";
    this.description = "Returns the file name without all extensions. I.e. example.note.md => example";
    this.source = "function (app, file, tools) { // do not change this line!\n  // acquire file name\n  const result = tools.removeAllExtensions(file.name);\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    const result = tools.removeAllExtensions(file.name);
    return result;
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInNameExt.ts
var RuleBuildInNameExt = class extends RulePrototype {
  constructor() {
    super();
    this.id = "nameExt";
    this.ruleType = "buildIn";
    this.name = "File name with extension";
    this.description = "Returns the file name with extension.";
    this.source = "function (app, file, tools) { // do not change this line!\n  // acquire file name with extension\n  const result = file.name;\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    const result = file.name;
    return result;
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInPath.ts
var RuleBuildInPath = class extends RulePrototype {
  constructor() {
    super();
    this.id = "path";
    this.ruleType = "buildIn";
    this.name = "Full path";
    this.description = "Returns the folder path the file is stored in.";
    this.source = "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  parts.pop();\n  return parts.join('/');\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    let parts = file.path.split("/");
    parts.pop();
    return parts.join("/");
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInPathFolderNotes.ts
var RuleBuildInPathFolderNotes = class extends RulePrototype {
  constructor() {
    super();
    this.id = "pathFolderNotes";
    this.ruleType = "buildIn";
    this.name = "Path (folder notes)";
    this.description = "Path compatible with folder notes.";
    this.source = "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  parts.pop();\n  if (parts[parts.length-1] === file.basename) parts.pop(); // remove parent folder if same name as the file\n  return parts.join('/');\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    let parts = file.path.split("/");
    parts.pop();
    if (parts[parts.length - 1] === file.basename)
      parts.pop();
    return parts.join("/");
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInRootFolder.ts
var RuleBuildInRootFolder = class extends RulePrototype {
  constructor() {
    super();
    this.id = "rootFolder";
    this.ruleType = "buildIn";
    this.name = "Root folder";
    this.description = "Returns the root folder where the file is stored.";
    this.source = "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  return parts.length > 1 ? parts[0] : ''; // return root folder or empty string if in root\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    const path = file.path;
    const parts = path.split("/");
    let result = "";
    if (parts.length > 1) {
      result = parts[0];
    }
    return result;
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/buildInScript.ts
var RuleBuildInScript = class extends RulePrototype {
  constructor() {
    super();
    this.id = "script";
    this.ruleType = "buildIn";
    this.name = "JavaScript function (advanced)";
    this.description = "Implement a JavaScript function to process the input content. The function should return the processed content.";
    this.source = "function (app, file, tools) { // do not change this line!\n  const input = tools.getCurrentContent(); // Get the current content of property\n  return input; // Return the input unaltered\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools) {
    const input = tools.getCurrentContent();
    return input;
  }
  configTab(optionEL, rule, that, previewComponent) {
  }
};

// src/rules/replaceSpaces.ts
var import_obsidian23 = require("obsidian");
var RuleReplaceSpaces = class extends RulePrototype {
  constructor() {
    super();
    this.id = "replaceSpaces";
    this.name = "Replace Spaces";
    this.description = "Replaces spaces in the input value with a specified character.";
    this.ruleType = "formatter";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    var _a;
    const spaceReplacement = tools.getOptionConfig((_a = tools.getRule()) == null ? void 0 : _a.id, "spaceReplacement");
    return input.replace(/\s+/g, spaceReplacement);
  }
  configTab(optionEL, rule, that, previewComponent) {
    optionEL.empty();
    that.setOptionConfigDefaults(rule.id, {
      spaceReplacement: ""
      // Default suffix
    });
    new import_obsidian23.Setting(optionEL).setName("Space replacement").setDesc('Character to replace spaces (suggested: "_")').addText(
      (text) => text.setPlaceholder("will remove spaces").setValue(that.getOptionConfig(rule.id, "spaceReplacement") || "").onChange(async (value) => {
        that.setOptionConfig(rule.id, "spaceReplacement", value);
        that.updatePreview(rule, previewComponent);
      })
    );
  }
};

// src/rules/replaceSpecialChars.ts
var import_obsidian24 = require("obsidian");
var RuleReplaceSpecialChars = class extends RulePrototype {
  constructor() {
    super();
    this.id = "replaceSpecialChars";
    this.name = "Replace Special Characters";
    this.description = 'Character to replace special characters (suggested: "-") - preserves letters with diacritics';
    this.ruleType = "formatter";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    var _a;
    const specialCharReplacement = tools.getOptionConfig((_a = tools.getRule()) == null ? void 0 : _a.id, "specialCharReplacement");
    return input.replace(/[^a-zA-Z0-9\-_\/äöüßÄÖÜáéíóúýÁÉÍÓÚÝàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛãñõÃÑÕ]/g, specialCharReplacement);
  }
  configTab(optionEL, rule, that, previewComponent) {
    optionEL.empty();
    that.setOptionConfigDefaults(rule.id, {
      specialCharReplacement: ""
      // Default suffix
    });
    new import_obsidian24.Setting(optionEL).setName("Replace Special Characters").setDesc('Character to replace special characters (suggested: "-") - preserves letters with diacritics').addText(
      (text) => text.setPlaceholder("will remove special characters").setValue(that.getOptionConfig(rule.id, "specialCharReplacement") || "").onChange(async (value) => {
        that.setOptionConfig(rule.id, "specialCharReplacement", value);
        that.updatePreview(rule, previewComponent);
      })
    );
  }
};

// src/rules/toCamelCase.ts
var RuleToCamelCase = class extends RulePrototype {
  constructor() {
    super();
    this.id = "toCamelCase";
    this.name = "To Camel Case";
    this.description = "Convert the value to Camel Case.";
    this.ruleType = "formatter";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    const toCamelCase = (str) => {
      let textParts = str.split(" ");
      let convertedTextParts = [];
      textParts.forEach((text, index) => {
        let newTextPart = text.toLowerCase();
        if (index > 0)
          newTextPart = newTextPart.charAt(0).toUpperCase() + newTextPart.slice(1);
        convertedTextParts.push(newTextPart);
      });
      return convertedTextParts.join("");
    };
    if (typeof input === "string") {
      return toCamelCase(input);
    } else if (Array.isArray(input)) {
      return input.map((item) => toCamelCase(String(item)));
    } else if (input instanceof Date) {
      return toCamelCase(input.toISOString());
    } else if (typeof input === "object") {
      return toCamelCase(JSON.stringify(input));
    }
    return input;
  }
};

// src/rules/toLinkMarkdown.ts
var RuleToLinkMarkdown = class extends RulePrototype {
  constructor() {
    super();
    this.id = "toMarkdownLink";
    this.name = "to markdown link";
    this.description = "Format as a markdown link.";
    this.ruleType = "linkFormatter";
    this.source = "function (input: any, tools: ScriptingTools) { // do not change this line!\n  input = tools.toMarkdownLink(input); // Convert to markdown link format\n  return input;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    input = tools.toMarkdownLink(input);
    return input;
  }
};

// src/rules/toLinkOriginal.ts
var RuleToLinkOriginal = class extends RulePrototype {
  constructor() {
    super();
    this.id = "toOriginalLink";
    this.name = "no change";
    this.description = "Pass the input unaltered.";
    this.ruleType = "linkFormatter";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    return input;
  }
};

// src/rules/toLinkSimple.ts
var RuleToLinkSimple = class extends RulePrototype {
  constructor() {
    super();
    this.id = "toSimpleLink";
    this.name = "to simple link";
    this.description = "Format as a simple link by adding [[]].";
    this.ruleType = "linkFormatter";
    this.source = "function (app, file, tools, input) { // do not change this line!\n  if (input === undefined || input === null || input === '') {\n    return ''; // Return empty string if input is undefined, null, or empty\n  }\n         input = `[[${input}]]`; // Convert to simple Link\n  return input;\n};";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    if (input === void 0 || input === null || input === "") {
      return "";
    }
    input = `[[${input}]]`;
    return input;
  }
};

// src/rules/toLinkWiki.ts
var RuleToLinkWiki = class extends RulePrototype {
  constructor() {
    super();
    this.id = "toWikiLink";
    this.name = "to wiki link";
    this.description = "Format as a wiki link.";
    this.ruleType = "linkFormatter";
    this.source = "function (input: any, tools: ScriptingTools) { // do not change this line!\n  input = tools.toWikiLink(input); // Convert to wiki link format\n  return input;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    input = tools.toWikiLink(input);
    return input;
  }
};

// src/rules/toLowerCase.ts
var RuleToLowerCase = class extends RulePrototype {
  constructor() {
    super();
    this.id = "toLowerCase";
    this.name = "To Lower Case";
    this.description = "Convert the value to lower case.";
    this.ruleType = "formatter";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    if (String.isString(input)) {
      return input.toLowerCase();
    } else if (Array.isArray(input)) {
      return input.map((item) => String(item).toLowerCase());
    } else if (input instanceof Date) {
      return input.toISOString().toLowerCase();
    } else if (typeof input === "object") {
      return JSON.stringify(input).toLowerCase();
    }
    return input;
  }
};

// src/rules/toOriginal.ts
var RuleToOriginal = class extends RulePrototype {
  constructor() {
    super();
    this.id = "toOriginal";
    this.name = "no change";
    this.description = "Pass the input unaltered.";
    this.ruleType = "formatter";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    return input;
  }
};

// src/rules/toPascalCase.ts
var RuleToPascalCase = class extends RulePrototype {
  constructor() {
    super();
    this.id = "toPascalCase";
    this.name = "To Pascal Case";
    this.description = "Convert the value to Pascal Case (Upper Camel Case).";
    this.ruleType = "formatter";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    const toPascalCase = (str) => {
      return str.replace(
        /(?:^\w|[A-Z]|\b\w|\s+)/g,
        (match) => match.toUpperCase()
      ).replace(/\s+/g, "").replace(/[^a-zA-Z0-9]/g, "");
    };
    if (typeof input === "string") {
      return toPascalCase(input);
    } else if (Array.isArray(input)) {
      return input.map((item) => toPascalCase(String(item)));
    } else if (input instanceof Date) {
      return toPascalCase(input.toISOString());
    } else if (typeof input === "object") {
      return toPascalCase(JSON.stringify(input));
    }
    return input;
  }
};

// src/rules/toTitleCase.ts
var RuleToTitleCase = class extends RulePrototype {
  constructor() {
    super();
    this.id = "toTitleCase";
    this.name = "To Title Case (Simple)";
    this.description = "Convert the value to Title Case.";
    this.ruleType = "formatter";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    const toTitleCase = (str) => {
      let textParts = str.split(" ");
      let convertedTextParts = [];
      textParts.forEach((text, index) => {
        let newTextPart = text.toLowerCase();
        newTextPart = newTextPart.charAt(0).toUpperCase() + newTextPart.slice(1);
        convertedTextParts.push(newTextPart);
      });
      return convertedTextParts.join(" ");
    };
    if (typeof input === "string") {
      return toTitleCase(input);
    } else if (Array.isArray(input)) {
      return input.map((item) => toTitleCase(String(item)));
    } else if (input instanceof Date) {
      return toTitleCase(input.toISOString());
    } else if (typeof input === "object") {
      return toTitleCase(JSON.stringify(input));
    }
    return input;
  }
};

// src/rules/toTitleCaseDE.ts
var import_obsidian25 = require("obsidian");
var RuleToTitleCaseDE = class extends RulePrototype {
  // Set to true for verbose logging
  constructor() {
    super();
    this.verboseLogging = false;
    this.small = "(der|die|das|den|dem|des|einer|eines|deren|ein|eine|einem|einer|eines|einer|und|oder|aber|denn|sondern|sowie|weder|noch|entweder|oder|dass|weil|obwohl|wenn|als|nachdem|bevor|w\xE4hrend|bis|damit|um|zu|sobald|solange|da|indem|so|dass|ohne|zu|durch|f\xFCr|gegen|ohne|um|bis|aus|au\xDFer|bei|gegen\xFCber|mit|nach|seit|von|zu|anstatt|aufgrund|au\xDFerhalb|innerhalb|trotz|w\xE4hrend|wegen|an|auf|hinter|in|neben|\xFCber|unter|vor|zwischen)";
    this.punctuation = "\\([!\"#$%&'()*+,./:;<=>?@[\\\\\\]^_`{|}~\\-]*\\)";
    this.id = "toTitleCaseDe";
    this.name = "To Title Case (German small words)";
    this.description = "Convert German value to Title Case.";
    this.ruleType = "formatter";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    const toTitleCase = (str) => {
      var _a;
      const ruleId = (_a = tools.getRule()) == null ? void 0 : _a.id;
      const doNotCapitalizeSmallWords = tools.getOptionConfig(ruleId, "doNotCapitalizeSmallWords");
      return this.titleCaps(str, doNotCapitalizeSmallWords ? tools.getOptionConfig(ruleId, "smallWords") : void 0);
    };
    let result = input;
    if (typeof input === "string") {
      result = toTitleCase(input);
    } else if (Array.isArray(input)) {
      result = input.map((item) => toTitleCase(String(item)));
    } else if (input instanceof Date) {
      result = toTitleCase(input.toISOString());
    } else if (typeof input === "object") {
      result = toTitleCase(JSON.stringify(input));
    }
    logger.log(DEBUG, `RuleToTitleCaseDE.fx - input:'${input}' result:'${result}'`);
    return result;
  }
  configTab(optionEL, rule, that, previewComponent) {
    optionEL.empty();
    that.setOptionConfigDefaults(rule.id, {
      smallWords: "der|die|das|den|dem|des|einer|eines|deren|ein|eine|einem|einer|eines|einer|und|oder|aber|denn|sondern|sowie|weder|noch|entweder|oder|dass|weil|obwohl|wenn|als|nachdem|bevor|w\xE4hrend|bis|damit|um|zu|sobald|solange|da|indem|so|dass|ohne|zu|durch|f\xFCr|gegen|ohne|um|bis|aus|au\xDFer|bei|gegen\xFCber|mit|nach|seit|von|zu|anstatt|aufgrund|au\xDFerhalb|innerhalb|trotz|w\xE4hrend|wegen|an|auf|hinter|in|neben|\xFCber|unter|vor|zwischen",
      doNotCapitalizeSmallWords: true
    });
    new import_obsidian25.Setting(optionEL).setName("Do not capitalize small words").setDesc("If enabled, small words will not be capitalized. If disabled, all words will be capitalized.").addToggle(
      (toggle) => toggle.setValue(that.getOptionConfig(rule.id, "doNotCapitalizeSmallWords") || false).onChange(async (value) => {
        that.setOptionConfig(rule.id, "doNotCapitalizeSmallWords", value);
        that.updatePreview(rule, previewComponent);
      })
    );
    new import_obsidian25.Setting(optionEL).setName("List of small words").setDesc('Enter a list of small words to be excluded from capitalization. Use "|" as separator.').addText(
      (text) => text.setValue(that.getOptionConfig(rule.id, "smallWords") || "").onChange(async (value) => {
        that.setOptionConfig(rule.id, "smallWords", value);
        that.updatePreview(rule, previewComponent);
      })
    );
  }
  titleCaps(title, smallWords) {
    const parts = [];
    const split = new RegExp(`[:.;?!] |(?: |^)["${this.punctuation}]`, "g");
    let index = 0;
    while (true) {
      const m = split.exec(title);
      const substring = title.substring(index, m ? m.index : title.length);
      logger.log(TRACE, "Processing substring:", substring);
      let isFirstWord = true;
      parts.push(
        substring.replace(/([\p{L}\p{M}]+(?:\.[\p{L}\p{M}]+)*)/gu, (all) => {
          logger.log(TRACE, "Matched word:", all);
          if (/[a-z][A-Z]|[A-Z][a-z]/.test(all)) {
            logger.log(TRACE, "Excluding mixed capitalization word:", all);
            isFirstWord = false;
            return all;
          }
          if (/^[A-ZÄÖÜß]+$/.test(all)) {
            logger.log(TRACE, "Excluding fully capitalized word:", all);
            isFirstWord = false;
            return all;
          }
          if (/[^\s]+\.[^\s]+/.test(all)) {
            logger.log(TRACE, "Excluding word with punctuation:", all);
            isFirstWord = false;
            return all;
          }
          const smallRegex = new RegExp(`^(${smallWords})$`, "iu");
          if (isFirstWord) {
            logger.log(TRACE, "Capitalizing first word of sentence:", all);
            isFirstWord = false;
            return this.upperDE(all);
          } else if (smallRegex.test(all)) {
            logger.log(TRACE, "Skipping capitalization for small word:", all);
            return this.lowerDE(all);
          }
          isFirstWord = false;
          return this.upperDE(all);
        })
      );
      index = split.lastIndex;
      if (m)
        parts.push(m[0]);
      else
        break;
    }
    return parts.join("");
  }
  lowerDE(word) {
    logger.log(TRACE, "Lowering:", word);
    return word.toLocaleLowerCase("de");
  }
  upperDE(word) {
    logger.log(TRACE, "Uppering:", word);
    return word.charAt(0).toLocaleUpperCase("de") + word.slice(1).toLocaleLowerCase("de");
  }
};

// src/rules/toTitleCaseEN.ts
var RuleToTitleCaseEN = class extends RulePrototype {
  constructor() {
    super();
    this.small = "(a|an|and|as|at|but|by|en|for|if|in|of|on|or|the|to|v[.]?|via|vs[.]?)";
    this.punctuation = "([!\"#$%&'()*+,./:;<=>?@[\\\\\\]^_`{|}~-]*)";
    this.id = "toTitleCaseEn";
    this.name = "To Title Case (English small words)";
    this.description = "Convert the value to Title Case.";
    this.ruleType = "formatter";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    const toTitleCase = (str) => {
      return this.titleCaps(str);
    };
    if (typeof input === "string") {
      return toTitleCase(input);
    } else if (Array.isArray(input)) {
      return input.map((item) => toTitleCase(String(item)));
    } else if (input instanceof Date) {
      return toTitleCase(input.toISOString());
    } else if (typeof input === "object") {
      return toTitleCase(JSON.stringify(input));
    }
    return input;
  }
  titleCaps(title) {
    var parts = [], split = /[:.;?!] |(?: |^)["Ò]/g, index = 0;
    while (true) {
      var m = split.exec(title);
      parts.push(title.substring(index, m ? m.index : title.length).replace(/\b([A-Za-z][a-z.'Õ]*)\b/g, (all) => {
        return /[A-Za-z]\.[A-Za-z]/.test(all) ? all : this.upper(all);
      }).replace(RegExp("\\b" + this.small + "\\b", "ig"), this.lower).replace(RegExp("^" + this.punctuation + this.small + "\\b", "ig"), (all, punct, word) => {
        return punct + this.upper(word);
      }).replace(RegExp("\\b" + this.small + this.punctuation + "$", "ig"), this.upper));
      index = split.lastIndex;
      if (m)
        parts.push(m[0]);
      else
        break;
    }
    return parts.join("").replace(/ V(s?)\. /ig, " v$1. ").replace(/(['Õ])S\b/ig, "$1s").replace(/\b(AT&T|Q&A)\b/ig, function(all) {
      return all.toUpperCase();
    });
  }
  lower(word) {
    return word.toLowerCase();
  }
  upper(word) {
    return word.substr(0, 1).toUpperCase() + word.substr(1);
  }
};

// src/rules/toUpperCase.ts
var RuleToUpperCase = class extends RulePrototype {
  constructor() {
    super();
    this.id = "toUpperCase";
    this.name = "To Upper Case";
    this.description = "Convert the value to upper case.";
    this.ruleType = "formatter";
    this.source = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    this.type = ["text", "tags", "aliases", "multitext"];
    this.configElements = this.defaultConfigElements({});
  }
  fx(app, file, tools, input) {
    if (String.isString(input)) {
      return input.toUpperCase();
    } else if (Array.isArray(input)) {
      return input.map((item) => String(item).toUpperCase());
    } else if (input instanceof Date) {
      return input.toISOString().toUpperCase();
    } else if (typeof input === "object") {
      return JSON.stringify(input).toUpperCase();
    }
    return input;
  }
};

// src/rules/index.ts
var ruleClasses = [RuleAddPrefix, RuleAddSuffix, RuleAutomationAutoLink, RuleBuildInAutoCompleteModal, RuleBuildInConcatProperties, RuleBuildInConstant, RuleBuildInDateTimeCreated, RuleBuildInDateTimeModified, RuleBuildInDefault, RuleBuildInFileSizeBytes, RuleBuildInFileSizeString, RuleBuildInFolder, RuleBuildInFolderFolderNotes, RuleBuildInFolders, RuleBuildInFullPath, RuleBuildInFullPathExt, RuleBuildInFullPathExtFolderNotes, RuleBuildInFullPathFolderNotes, RuleBuildInGetProperty, RuleBuildInIsRoot, RuleBuildInLinkToFile, RuleBuildInName, RuleBuildInNameExt, RuleBuildInPath, RuleBuildInPathFolderNotes, RuleBuildInRootFolder, RuleBuildInScript, RuleReplaceSpaces, RuleReplaceSpecialChars, RuleToCamelCase, RuleToLinkMarkdown, RuleToLinkOriginal, RuleToLinkSimple, RuleToLinkWiki, RuleToLowerCase, RuleToOriginal, RuleToPascalCase, RuleToTitleCase, RuleToTitleCaseDE, RuleToTitleCaseEN, RuleToUpperCase];
ruleClasses.forEach((RuleClass) => {
  const ruleInstance = new RuleClass();
  rulesManager.registerRule(ruleInstance);
});

// main.ts
var FolderTagPlugin = class extends import_obsidian26.Plugin {
  constructor() {
    super(...arguments);
    this.fileInProgress = null;
  }
  // Track the file currently being processed
  //private oldFolderPaths = new Map<string, string | null>();
  async onload() {
    await this.loadSettings();
    logger.log(INFO, `Front Matter Automate ${versionString} loaded with settings: `, this.settings);
    logger.setLevel(this.settings.debugLevel);
    this.tools = new ScriptingTools(this.app, this);
    rulesManager.init(this.app, this, this.tools);
    let noticeMessage = `Front Matter Automate ${versionString}
 loading ...`;
    const loadingNotice = new import_obsidian26.Notice(noticeMessage, 0);
    noticeMessage = noticeMessage + "\n register events ...";
    loadingNotice.setMessage(noticeMessage);
    this.registerEvent(
      this.app.vault.on("create", (file) => {
        logger.log(DEBUG, `Event creating file: ${file.path} starting in ${this.settings.delayCreateEvent}ms`);
        if (file instanceof import_obsidian26.TFile && file.extension === "md") {
          this.fileInProgress = file;
          setTimeout(
            () => {
              logger.log(DEBUG, `Event creating file started: `, file.path);
              this.updateFrontmatterParameters("create", file, this.settings.rules);
              this.fileInProgress = null;
            },
            this.settings.delayCreateEvent
          );
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", (file, oldPath) => {
        if (this.fileInProgress)
          return;
        if (file instanceof import_obsidian26.TFile && file.extension === "md") {
          logger.log(DEBUG, `Event renaming file: `, file.path);
          this.updateFrontmatterParameters("rename", file, this.settings.rules, oldPath);
        }
      })
    );
    this.registerEvent(
      this.app.metadataCache.on("changed", async (file, data, cache) => {
        if (this.fileInProgress)
          return;
        if (!checkIfFileAllowed(file, this.settings)) {
          logger.log(DEBUG, `file ${file.path} globally rejected!`);
          return;
        }
        if (!(file instanceof import_obsidian26.TFile) || file.extension !== "md") {
          logger.log(DEBUG, `Event metadata changed: ${file.path} not a markdown file!`);
          return;
        }
        logger.groupCollapsed(DEBUG, `Event metadata changed: ${file.path} `);
        if (file)
          this.updateFrontmatterParameters("metadata-changed", file, this.settings.rules);
        logger.groupEnd();
      })
    );
    noticeMessage = noticeMessage + "\n initial processing ...";
    loadingNotice.setMessage(noticeMessage);
    this.settings.liveRules = [];
    this.settings.rules.forEach((rule) => {
      let ruleFunction = rulesManager.getRuleById(rule.content);
      if (!ruleFunction)
        return;
      switch (ruleFunction.ruleType) {
        case "autocomplete.modal":
        case "buildIn.inputProperty":
        case "automation":
          this.settings.liveRules.push(rule);
          break;
      }
    });
    noticeMessage = noticeMessage + "\ndone!";
    loadingNotice.setMessage(noticeMessage);
    setTimeout(() => {
      loadingNotice.hide();
    }, 2e3);
    this.addSettingTab(new FolderTagSettingTab(this.app, this));
  }
  async loadSettings() {
    let data = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_FRONTMATTER_AUTOMATE_SETTINGS, data);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  formatTagName(name) {
    if (name === null)
      return null;
    if (name === void 0)
      return void 0;
    let formatted = name.replace(/\s+/g, this.settings.spaceReplacement);
    formatted = formatted.replace(/[^a-zA-Z0-9\-_\/äöüßÄÖÜáéíóúýÁÉÍÓÚÝàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛãñõÃÑÕ]/g, this.settings.specialCharReplacement);
    if (this.settings.lowercaseTags) {
      formatted = formatted.toLowerCase();
    }
    return formatted;
  }
  formatValue(value, type) {
    switch (type) {
      case "text":
      case "tags":
      case "aliases":
      case "multitext":
        return this.tools.toYamlSafeString(value);
      case "date":
      case "datetime":
        if (typeof value === "number") {
          return new Date(value).toISOString();
        }
        return value.toString();
      case "checkbox":
        return value ? "true" : "false";
      case "number":
        return Number(value);
      default:
        return this.tools.toYamlSafeString(value);
    }
  }
  updateFrontmatterParameters(eventName, file, rules, oldPath) {
    if (!checkIfFileAllowed(file, this.settings)) {
      logger.log(DEBUG, `file ${file.path} globally rejected!`);
      return;
    }
    const currentPathTag = this.formatTagName(this.tools.getFolderFromPath(file.path));
    const oldPathTag = this.formatTagName(this.tools.getFolderFromPath(oldPath));
    this.app.fileManager.processFrontMatter(file, (frontmatter) => {
      var _a;
      logger.groupCollapsed(DEBUG, `Event ${eventName}: ${file.path} ${rules.length} rules`, frontmatter);
      for (let rule of rules) {
        let result = frontmatter[rule.property];
        logger.groupCollapsed(DEBUG, `Execute Rule: ${rule.property}(${rule.content})`, result, rule);
        if (!checkIfFileAllowed(file, this.settings, rule)) {
          logger.log(DEBUG, `file ${file.path} rejected by rule (${rule.property}|${rule.content}) settings`);
          logger.groupEnd();
          continue;
        }
        if (rule.onlyModify && !frontmatter.hasOwnProperty(rule.property)) {
          logger.log(DEBUG, `file "${file.path}" has not "${rule.property}"(Rule:${rule.content}) onlyModify set: skipped`);
          logger.groupEnd();
          continue;
        }
        switch ((_a = rulesManager.getRuleById(rule.content)) == null ? void 0 : _a.ruleType) {
          case "buildIn":
          case "script":
            result = executeRuleObject(eventName, this.app, this, this.settings, file, frontmatter[rule.property], rule, frontmatter, oldPath);
            break;
          default:
        }
        frontmatter[rule.property] = result;
        logger.groupEnd();
      }
      logger.log(DEBUG, "Frontmatter updated", frontmatter);
      logger.groupEnd();
    }, { "mtime": file.stat.mtime });
  }
  /*
      async removeFrontmatterParamsFromAllFiles(rule: FrontmatterAutomateRuleSettings){
          let count = {files:0, items: 0}
          this.app.vault.getMarkdownFiles().forEach(file => {
              count.files++;
              this.removeFrontmatterParameter(file, rule, count);
          });
          return count;
      }
  
      async removeFrontmatterParameter(file: TFile, rule: FrontmatterAutomateRuleSettings, count) {
          if (!checkIfFileAllowed(file, this.settings, rule)) return;
          const currentPathTag = this.formatTagName(this.tools.getFolderFromPath(file.path));
          let content = await this.app.vault.read(file);
          this.app.fileManager.processFrontMatter(file, (frontmatter) => {
              if (Array.isArray(frontmatter[rule.property])) count.items += frontmatter[rule.property].length;
              frontmatter[rule.property] = removeRule(this.app, this.settings, file, frontmatter[rule.property], rule, frontmatter);
              if (Array.isArray(frontmatter[rule.property])) count.items -= frontmatter[rule.property].length;
          },{'mtime':file.stat.mtime}); // do not change the modify time.
          return count;
      }
      */
};
//# sourceMappingURL=data:application/json;base64,
