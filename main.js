/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FolderTagPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/settings.ts
var import_obsidian6 = require("obsidian");

// src/frontmatter-tools.ts
var import_obsidian = require("obsidian");
function getPropertiesFromMetadataManager(app) {
  try {
    const metadataManager = app.metadataTypeManager;
    console.log("get properties:", metadataManager);
    return Object.values(metadataManager.properties).map((value) => ({
      name: value.name,
      type: value.type,
      count: value.count,
      source: "registered"
    })).sort((a, b) => a.name.localeCompare(b.name));
  } catch (e) {
    console.error("Couldn't access properties from Metadata Manager", e);
    return [];
  }
}
function getTypesFromMetadataManager(app) {
  try {
    const metadataManager = app.metadataTypeManager;
    console.log("get types:", metadataManager);
    return Object.values(metadataManager.registeredTypeWidgets).map((value, index, array) => ({
      type: value.type,
      icon: value.icon,
      jsType: ""
    })).sort((a, b) => a.type.localeCompare(b.type));
  } catch (e) {
    console.error("Couldn't access properties from Metadata Manager", e);
    return [];
  }
}
var SelectProperty = class extends import_obsidian.SuggestModal {
  constructor(app, knownProperties, property, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.property = property;
    this.typedText = "";
    this.newTextFlag = true;
    this.knownProperties = knownProperties;
  }
  // Returns all available suggestions.
  getSuggestions(query) {
    const result = this.knownProperties.filter((property) => property.name.toLowerCase().includes(query.toLowerCase()));
    this.newTextFlag = result.length === 0;
    this.typedText = query;
    return result;
  }
  onOpen() {
    if (this.property) {
      this.setPlaceholder(this.property.name);
    } else {
      this.setPlaceholder("no property selected!");
    }
    this.setTitle("Select or type a property name");
  }
  // Renders each suggestion item.
  renderSuggestion(property, el) {
    el.createEl("div", { text: property.name });
    el.createEl("small", { text: property.type });
  }
  onClose() {
    if (this.newTextFlag && this.property) {
      this.property.name = this.typedText;
      this.property.type = "text";
      this.onSubmit(this.property);
    }
  }
  // Perform action on the selected suggestion.
  onChooseSuggestion(property, evt) {
    if (evt instanceof KeyboardEvent) {
      console.log(`keyboard ${this.typedText} ${this.newTextFlag}`, property);
    }
    console.log("onChooseSuggestion", evt);
    this.onSubmit(property);
  }
};

// src/tools.ts
function parseJSCode(jsCode) {
  function parseFunction(jsCode2) {
    try {
      jsCode2 = cleanCodeString(jsCode2);
      var funcReg = /function *\(([^()]*)\)[ \n\t]*{(.*)}/gmi;
      var match = funcReg.exec(jsCode2.replace(/\n/g, " "));
      if (!match)
        return void 0;
      var args = match[1].split(",");
      args.push(match[2]);
      return new Function(...args);
    } catch (error) {
      console.error("error parsing JS function!", error);
      return error.message;
    }
  }
  ;
  return parseFunction(jsCode);
}
function cleanCodeString(codeString) {
  if (typeof codeString !== "string") {
    throw new TypeError("Input must be a string.");
  }
  let inMultiLineComment = false;
  let inSingleLineComment = false;
  let inString = null;
  let inRegExp = false;
  let cleanedCode = "";
  let i = 0;
  while (i < codeString.length) {
    const char = codeString[i];
    const nextChar = codeString[i + 1];
    if (inMultiLineComment) {
      if (char === "*" && nextChar === "/") {
        inMultiLineComment = false;
        i += 2;
        continue;
      } else {
        i++;
        continue;
      }
    }
    if (inSingleLineComment) {
      if (char === "\n" || char === "\r") {
        inSingleLineComment = false;
        cleanedCode += char;
        i++;
        continue;
      } else {
        i++;
        continue;
      }
    }
    if (inString) {
      if (char === inString) {
        inString = null;
      } else if (char === "\\") {
        cleanedCode += char;
        i++;
        if (i < codeString.length) {
          cleanedCode += codeString[i];
        }
        i++;
        continue;
      }
      cleanedCode += char;
      i++;
      continue;
    }
    if (inRegExp) {
      if (char === "/") {
        inRegExp = false;
      } else if (char === "\\") {
        cleanedCode += char;
        i++;
        if (i < codeString.length) {
          cleanedCode += codeString[i];
        }
        i++;
        continue;
      }
      cleanedCode += char;
      i++;
      continue;
    }
    if (char === "/" && nextChar === "*") {
      inMultiLineComment = true;
      i += 2;
      continue;
    }
    if (char === "/" && nextChar === "/") {
      inSingleLineComment = true;
      i += 2;
      continue;
    }
    if (char === '"' || char === "'") {
      inString = char;
      cleanedCode += char;
      i++;
      continue;
    }
    if (char === "/") {
      const prevMeaningfulChar = cleanedCode.trim().slice(-1);
      if (prevMeaningfulChar === "" || ["(", ",", "=", ":", "[", "!", "&", "|", "?", "{", ";", "\n", "\r"].includes(prevMeaningfulChar)) {
        inRegExp = true;
        cleanedCode += char;
        i++;
        continue;
      }
    }
    cleanedCode += char;
    i++;
  }
  return cleanedCode;
}
var ScriptingTools = class {
  constructor(settings, frontmatter) {
    this.settings = settings;
    this.frontmatter = frontmatter;
  }
  /**
   * Check if a string complies with ISO Standard
   * 
   * @param str Any string
   * @param options Options to look for
   * @returns 
   */
  isISOString(str, options = {}) {
    const {
      withMilliseconds = false,
      withTimezone = false,
      withTime = true,
      withDate = true
    } = options;
    let dateRegexStr = "^(?:\\d{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12]\\d|3[01]))";
    let timeRegexStr = "(?:T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";
    if (withMilliseconds) {
      timeRegexStr += "\\.\\d{3}";
    }
    if (withTimezone) {
      timeRegexStr += "(?:Z|[+-](?:[01]\\d|2[0-3]):[0-5]\\d)?)?";
    } else {
      timeRegexStr += ")?";
    }
    let regexStr = "";
    if (withDate && withTime) {
      regexStr = `${dateRegexStr}${timeRegexStr}$`;
    } else if (withDate) {
      regexStr = `${dateRegexStr}$`;
    } else if (withTime) {
      regexStr = `^${timeRegexStr.slice(4)}$`;
    } else {
      return false;
    }
    const regex = new RegExp(regexStr);
    return regex.test(str);
  }
  /**
   * Try to convert Any Types to a specific Type
   * @param input 
   * @param typeString 'string' | 'number' | 'boolean' | 'string[]'
   * @returns 
   */
  tryConvert(input, typeString) {
    switch (typeString) {
      case "string":
        if (typeof input === "string") {
          return input;
        }
        return void 0;
      case "number":
        const num = Number(input);
        if (!isNaN(num)) {
          return num;
        }
        return void 0;
      case "boolean":
        if (typeof input === "boolean") {
          return input;
        }
        if (typeof input === "string") {
          const lowerValue = input.toLowerCase();
          if (lowerValue === "true") {
            return true;
          }
          if (lowerValue === "false") {
            return false;
          }
        }
        if (typeof input === "number") {
          if (input === 1) {
            return true;
          }
          if (input === 0) {
            return false;
          }
        }
        return void 0;
      case "string[]":
        if (Array.isArray(input) && input.every((item) => typeof item === "string")) {
          return input;
        }
        return void 0;
      default:
        return void 0;
    }
  }
  formatToYAMLSaveString(text, replaceBy = void 0) {
    let replaceString = "-";
    if (!replaceBy && this.settings) {
      replaceString = this.settings.specialCharReplacement || "-";
    } else {
      if (replaceBy)
        replaceString = replaceBy;
    }
    return text.replace(/[^a-zA-Z0-9\-_\/äöüßÄÖÜáéíóúýÁÉÍÓÚÝàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛãñõÃÑÕ]/g, replaceString);
  }
  /**
   * Converts a string to a YAML-safe format by adding quotes when necessary.
   * @param input The string, boolean, number or array to make YAML-safe
   * @returns The safely quoted string when needed, or the original string if safe
   */
  toYamlSafeString(input) {
    if (Array.isArray(input)) {
      input.forEach((item, index) => {
        input[index] = this.toYamlSafeString(item).toString();
      });
      return input;
    }
    switch (typeof input) {
      case "number":
        return input;
      case "boolean":
        return input ? "true" : "false";
      case "string":
        const trimmed = input.trim();
        if (trimmed === "")
          return '""';
        const needsQuotes = /[:{}\[\],&*#?|<>=!%@`"'\\]|^[-?\n]|[\s\n]|^[yYnN]|^[0-9]|^[+-]|^(true|false|yes|no|on|off)$/i.test(trimmed);
        const isAlreadyQuoted = trimmed.startsWith('"') && trimmed.endsWith('"') || trimmed.startsWith("'") && trimmed.endsWith("'");
        if (!needsQuotes && !isAlreadyQuoted) {
          return trimmed;
        }
        if (!isAlreadyQuoted) {
          return `"${trimmed.replace(/"/g, '\\"')}"`;
        }
        return trimmed;
      default:
        console.error(`toYamlSafeString(${input}) if of type '${typeof input}'`);
        return input;
    }
  }
  replaceSpaces(text, replaceBy = void 0) {
    let replaceString = "_";
    if (!replaceBy && this.settings) {
      replaceString = this.settings.spaceReplacement || "_";
    } else {
      if (replaceBy)
        replaceString = replaceBy;
    }
    return text.replace(/\s+/g, replaceString);
  }
  formatCamelCase(text) {
    let textParts = text.split(" ");
    let convertedTextParts = [];
    textParts.forEach((text2, index) => {
      let newTextPart = text2.toLowerCase();
      if (index > 0)
        newTextPart = newTextPart.charAt(0).toUpperCase() + newTextPart.slice(1);
      convertedTextParts.push(newTextPart);
    });
    return convertedTextParts.join("");
  }
  formatUpperCamelCase(text) {
    let textParts = text.split(" ");
    let convertedTextParts = [];
    textParts.forEach((text2, index) => {
      let newTextPart = text2.toLowerCase();
      newTextPart = newTextPart.charAt(0).toUpperCase() + newTextPart.slice(1);
      convertedTextParts.push(newTextPart);
    });
    return convertedTextParts.join("");
  }
  /**
   * get the path to a file from a string containing the full parh/name string
   * @param path string
   * @param separator string defaults to '/'
   * @returns string
   */
  getFoldersFromPath(path, separator = "/") {
    if (path === null)
      return null;
    if (path === void 0)
      return void 0;
    const currentPathParts = path.split("/");
    currentPathParts.pop();
    return currentPathParts.join(separator);
  }
  /**
   * removes duplicate strings in an array and deletes empty strings
   * @param stringArray 
   * @returns 
   */
  removeDuplicateStrings(stringArray) {
    if (!stringArray)
      return [];
    const uniqueStringsSet = new Set(stringArray);
    uniqueStringsSet.delete("");
    return [...uniqueStringsSet];
  }
};

// src/rules.ts
var ruleFunctions = [];
function getRuleFunctionById(id) {
  return ruleFunctions.find((rule) => rule.id === id);
}
function applyFormatOptions(value, rule) {
  if (rule.type === "date" || rule.type === "datetime")
    return value;
  switch (typeof value) {
    case "boolean":
    case "number":
      return value;
    case "string":
      if (rule.spaceReplacement && rule.spaceReplacement !== "")
        value = value.replace(/\s+/g, rule.spaceReplacement);
      if (rule.specialCharReplacement && rule.specialCharReplacement !== "")
        value = value.replace(/[^a-zA-Z0-9\-_\/äöüßÄÖÜáéíóúýÁÉÍÓÚÝàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛãñõÃÑÕ]/g, rule.specialCharReplacement);
      if (rule.lowercaseTags)
        value = value.toLowerCase();
      if (rule.prefix && rule.prefix !== "")
        value = rule.prefix + value;
      if (rule.asLink)
        value = `[[${value}]]`;
      return value;
    case "object":
      if (Array.isArray(value)) {
        return value.map((value2) => applyFormatOptions(value2, rule));
      }
      return value;
  }
  return;
}
function executeRule(app, settings, currentFile, returnResult, rule, frontMatter, oldPath) {
  if (!rule.active)
    return returnResult;
  const tools2 = new ScriptingTools(settings, frontMatter);
  let fxResult;
  let oldResult;
  let oldFile = void 0;
  if (oldPath) {
    let oldFileParts = oldPath.split("/");
    oldFile = {
      path: oldPath,
      extension: oldFileParts[oldFileParts.length - 1].split(".")[1],
      name: oldFileParts[oldFileParts.length - 1].split(".")[0],
      stat: currentFile.stat,
      basename: currentFile.basename,
      vault: currentFile.vault,
      parent: currentFile.parent
    };
  }
  if (rule.content === "script") {
    const ruleFunction = parseJSCode(rule.jsCode);
    if (typeof ruleFunction !== "function")
      return;
    fxResult = applyFormatOptions(ruleFunction(app, currentFile, tools2), rule);
    if (oldFile) {
      oldResult = applyFormatOptions(ruleFunction(app, oldFile, tools2), rule);
    }
  } else {
    const functionIndex = ruleFunctions.findIndex((fx) => fx.id === rule.content);
    if (functionIndex !== -1) {
      if (ruleFunctions[functionIndex].inputProperty) {
        fxResult = applyFormatOptions(ruleFunctions[functionIndex].fx(app, currentFile, tools2, frontMatter[rule.inputProperty]), rule);
      } else {
        fxResult = applyFormatOptions(ruleFunctions[functionIndex].fx(app, currentFile, tools2), rule);
      }
      if (oldFile) {
        if (ruleFunctions[functionIndex].inputProperty) {
          oldResult = applyFormatOptions(ruleFunctions[functionIndex].fx(app, oldFile, tools2, frontMatter[rule.inputProperty]), rule);
        } else {
          oldResult = applyFormatOptions(ruleFunctions[functionIndex].fx(app, oldFile, tools2), rule);
        }
      }
    }
  }
  if (rule.type === "number" || rule.type === "checkbox" || rule.type === "date" || rule.type === "datetime") {
    return fxResult;
  }
  switch (rule.addContent) {
    case "overwrite":
      returnResult = fxResult;
      break;
    case "end":
      if (rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
        if (!fxResult)
          fxResult = [];
        if (typeof fxResult === "string")
          fxResult = [fxResult];
        if (!Array.isArray(returnResult))
          returnResult = [returnResult];
        if (!Array.isArray(oldResult))
          oldResult = [oldResult];
        let filtered = returnResult.filter((value) => !oldResult.includes(value));
        returnResult = tools2.removeDuplicateStrings(filtered.concat(fxResult));
      } else {
        if (!returnResult)
          returnResult = "";
        returnResult = returnResult.replaceAll(returnResult, oldResult);
        returnResult = returnResult + fxResult;
      }
      break;
    case "start":
      if (rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
        if (!fxResult)
          fxResult = [];
        if (typeof fxResult === "string")
          fxResult = [fxResult];
        if (!Array.isArray(returnResult))
          returnResult = [returnResult];
        if (!Array.isArray(oldResult))
          oldResult = [oldResult];
        let filtered = returnResult.filter((value) => !oldResult.includes(value));
        returnResult = tools2.removeDuplicateStrings(fxResult.concat(filtered));
      } else {
        if (!returnResult)
          returnResult = "";
        returnResult = returnResult.replaceAll(returnResult, oldResult);
        returnResult = fxResult + returnResult;
      }
      break;
  }
  return returnResult;
}
function removeRule(app, settings, currentFile, returnResult, rule, frontMatter) {
  const tools2 = new ScriptingTools(settings);
  let fxResult;
  if (rule.content === "script") {
    const ruleFunction = parseJSCode(rule.jsCode);
    if (typeof ruleFunction !== "function")
      return;
    fxResult = ruleFunction(app, currentFile, tools2);
  } else {
    const functionIndex = ruleFunctions.findIndex((fx) => fx.id === rule.content);
    if (functionIndex !== -1) {
      if (ruleFunctions[functionIndex].inputProperty) {
        fxResult = applyFormatOptions(ruleFunctions[functionIndex].fx(app, currentFile, tools2, frontMatter[rule.inputProperty]), rule);
      } else {
        fxResult = applyFormatOptions(ruleFunctions[functionIndex].fx(app, currentFile, tools2), rule);
      }
    }
  }
  switch (rule.addContent) {
    case "overwrite":
      returnResult = fxResult;
      break;
    case "end":
      if (rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
        if (!fxResult)
          fxResult = [];
        if (typeof fxResult === "string")
          fxResult = [fxResult];
        if (!Array.isArray(returnResult))
          returnResult = [returnResult];
        if (!Array.isArray(fxResult))
          fxResult = [fxResult];
        let filtered = returnResult.filter((value) => !fxResult.includes(value));
        returnResult = tools2.removeDuplicateStrings(filtered);
      } else {
        if (!returnResult)
          returnResult = "";
        returnResult = returnResult.replaceAll(returnResult, fxResult);
      }
      break;
    case "start":
      if (rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
        if (!fxResult)
          fxResult = [];
        if (typeof fxResult === "string")
          fxResult = [fxResult];
        if (!Array.isArray(returnResult))
          returnResult = [returnResult];
        if (!Array.isArray(fxResult))
          fxResult = [fxResult];
        let filtered = returnResult.filter((value) => !fxResult.includes(value));
        returnResult = tools2.removeDuplicateStrings(filtered);
      } else {
        if (!returnResult)
          returnResult = "";
        returnResult = returnResult.replaceAll(returnResult, fxResult);
      }
      break;
  }
  return returnResult;
}
var tools = new ScriptingTools();
function filterFile(file, fileList, filterMode, type) {
  let result = false;
  const filterArray = type === "folders" ? fileList[filterMode].selectedFolders : fileList[filterMode].selectedFiles;
  if (filterArray.length === 0)
    return filterMode === "include" ? false : true;
  const filePath = file.path;
  const fileFolder = tools.getFoldersFromPath(file.path);
  const fileName = file.basename + "." + file.extension;
  if (type === "files") {
    result = filterArray.includes(filePath);
  }
  if (type === "folders") {
    filterArray.forEach((path) => {
      result = (fileFolder == null ? void 0 : fileFolder.startsWith(path.slice(1))) || false;
      if (result === true)
        return;
    });
  }
  ;
  return filterMode === "exclude" ? !result : result;
}
function checkIfFileAllowed(file, settings, rule) {
  let result = false;
  if (!file)
    return false;
  if (settings) {
    try {
      console.log(`check file ${file.path} against settings`, settings.include, settings.exclude);
      if (settings.include.selectedFiles.length > 0) {
        result = filterFile(file, settings, "include", "files");
      }
      if (settings.include.selectedFolders.length > 0) {
        result = filterFile(file, settings, "include", "folders");
      }
      if (settings.exclude.selectedFiles.length > 0) {
        result = filterFile(file, settings, "exclude", "files");
      }
      if (settings.exclude.selectedFolders.length > 0) {
        result = filterFile(file, settings, "exclude", "folders");
      }
    } catch (error) {
      console.error(`Error filtering file ${file.path} globally: ${error}`);
      return false;
    }
  }
  if (rule) {
    try {
      console.log(`check file ${file.path} against rule`, rule.include, rule.exclude);
      if (rule.include.selectedFiles.length > 0) {
        result = filterFile(file, rule, "include", "files");
      }
      if (rule.include.selectedFolders.length > 0) {
        result = filterFile(file, rule, "include", "folders");
      }
      if (rule.exclude.selectedFiles.length > 0) {
        result = filterFile(file, rule, "exclude", "files");
      }
      if (rule.exclude.selectedFolders.length > 0) {
        result = filterFile(file, rule, "exclude", "folders");
      }
    } catch (error) {
      console.error(`Error filtering file ${file.path} by rule ${rule.property}|${rule.content}: ${error}`);
      return false;
    }
  }
  return result;
}
ruleFunctions.push({
  id: "default",
  description: "Pass parameter",
  source: "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}",
  type: ["text"],
  fx: function(app, file, tools2) {
    let result = "";
    return result;
  }
});
ruleFunctions.push({
  id: "fullPath",
  description: "Full path, filename",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases", "multitext"],
  fx: function(app, file, tools2) {
    let parts = file.path.split("/");
    parts.pop();
    parts.push(file.basename);
    return parts.join("/");
  }
});
ruleFunctions.push({
  id: "fullPathExt",
  description: "Full path, filename and Extension",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const result = file.path;\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools2) {
    return `${file.path}`;
  }
});
ruleFunctions.push({
  id: "path",
  description: "Full Path",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools2) {
    let parts = file.path.split("/");
    parts.pop();
    return parts.join("/");
  }
});
ruleFunctions.push({
  id: "linkToFile",
  description: "Link to file",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases", "multitext"],
  fx: function(app, file, tools2) {
    let parts = file.path.split("/");
    parts.pop();
    if (parts[parts.length - 1] === file.basename)
      parts.pop();
    return `[[${parts.join("/")}/${file.basename}|${file.basename}]]`;
  }
});
ruleFunctions.push({
  id: "pathFolderNotes",
  description: "Path (folder notes)",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases", "multitext"],
  fx: function(app, file, tools2) {
    let parts = file.path.split("/");
    parts.pop();
    if (parts[parts.length - 1] === file.basename)
      parts.pop();
    return parts.join("/");
  }
});
ruleFunctions.push({
  id: "fullPathFolderNotes",
  description: 'Full Path (comply with "folder notes")',
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools2) {
    let parts = file.path.split("/");
    parts.pop();
    if (parts[parts.length - 1] === file.basename)
      parts.pop();
    parts.push(file.basename);
    return parts.join("/");
  }
});
ruleFunctions.push({
  id: "fullPathExtFolderNotes",
  description: 'Full Path with Extension (comply with "folder notes")',
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    parts.pop(); // remove file name\n    result = result + parts.join('/');\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools2) {
    let parts = file.path.split("/");
    parts.pop();
    if (parts[parts.length - 1] === file.basename)
      parts.pop();
    parts.push(file.name);
    return parts.join("/");
  }
});
ruleFunctions.push({
  id: "isRoot",
  description: "File in Root folder",
  source: "function (app, file, tools) { // do not change this line!\n  let parts = file.path.split('/');\n  return parts.length === 1;\n}",
  type: ["checkbox"],
  fx: function(app, file, tools2) {
    let parts = file.path.split("/");
    return parts.length === 1;
  }
});
ruleFunctions.push({
  id: "folder",
  description: "Parent Folder",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    result = parts[parts.length-2];\n  }\n  return result;\n}",
  type: ["text", "tags"],
  fx: function(app, file, tools2) {
    const path = file.path;
    const parts = path.split("/");
    let result = "";
    if (parts.length > 1) {
      result = parts[parts.length - 2];
    }
    return result;
  }
});
ruleFunctions.push({
  id: "folders",
  description: "All folders of the file as a list",
  source: "function (app, file, tools) { // do not change this line!\n  const path = file.path; // acquire file path\n  const result = path.split('/');\n  result.pop(); // remove file name\n  return result;\n}",
  type: ["multitext", "tags", "aliases"],
  fx: function(app, file, tools2) {
    const path = file.path;
    const result = path.split("/");
    result.pop();
    return result;
  }
});
ruleFunctions.push({
  id: "rootFolder",
  description: "Root folder",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file path\n  const path = file.path;\n  const parts = path.split('/');\n  let result = '';\n  if (parts.length > 1) {\n    result = parts[0];\n  }\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools2) {
    const path = file.path;
    const parts = path.split("/");
    let result = "";
    if (parts.length > 1) {
      result = parts[0];
    }
    return result;
  }
});
ruleFunctions.push({
  id: "name",
  description: "File name without extension",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file name\n  const result = file.name.split('.');\n  result.pop(); // remove extension\n  result.join('.'); // reconstruct the file name\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools2) {
    const result = file.name.split(".");
    result.pop();
    result.join(".");
    return result;
  }
});
ruleFunctions.push({
  id: "nameExt",
  description: "File name with extension",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file name\n  const result = file.name;\n  return result;\n}",
  type: ["text", "tags", "aliases"],
  fx: function(app, file, tools2) {
    const result = file.name;
    return result;
  }
});
ruleFunctions.push({
  id: "getProperty",
  description: "Get a property",
  inputProperty: true,
  source: "function (app, file, tools) { // do not change this line!\n  const result = input;\n  return result;\n}",
  type: ["text", "multitext", "tags", "aliases"],
  fx: function(app, file, tools2, input) {
    const result = input;
    return result;
  }
});
ruleFunctions.push({
  id: "dateTimeCreated",
  description: "Date (and Time) created",
  source: "function (app, file, tools) { // do not change this line!\n  const timeOffset = new Date(Date.now()).getTimezoneOffset()*60000; // get local time offset\n  const result = new Date(file.stat.ctime-timeOffset);\n  return result.toISOString().split('Z')[0]; // remove UTC symbol\n}",
  type: ["date", "datetime"],
  fx: function(app, file, tools2) {
    const timeOffset = new Date(Date.now()).getTimezoneOffset() * 6e4;
    const result = new Date(file.stat.ctime - timeOffset);
    return result.toISOString().split("Z")[0];
  }
});
ruleFunctions.push({
  id: "dateTimeModified",
  description: "Date (and Time) modified",
  source: "function (app, file, tools) { // do not change this line!\n  const timeOffset = new Date(Date.now()).getTimezoneOffset()*60000;\n  const result = new Date(file.stat.mtime-timeOffset); // Apply offset to GMT Timestamp\n  return result.toISOString().split('Z')[0]; // remove UTC symbol\n}",
  type: ["date", "datetime"],
  fx: function(app, file, tools2) {
    const timeOffset = new Date(Date.now()).getTimezoneOffset() * 6e4;
    const result = new Date(file.stat.mtime - timeOffset);
    return result.toISOString().split("Z")[0];
  }
});
ruleFunctions.push({
  id: "fileSizeBytes",
  description: "File size in bytes",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file size\n  const result = file.stat.size;\n  return result; // return you result.\n}",
  type: ["number"],
  fx: function(app, file, tools2) {
    const result = file.stat.size;
    return result;
  }
});
ruleFunctions.push({
  id: "fileSizeString",
  description: "File size formatted as text",
  source: "function (app, file, tools) { // do not change this line!\n  // acquire file size\n  let size =file.stat.size;\n  const precision = 2; // number of decimal places\n  if (size > 1024) {\n    size = size / 1024;\n    if (size > 1024) {\n      size = size / 1024;\n      if (size > 1024) {\n        size = size / 1024;\n        return Number.parseFloat(size).toFixed(precision) + ' GB';\n      } \n      return Number.parseFloat(size).toFixed(precision) + ' MB';\n    }\n    return Number.parseFloat(size).toFixed(precision) + ' KB';\n  }   \n  return size + ' Bytes'; // return you result.\n}",
  type: ["text"],
  fx: function(app, file, tools2) {
    let size = file.stat.size;
    const precision = 2;
    if (size > 1024) {
      size = size / 1024;
      if (size > 1024) {
        size = size / 1024;
        if (size > 1024) {
          size = size / 1024;
          return size.toFixed(precision) + " GB";
        }
        return size.toFixed(precision) + " MB";
      }
      return size.toFixed(precision) + " KB";
    }
    return size + " Bytes";
  }
});

// src/types.ts
var versionString = "0.0.13";
var DEFAULT_FILTER_FILES_AND_FOLDERS = {
  selectedFolders: [],
  selectedFiles: [],
  mode: "exclude",
  display: "folders"
};
var DEFAULT_SETTINGS = {
  tagPrefix: "",
  excludeRootFolder: false,
  tagsPropertyName: "tags",
  spaceReplacement: "_",
  specialCharReplacement: "_",
  lowercaseTags: false,
  knownProperties: [],
  rules: [],
  liveRules: [],
  useTextArea: false,
  exclude: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "exclude",
    display: "folders"
  },
  include: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "include",
    display: "folders"
  },
  configuredProperties: []
};
var DEFAULT_RULE_DEFINITION = {
  id: "",
  active: true,
  asLink: false,
  addContent: "overwrite",
  property: "",
  value: "",
  customProperty: "",
  type: "text",
  typeProperty: { name: "", type: "text", source: "registered" },
  content: "",
  buildInCode: "",
  jsCode: "",
  showContent: false,
  exclude: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "exclude",
    display: "folders"
  },
  include: {
    selectedFolders: [],
    selectedFiles: [],
    mode: "include",
    display: "folders"
  },
  prefix: "",
  spaceReplacement: "",
  specialCharReplacement: "",
  lowercaseTags: false,
  inputProperty: "",
  onlyModify: true
};

// src/alertBox.ts
var import_obsidian2 = require("obsidian");
var AlertModal = class extends import_obsidian2.Modal {
  constructor(app, title, description, btn1, btn2) {
    super(app);
    this.title = title;
    this.description = description;
    this.btn1Text = btn1;
    this.btn2Text = btn2;
    this.promise = new Promise((resolve) => {
      this.resolvePromise = resolve;
    });
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.title });
    contentEl.createEl("p", { text: this.description });
    new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn.setButtonText(this.btn1Text).setCta().onClick(() => {
        this.close();
        this.resolvePromise(true);
      });
    }).addButton((btn) => {
      btn.setButtonText(this.btn2Text).onClick(() => {
        this.close();
        this.resolvePromise(false);
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  async openAndGetValue() {
    this.open();
    return this.promise;
  }
};

// src/directorySelectionModal.ts
var import_obsidian3 = require("obsidian");
var DirectorySelectionModal = class extends import_obsidian3.Modal {
  // Reference to update dropdown on reset
  /**
   * Creates an instance of the DirectorySelectionModal.
   * @param app - The Obsidian App instance.
   * @param initialFolders - Array of initially selected folder paths.
   * @param initialFiles - Array of initially selected file paths.
   * @param initialMode - The initial selection mode ('include' or 'exclude').
   * @param okCallback - Function to call when the user clicks "OK". Receives the selection result.
   */
  constructor(app, initialFolders, initialFiles, initialMode, initialDisplay, includeExcludeSelectable, okCallback) {
    super(app);
    this.showFiles = false;
    // Container for the tree view
    this.treeNodes = /* @__PURE__ */ new Map();
    // Map path to node info for quick access
    this.modeDropdown = null;
    this.initialFoldersSnapshot = new Set(initialFolders);
    this.initialFilesSnapshot = new Set(initialFiles);
    this.initialModeSnapshot = initialMode;
    this.initialDisplaySnapshot = initialDisplay;
    this.showFiles = initialDisplay === "files" || initialFiles.length > 0;
    this.includeExcludeSelectable = includeExcludeSelectable;
    this.okCallback = okCallback;
    this.resetSelectionToInitial();
  }
  /**
   * Resets the current selection state to the initial state provided at construction.
   */
  resetSelectionToInitial() {
    this.currentFolders = new Set(this.initialFoldersSnapshot);
    this.currentFiles = new Set(this.initialFilesSnapshot);
    this.currentMode = this.initialModeSnapshot;
  }
  /**
   * Resets the current selection state to empty.
   */
  resetSelectionToEmpty() {
    this.currentFolders = /* @__PURE__ */ new Set([]);
    this.currentFiles = /* @__PURE__ */ new Set([]);
    this.currentMode = this.initialModeSnapshot;
  }
  /**
   * Called when the modal is opened. Builds the UI.
   */
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("directory-selection-modal");
    if (this.includeExcludeSelectable) {
      contentEl.createEl("h2", { text: "Include or Exclude Folders and Files" });
    } else {
      contentEl.createEl("h2", { text: `${this.currentMode === "exclude" ? "Exclude" : "Include"} Folders and Files` });
    }
    const controlsEl = contentEl.createDiv({ cls: "modal-controls" });
    this.createModeSetting(controlsEl);
    this.createShowFilesSetting(controlsEl);
    this.treeRootElement = contentEl.createDiv({ cls: "tree-view-container" });
    this.treeRootElement.style.maxHeight = "600px";
    this.treeRootElement.style.overflowY = "auto";
    this.treeRootElement.style.border = "1px solid var(--background-modifier-border)";
    this.treeRootElement.style.padding = "10px";
    this.treeRootElement.style.marginTop = "10px";
    this.treeRootElement.style.marginBottom = "10px";
    if (!this.treeNodes.size) {
      this.buildAndRenderTree();
    }
    this.createActionButtons(contentEl);
  }
  /**
   * Creates the dropdown setting for choosing the selection mode.
   * @param containerEl - The HTML element to append the setting to.
   */
  createModeSetting(containerEl) {
    if (this.includeExcludeSelectable) {
      this.modeDropdown = new import_obsidian3.Setting(containerEl).setName("Selection Mode").setDesc("Choose if the selected files and folders should be excluded or included.").addDropdown((dropdown) => {
        dropdown.addOption("exclude", "exclude").addOption("include", "include").setValue(this.currentMode).onChange((value) => {
          this.currentMode = value;
          this.updateTreeAppearance();
        });
      });
    }
  }
  /**
   * Updates the mode dropdown UI element to reflect the currentMode state.
   */
  updateModeDropdown() {
    var _a;
    const dropdownComponent = (_a = this.modeDropdown) == null ? void 0 : _a.components[0];
    if (dropdownComponent && typeof dropdownComponent.setValue === "function") {
      dropdownComponent.setValue(this.currentMode);
    }
  }
  /**
   * Creates the toggle setting for showing/hiding files in the tree.
   * @param containerEl - The HTML element to append the setting to.
   */
  createShowFilesSetting(containerEl) {
    new import_obsidian3.Setting(containerEl).setName("Show Files").setDesc("Show Files within the directory tree.").addToggle((toggle) => {
      toggle.setValue(this.showFiles).onChange((value) => {
        this.showFiles = value;
        this.buildAndRenderTree();
      });
    });
  }
  /**
   * Creates the "OK" and "Reset" buttons.
   * @param containerEl - The HTML element to append the buttons to.
   */
  createActionButtons(containerEl) {
    const buttonsEl = containerEl.createDiv({ cls: "modal-buttons" });
    buttonsEl.style.marginTop = "15px";
    buttonsEl.style.display = "flex";
    buttonsEl.style.justifyContent = "flex-end";
    buttonsEl.style.gap = "10px";
    const resetButton = buttonsEl.createEl("button");
    (0, import_obsidian3.setIcon)(resetButton, "reset");
    resetButton.ariaLabel = "Reset selection";
    resetButton.onclick = () => {
      this.resetSelectionToInitial();
      this.updateModeDropdown();
      this.buildAndRenderTree();
    };
    const emptyButton = buttonsEl.createEl("button");
    (0, import_obsidian3.setIcon)(emptyButton, "eraser");
    emptyButton.ariaLabel = "Clear selection";
    emptyButton.onclick = () => {
      this.resetSelectionToEmpty();
      this.updateModeDropdown();
      this.buildAndRenderTree();
    };
    const cancelButton = buttonsEl.createEl("button", { text: "Cancel" });
    cancelButton.ariaLabel = "close and discard changes";
    cancelButton.onclick = () => {
      console.log("Cancel Clicked - Returning");
      this.okCallback(null);
      this.close();
    };
    const okButton = buttonsEl.createEl("button", { text: "OK", cls: "mod-cta" });
    okButton.ariaLabel = "close and save changes";
    okButton.onclick = () => {
      this.close();
    };
  }
  /**
   * Builds the logical tree structure data from the vault's files and folders.
   * @returns The root node of the tree structure.
   */
  buildTreeData() {
    const vaultRootNode = {
      path: "/",
      // Root folder path
      name: this.app.vault.getName() || "Vault",
      // Use vault name or default
      type: "folder",
      children: [],
      // Placeholder elements, will be assigned during rendering
      element: null,
      checkbox: null,
      label: null,
      container: null
    };
    const folderNodes = /* @__PURE__ */ new Map();
    folderNodes.set("/", vaultRootNode);
    const allFiles = this.app.vault.getFiles();
    allFiles.forEach((file) => {
      const parentFolder = file.parent;
      if (!parentFolder)
        return;
      let currentPath = "";
      const pathParts = parentFolder.path.split("/").filter((p) => p.length > 0);
      let parentNode = vaultRootNode;
      pathParts.forEach((part) => {
        currentPath = currentPath === "/" ? part : `${currentPath}/${part}`;
        if (!folderNodes.has(currentPath)) {
          const newFolderNode = {
            path: currentPath,
            name: part,
            type: "folder",
            children: [],
            element: null,
            checkbox: null,
            label: null,
            container: null
          };
          folderNodes.set(currentPath, newFolderNode);
          if (!parentNode.children) {
            parentNode.children = [];
          }
          parentNode.children.push(newFolderNode);
          parentNode = newFolderNode;
        } else {
          parentNode = folderNodes.get(currentPath);
        }
      });
    });
    if (this.showFiles) {
      allFiles.forEach((file) => {
        const parentFolder = file.parent;
        if (!parentFolder)
          return;
        const parentPath = "/" + parentFolder.path;
        const parentNode = folderNodes.get(parentPath);
        const fileNode = {
          path: file.path,
          name: file.name,
          type: "file",
          element: null,
          checkbox: null,
          label: null,
          container: null
        };
        if (parentNode) {
          if (!parentNode.children) {
            parentNode.children = [];
          }
          parentNode.children.push(fileNode);
        }
      });
    }
    const sortNodes = (a, b) => {
      if (a.type === "folder" && b.type === "file")
        return -1;
      if (a.type === "file" && b.type === "folder")
        return 1;
      return a.name.localeCompare(b.name);
    };
    folderNodes.forEach((node) => {
      var _a;
      return (_a = node.children) == null ? void 0 : _a.sort(sortNodes);
    });
    return vaultRootNode;
  }
  /**
   * Renders the entire tree structure in the DOM based on the tree data.
   */
  renderTree() {
    var _a;
    this.treeRootElement.empty();
    this.treeNodes.clear();
    const treeData = this.buildTreeData();
    const rootUl = this.treeRootElement.createEl("ul");
    rootUl.addClass("tree-root-ul");
    rootUl.style.listStyle = "none";
    rootUl.style.paddingLeft = "0";
    this.renderTreeNode(treeData, rootUl, 0, this.currentFolders);
    (_a = treeData.children) == null ? void 0 : _a.forEach((childNode) => {
    });
  }
  /**
   * Recursively renders a single tree node and its children in the DOM.
   * @param node - The TreeNode data to render.
   * @param parentElement - The HTML `ul` element to append this node's `li` to.
   * @param level - The current indentation level.
   */
  renderTreeNode(node, parentElement, level, selectedPaths) {
    const li = parentElement.createEl("li");
    li.style.marginLeft = `${level * 20}px`;
    li.addClass(`tree-node-${node.type}`);
    const container = li.createDiv({ cls: "tree-node-container" });
    container.style.display = "flex";
    container.style.alignItems = "center";
    container.style.padding = "2px 0";
    let toggleButton = null;
    let isCollapsed = true;
    if (node.type === "folder") {
      toggleButton = container.createSpan({ cls: "tree-toggle-button" });
      toggleButton.textContent = "\u25B6";
      toggleButton.style.cursor = "pointer";
      toggleButton.style.marginRight = "5px";
      const shouldExpand = this.shouldExpandFolder(node, selectedPaths);
      if (shouldExpand) {
        isCollapsed = false;
      }
      toggleButton.onclick = () => {
        isCollapsed = !isCollapsed;
        if (toggleButton)
          toggleButton.textContent = isCollapsed ? "\u25B6" : "\u25BC";
        if (childrenUl)
          childrenUl.style.display = isCollapsed ? "none" : "block";
      };
    }
    const checkbox = container.createEl("input", { type: "checkbox" });
    checkbox.id = `tree-cb-${node.path.replace(/[^a-zA-Z0-9]/g, "-")}`;
    checkbox.dataset.path = node.path;
    checkbox.dataset.type = node.type;
    const label = container.createEl("label");
    label.textContent = `${node.type === "folder" ? "\u{1F4C1}" : "\u{1F4C4}"} ${node.name}`;
    label.htmlFor = checkbox.id;
    label.style.marginLeft = "5px";
    label.style.cursor = "pointer";
    label.title = node.path;
    node.element = li;
    node.checkbox = checkbox;
    node.label = label;
    node.container = container;
    this.treeNodes.set(node.path, node);
    if (node.type === "folder") {
      checkbox.checked = this.currentFolders.has(node.path);
    } else {
      checkbox.checked = this.currentFiles.has(node.path);
    }
    checkbox.onchange = (event) => {
      const target = event.target;
      const path = target.dataset.path;
      const type = target.dataset.type;
      if (target.checked) {
        if (type === "folder")
          this.currentFolders.add(path);
        else
          this.currentFiles.add(path);
      } else {
        if (type === "folder")
          this.currentFolders.delete(path);
        else
          this.currentFiles.delete(path);
      }
      this.updateTreeAppearance();
    };
    let childrenUl = null;
    if (node.type === "folder" && node.children && node.children.length > 0) {
      childrenUl = li.createEl("ul");
      childrenUl.style.listStyle = "none";
      childrenUl.style.paddingLeft = "0";
      childrenUl.style.marginLeft = "0";
      childrenUl.style.display = isCollapsed ? "none" : "block";
      node.children.forEach((child) => this.renderTreeNode(child, childrenUl, level + 1, selectedPaths));
    }
  }
  // Helper method to determine if a folder should be expanded
  shouldExpandFolder(node, selectedPaths) {
    if (selectedPaths.has(node.path)) {
      return true;
    }
    if (node.children) {
      for (const child of node.children) {
        if (this.shouldExpandFolder(child, selectedPaths)) {
          return true;
        }
      }
    }
    return false;
  }
  /**
   * Updates the visual appearance (enabled/disabled/styling) of all nodes
   * in the tree based on the current mode and selections.
   */
  updateTreeAppearance() {
    this.treeNodes.forEach((node) => {
      let isDisabled = false;
      let isEffectivelyIncluded = false;
      let isEffectivelyExcluded = false;
      let ancestorFolderSelected = false;
      let currentPath = node.path;
      while (currentPath !== "/") {
        const parentPath = currentPath.substring(0, currentPath.lastIndexOf("/")) || "/";
        if (this.currentFolders.has(parentPath)) {
          ancestorFolderSelected = true;
          break;
        }
        if (parentPath === currentPath)
          break;
        currentPath = parentPath;
      }
      const nodeSelected = node.type === "folder" ? this.currentFolders.has(node.path) : this.currentFiles.has(node.path);
      if (this.currentMode === "exclude") {
        isEffectivelyExcluded = nodeSelected || ancestorFolderSelected;
        isDisabled = isEffectivelyExcluded;
      } else {
        if (node.type === "folder") {
          isEffectivelyIncluded = nodeSelected || ancestorFolderSelected;
        } else {
          const parentPath = node.path.substring(0, node.path.lastIndexOf("/")) || "/";
          const parentEffectivelyIncluded = this.isPathEffectivelyIncluded(parentPath);
          isEffectivelyIncluded = nodeSelected || parentEffectivelyIncluded;
        }
        isDisabled = !isEffectivelyIncluded;
      }
      node.checkbox.disabled = false;
      if (isDisabled) {
        node.container.style.opacity = "0.5";
        node.label.style.textDecoration = "line-through";
        node.element.addClass("is-disabled");
      } else {
        node.container.style.opacity = "1";
        node.label.style.textDecoration = "none";
        node.element.removeClass("is-disabled");
      }
      node.element.classList.remove("is-included", "is-excluded");
      if (this.currentMode === "include" && isEffectivelyIncluded) {
        node.element.addClass("is-included");
      } else if (this.currentMode === "exclude" && isEffectivelyExcluded) {
        node.element.addClass("is-excluded");
      }
    });
  }
  /**
   * Helper function to determine if a given path is effectively included
   * in the current selection under 'include' mode.
   * A path is included if it (file or folder) is selected, or if any of its ancestor FOLDERS are selected.
   * @param path - The folder or file path to check.
   * @returns True if the path should be considered included, false otherwise.
   */
  isPathEffectivelyIncluded(path) {
    if (this.currentMode !== "include") {
      return !this.isPathEffectivelyExcluded(path);
    }
    if (this.currentFiles.has(path) || this.currentFolders.has(path)) {
      return true;
    }
    let current = path;
    while (current !== "/") {
      const parentPath = current.substring(0, current.lastIndexOf("/")) || "/";
      if (this.currentFolders.has(parentPath)) {
        return true;
      }
      if (parentPath === current)
        break;
      current = parentPath;
    }
    return false;
  }
  /**
  * Helper function to determine if a given path is effectively excluded
  * in the current selection under 'exclude' mode.
  * A path is excluded if it (file or folder) is selected, or if any of its ancestor FOLDERS are selected.
  * @param path - The folder or file path to check.
  * @returns True if the path should be considered excluded, false otherwise.
  */
  isPathEffectivelyExcluded(path) {
    if (this.currentMode !== "exclude") {
      return false;
    }
    if (this.currentFiles.has(path) || this.currentFolders.has(path)) {
      return true;
    }
    let current = path;
    while (current !== "/") {
      const parentPath = current.substring(0, current.lastIndexOf("/")) || "/";
      if (this.currentFolders.has(parentPath)) {
        return true;
      }
      if (parentPath === current)
        break;
      current = parentPath;
    }
    return false;
  }
  /**
   * Combines building the tree data, rendering the DOM, and applying initial appearance.
   */
  buildAndRenderTree() {
    console.log("Building and rendering tree...");
    this.renderTree();
    this.updateTreeAppearance();
  }
  /**
   * Called when the modal is closed. Cleans up resources.
   */
  onClose() {
    const result = {
      folders: Array.from(this.currentFolders),
      files: Array.from(this.currentFiles),
      mode: this.currentMode,
      display: this.currentDisplay
    };
    console.log("OK Clicked - Returning Result:", result);
    this.okCallback(result);
    const { contentEl } = this;
    contentEl.empty();
    this.treeNodes.clear();
    this.modeDropdown = null;
  }
};
function openDirectorySelectionModal(app, initialFolders, initialFiles, initialMode, initialDisplay, includeExcludeSelectable, okCallback) {
  new DirectorySelectionModal(
    app,
    initialFolders,
    initialFiles,
    initialMode,
    initialDisplay,
    includeExcludeSelectable,
    okCallback
  ).open();
}

// src/settings.ts
var import_crypto2 = require("crypto");

// src/settings-properties.ts
var import_obsidian5 = require("obsidian");
var import_crypto = require("crypto");

// src/editorModal.ts
var import_obsidian4 = require("obsidian");
var codeEditorModal = class extends import_obsidian4.Modal {
  /**
   * Creates an instance of the DirectorySelectionModal.
   * @param app - The Obsidian App instance.
   * @param plugin - The plugin instance.
   * @param initialCode - String with the initial code.
   * @param expectedType - Expected return type.
   * @param activeFile - The currently active file or folder.
   * @param frontmatter - Frontmatter data for the active file.
   * @param okCallback - Function to call when the user clicks "OK". Receives the selection result.
   */
  constructor(app, plugin, initialCode, expectedType, activeFile, frontmatter, okCallback) {
    super(app);
    this.initialCode = initialCode;
    this.expectedType = expectedType;
    this.useTextArea = false;
    this.checkedSuccessfully = false;
    this.activeFile = activeFile;
    this.frontmatter = frontmatter;
    this.currentType = expectedType;
    this.currentCode = initialCode;
    this.plugin = plugin;
    this.scriptingTools = new ScriptingTools(this.plugin.settings, this.frontmatter);
    this.okCallback = okCallback;
    this.resetSelectionToInitial();
  }
  /**
   * Resets the current selection state to the initial state provided at construction.
   */
  resetSelectionToInitial() {
    var _a;
    this.currentCode = this.initialCode;
    (_a = this.cmEditor) == null ? void 0 : _a.setValue(this.currentCode);
    if (this.functionResultTextComponent)
      this.functionResultTextComponent.setValue("");
  }
  /**
   * Resets the current selection state to empty.
   */
  resetSelectionToEmpty() {
    var _a;
    this.currentCode = "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result;\n}";
    (_a = this.cmEditor) == null ? void 0 : _a.setValue(this.currentCode);
    if (this.functionResultTextComponent)
      this.functionResultTextComponent.setValue("");
  }
  loadCodeMirrorMode(mode) {
    try {
      require(`obsidian/lib/codemirror/mode/${mode}/${mode}.js`);
      console.log(`CodeMirror mode '${mode}' loaded successfully (using require).`);
    } catch (error) {
      console.error(`Failed to load CodeMirror mode '${mode}' (using require):`, error);
    }
  }
  /**
   * Called when the modal is opened. Builds the UI.
   */
  async onOpen() {
    const { contentEl } = this;
    if (contentEl.parentElement)
      contentEl.parentElement.style.width = "900px";
    contentEl.empty();
    contentEl.addClass("codeEditor-modal");
    contentEl.createEl("h2", { text: "JavaScript Editor" });
    contentEl.createEl("body", { text: `Make sure your code results: ${this.expectedType}` });
    this.editorRootElement = contentEl.createDiv({ cls: "codeEditor-container" });
    this.editorRootElement.style.height = "600px";
    this.editorRootElement.style.overflowY = "auto";
    this.editorRootElement.style.padding = "10px";
    this.editorRootElement.style.marginTop = "10px";
    this.editorRootElement.style.marginBottom = "10px";
    this.cmEditor = null;
    const ruleOptionsDiv = contentEl.createDiv({ cls: "codeEditor-options" });
    if (this.useTextArea) {
      const ruleOptionsSettings = new import_obsidian4.Setting(this.editorRootElement).addTextArea((textArea) => {
        textArea.setPlaceholder("ender valid JS Code");
        textArea.inputEl.setAttribute("style", `height:190px; width:80%;`);
        textArea.onChange(async (value) => {
          if (this.functionTestButton)
            this.functionTestButton.buttonEl.addClass("mod-warning");
          this.currentCode = value;
        });
      });
    } else {
      const CodeMirror = window.CodeMirror;
      if (CodeMirror) {
        if (!CodeMirror.modes.javascript) {
          await this.loadCodeMirrorMode("javascript");
          console.log("javaScript support loaded");
        }
      }
      let jsCode = this.currentCode;
      this.cmEditor = CodeMirror(this.editorRootElement, {
        value: jsCode || "function (app, file, tools) { // do not change this line!\n  let result = '';\n  return result; // return you result.\n}",
        mode: "javascript",
        lineNumbers: true,
        theme: "obsidian",
        indentUnit: 4,
        lineWrapping: false,
        readOnly: false,
        outerHeight: "600px"
      });
      if (this.cmEditor) {
        this.cmEditor.on("change", (cmEditor) => {
          if (this.functionTestButton)
            this.functionTestButton.buttonEl.addClass("mod-warning");
        });
        this.cmEditor.on("blur", (cmEditor) => {
          this.currentCode = cmEditor.getValue();
        });
      }
      ;
      new import_obsidian4.Setting(ruleOptionsDiv).addButton((button) => {
        this.functionTestButton = button;
        button.setWarning().setButtonText("Run Code").setTooltip("Run the code and check for errors").onClick(async () => {
          if (this.cmEditor) {
            let jsCode2 = this.cmEditor.getValue();
            let userFunction = parseJSCode(jsCode2);
            if (typeof userFunction === "string") {
              let errorHint = "See console for details!";
              if (userFunction.contains("Unexpected token")) {
                errorHint = "Did you missed a semicolon (;)?";
              }
              if (this.functionResultTextComponent)
                this.functionResultTextComponent.setValue(`Syntax error: ${userFunction}! ${errorHint}`);
              this.checkedSuccessfully = false;
              button.buttonEl.addClass("mod-warning");
            } else {
              if (userFunction) {
                try {
                  const result = userFunction(this.app, this.activeFile, this.scriptingTools);
                  if (this.functionResultTextComponent)
                    this.functionResultTextComponent.setValue(`'${result.toString()}' (${typeof result})`);
                  this.updateTypeIcons(result, typesContainer, this.expectedType, this.currentType, this.plugin.settings);
                  button.buttonEl.removeClass("mod-warning");
                  this.checkedSuccessfully = true;
                } catch (e) {
                  if (this.functionResultTextComponent) {
                    this.functionResultTextComponent.setValue(`Syntax error: ${e.message}! See console for details!`);
                  }
                  console.error("Syntax error. ", e, jsCode2, userFunction);
                  this.checkedSuccessfully = false;
                  button.buttonEl.addClass("mod-warning");
                }
              } else {
                console.error("syntax error");
                this.checkedSuccessfully = false;
              }
            }
          }
        });
      }).addText((text) => {
        this.functionResultTextComponent = text;
        text.setPlaceholder("function result").setDisabled(true);
        this.functionResultTextComponent.inputEl.style.width = "580px";
      });
      const typesContainer = ruleOptionsDiv.createDiv({ cls: "property-icons-container" });
    }
    this.createActionButtons(contentEl);
  }
  updateTypeIcons(value, container, expectedType, currentType, settings) {
    const newType = typeof value;
    const typeIcons = {
      "string": ["text", "tags", "aliases", "multitext", "date", "datetime"],
      "number": ["number"],
      "boolean": ["checkbox"],
      "object": ["tags", "aliases", "multitext"]
    };
    if (newType === "string") {
      if (!this.scriptingTools.isISOString(value, { withDate: true })) {
        typeIcons[newType].splice(typeIcons[newType].indexOf("date"), 1);
        console.error("Invalid date format:", value);
      }
      if (!this.scriptingTools.isISOString(value, { withDate: true, withTime: true })) {
        typeIcons[newType].splice(typeIcons[newType].indexOf("datetime"), 1);
        console.error("Invalid date format:", value);
      }
    }
    container.empty();
    for (let obsidianType of typeIcons[newType]) {
      if (obsidianType) {
        const iconEl = container.createSpan({ cls: "property-icon setting-item-icon" });
        updatePropertyIcon(iconEl, obsidianType);
      }
    }
  }
  /**
   * Creates the "OK" and "Reset" buttons.
   * @param containerEl - The HTML element to append the buttons to.
   */
  createActionButtons(containerEl) {
    const buttonsEl = containerEl.createDiv({ cls: "modal-buttons" });
    buttonsEl.style.marginTop = "15px";
    buttonsEl.style.display = "flex";
    buttonsEl.style.justifyContent = "flex-end";
    buttonsEl.style.gap = "10px";
    const resetButton = buttonsEl.createEl("button");
    (0, import_obsidian4.setIcon)(resetButton, "reset");
    resetButton.ariaLabel = "Reset selection";
    resetButton.onclick = () => {
      this.resetSelectionToInitial();
    };
    const emptyButton = buttonsEl.createEl("button");
    (0, import_obsidian4.setIcon)(emptyButton, "eraser");
    emptyButton.ariaLabel = "Clear selection";
    emptyButton.onclick = () => {
      this.resetSelectionToEmpty();
    };
    const cancelButton = buttonsEl.createEl("button", { text: "Cancel" });
    cancelButton.ariaLabel = "close and discard changes";
    cancelButton.onclick = () => {
      console.log("Cancel Clicked - Returning");
      this.okCallback(null);
      this.close();
    };
    const okButton = buttonsEl.createEl("button", { text: "OK", cls: "mod-cta" });
    cancelButton.ariaLabel = "close and save changes";
    okButton.onclick = () => {
      this.close();
    };
  }
  /**
   * Called when the modal is closed. Cleans up resources.
   */
  onClose() {
    const result = {
      code: this.currentCode,
      checked: this.checkedSuccessfully,
      type: "text"
    };
    console.log("OK Clicked - Returning Result:", result);
    this.okCallback(result);
    const { contentEl } = this;
    contentEl.empty();
  }
};
function openCodeEditorModal(app, plugin, initialCode, expectedType, activeFile, frontmatter, okCallback) {
  new codeEditorModal(
    app,
    plugin,
    initialCode,
    expectedType,
    activeFile,
    frontmatter,
    okCallback
  ).open();
}

// src/settings-properties.ts
var RulesTable = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin, container, settingsParameter) {
    super(app, plugin);
    this.knownProperties = {};
    this.plugin = plugin;
    this.container = container;
    this.settingsParameter = settingsParameter;
  }
  /**
   * * Fetches custom property information from all markdown files in the vault.
   *
   * @return {*} 
   */
  fetchCustomPropertyInfos() {
    const propertyInfos = {};
    const files = this.app.vault.getMarkdownFiles();
    files.forEach((file) => {
      const metadata = this.app.metadataCache.getFileCache(file);
      if (metadata == null ? void 0 : metadata.frontmatter) {
        Object.keys(metadata.frontmatter).forEach((key) => {
          if (!propertyInfos[key]) {
            propertyInfos[key] = { name: key, type: "text" };
          }
        });
      }
    });
    return propertyInfos;
  }
  async fetchKnownProperties() {
    if (typeof this.app.metadataCache.getAllPropertyInfos === "function") {
      this.knownProperties = this.app.metadataCache.getAllPropertyInfos();
    } else {
      this.knownProperties = this.fetchCustomPropertyInfos();
    }
    this.knownProperties = Object.fromEntries(
      Object.entries(this.knownProperties).sort(([keyA], [keyB]) => keyA.localeCompare(keyB))
    );
    console.log(this.knownProperties);
  }
  // Helper to render one rule
  renderPropertyRow(containerEl, rule, index) {
    var _a, _b, _c, _d, _e, _f;
    const activeFile = this.app.workspace.getActiveFile();
    const rowEl = containerEl.createDiv({ cls: "property-setting-row setting-item" });
    rowEl.id = rule.id;
    const controlEl = rowEl.createDiv({ cls: "setting-item-control" });
    controlEl.style.gap = "0px";
    const leftContainer = controlEl.createDiv({ cls: "property-left-container" });
    const iconEl = leftContainer.createSpan({ cls: "property-icon setting-item-icon" });
    (0, import_obsidian5.setIcon)(iconEl, "hash");
    const searchContainer = leftContainer.createDiv({ cls: "property-search-container" });
    const nameInput = new import_obsidian5.TextComponent(searchContainer).setPlaceholder("Select property...").setValue(rule.property || "").onChange(async (value) => {
      this.renderSearchResults(searchContainer, value, index);
    });
    nameInput.inputEl.style.border = "none";
    nameInput.inputEl.addEventListener("focus", () => {
      this.renderSearchResults(searchContainer, nameInput.getValue(), index);
    });
    nameInput.inputEl.addEventListener("input", () => {
      this.renderSearchResults(searchContainer, nameInput.getValue(), index);
    });
    nameInput.inputEl.addEventListener("blur", (event) => {
      setTimeout(() => {
        const relatedTarget = event.relatedTarget;
        const resultsEl = searchContainer.querySelector(".property-search-results");
        if (!resultsEl || !resultsEl.contains(relatedTarget)) {
          this.clearSearchResults(searchContainer);
        }
      }, 100);
    });
    const currentPropertyInfo = this.knownProperties[rule.property];
    if (currentPropertyInfo) {
      updatePropertyIcon(iconEl, currentPropertyInfo.type);
    } else if (rule.property) {
      (0, import_obsidian5.setIcon)(iconEl, "alert-circle");
    }
    const middleContainer = controlEl.createDiv({ cls: "property-middle-container" });
    const valueContainer = middleContainer.createDiv({ cls: "property-value-container" });
    if (activeFile) {
      this.app.fileManager.processFrontMatter(activeFile, (frontmatter) => {
        rule.value = executeRule(this.app, this.plugin.settings, activeFile, "", rule, frontmatter);
      }, { "mtime": activeFile.stat.mtime });
    }
    let previewComponent = this.renderValueInput(valueContainer, currentPropertyInfo, rule.value, index);
    const propertyDevDropdown = new import_obsidian5.DropdownComponent(middleContainer);
    propertyDevDropdown.selectEl.setAttribute("style", "width:35%");
    propertyDevDropdown.addOption("", "Select a content");
    for (let ruleFunction of ruleFunctions) {
      console.log(rule.type);
      if (ruleFunction.type.contains(rule.type)) {
        propertyDevDropdown.addOption(ruleFunction.id, ruleFunction.description);
      }
    }
    propertyDevDropdown.addOption("script", "JavaScript function (advanced)");
    propertyDevDropdown.setValue(rule.content);
    propertyDevDropdown.onChange(async (value) => {
      var _a2, _b2, _c2;
      if (value !== "") {
        if (value !== "script") {
          let oldOriginalCode = ((_a2 = getRuleFunctionById(rule.content)) == null ? void 0 : _a2.source) || ruleFunctions[0].source;
          if (rule.buildInCode !== "" && rule.buildInCode !== oldOriginalCode) {
            const shouldProceed = await new AlertModal(
              this.app,
              "Overwrite existing code?",
              "I sees like you have custom code for this rule! Should this be overwritten by default code for this parameter?",
              "Yes",
              "No"
            ).openAndGetValue();
            if (shouldProceed) {
              rule.buildInCode = ((_b2 = getRuleFunctionById(value)) == null ? void 0 : _b2.source) || ruleFunctions[0].source;
            } else {
              rule.buildInCode;
            }
            await this.plugin.saveSettings();
          } else {
            rule.buildInCode = ((_c2 = getRuleFunctionById(value)) == null ? void 0 : _c2.source) || ruleFunctions[0].source;
            await this.plugin.saveSettings();
          }
        } else {
        }
        rule.content = value;
        await this.plugin.saveSettings();
        this.updatePreview(activeFile, rule, previewComponent.inputEl);
      }
    });
    new import_obsidian5.ButtonComponent(middleContainer).setIcon("gear").setTooltip("open settings").setClass("property-icon-button").onClick(async () => {
      let settingsContainers = containerEl.getElementsByClassName("property-options-container");
      for (let container of settingsContainers) {
        if (container.getAttribute("id") !== rule.id)
          container.setAttribute("style", "display: none;");
      }
      optionEL.style.display = optionEL.style.display === "block" ? "none" : "block";
    });
    const deleteButtonContainer = controlEl.createDiv({ cls: "property-delete-button-container" });
    new import_obsidian5.ButtonComponent(deleteButtonContainer).setIcon("trash-2").setTooltip("remove this rule").setClass("mod-subtle").onClick(async () => {
      this.plugin.settings[this.settingsParameter].splice(index, 1);
      await this.plugin.saveSettings();
      this.display();
    });
    controlEl.style.display = "flex";
    controlEl.style.alignItems = "center";
    controlEl.style.justifyContent = "space-between";
    controlEl.style.width = "100%";
    leftContainer.style.display = "flex";
    leftContainer.style.alignItems = "center";
    leftContainer.style.minWidth = "150px";
    iconEl.style.marginRight = "8px";
    searchContainer.style.position = "relative";
    searchContainer.style.flexGrow = "1";
    valueContainer.style.flexGrow = "2";
    deleteButtonContainer.style.marginLeft = "auto";
    const optionEL = containerEl.createDiv({ cls: "property-options-container" });
    optionEL.id = rule.id;
    optionEL.style.display = "none";
    const removeContentButton = new import_obsidian5.Setting(optionEL).setName("Remove content").setDesc(`Before making changes you might consider to remove content generated by this rule`).addButton(
      (button) => {
        button.setWarning().setButtonText("Remove Content").setCta().onClick(() => {
          let count = this.plugin.removeFrontmatterParamsFromAllFiles(rule);
          button.removeCta();
          button.setDisabled(true);
          removeContentButton.setDesc(`Removed this rule from ${count.files} files.`);
        });
      }
    );
    new import_obsidian5.Setting(optionEL).setName("Rule active").setDesc("If enabled, the rule will be executed").addToggle(
      (toggle) => toggle.setValue(rule.active).onChange(async (value) => {
        rule.active = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian5.Setting(optionEL).setName("Modify only").setDesc("Only modify existing properties").addToggle((toggle) => toggle.setValue(rule.onlyModify).onChange(async (value) => {
      rule.onlyModify = value;
      await this.plugin.saveSettings();
      this.updatePreview(activeFile, rule, previewComponent.inputEl);
    }));
    if (rule.type === "text" || rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
      const ruleFunction = ruleFunctions.find((item) => item.id === rule.content);
      if (ruleFunction && ruleFunction.inputProperty !== void 0) {
        let inputPropertiesDropdown;
        new import_obsidian5.Setting(optionEL).setName("Input Property").setDesc("Select a property as input").addDropdown((dropdown) => {
          inputPropertiesDropdown = dropdown;
          dropdown.setValue(rule.addContent).onChange(async (value) => {
            if (value !== "") {
              rule.inputProperty = value;
              await this.plugin.saveSettings();
              this.updatePreview(activeFile, rule, previewComponent.inputEl);
            }
          });
        });
        Object.entries(this.knownProperties).forEach((item) => {
          inputPropertiesDropdown.addOption(item[1].name, item[1].name);
        });
        inputPropertiesDropdown.setValue(rule.inputProperty);
      }
      if (rule.type === "tags" || rule.type === "aliases") {
        new import_obsidian5.Setting(optionEL).setName("Prefix").setDesc('Optional prefix to add before the content (i.e. "prefix/")').addText((text) => text.setPlaceholder("no prefix").setValue(rule.prefix).onChange(async (value) => {
          rule.prefix = value;
          await this.plugin.saveSettings();
          this.updatePreview(activeFile, rule, previewComponent.inputEl);
        }));
      }
      new import_obsidian5.Setting(optionEL).setName("Space replacement").setDesc('Character to replace spaces in folder names (suggested: "_")').addText((text) => text.setPlaceholder("no replacement").setValue(rule.spaceReplacement).onChange(async (value) => {
        rule.spaceReplacement = value;
        await this.plugin.saveSettings();
        this.updatePreview(activeFile, rule, previewComponent.inputEl);
      }));
      new import_obsidian5.Setting(optionEL).setName("Special character replacement").setDesc('Character to replace special characters (suggested: "-") - preserves letters with diacritics').addText((text) => text.setPlaceholder("no replacement").setValue(rule.specialCharReplacement).onChange(async (value) => {
        rule.specialCharReplacement = value;
        await this.plugin.saveSettings();
        this.updatePreview(activeFile, rule, previewComponent.inputEl);
      }));
      new import_obsidian5.Setting(optionEL).setName("Convert to lowercase").setDesc("Convert values to lowercase").addToggle((toggle) => toggle.setValue(rule.lowercaseTags).onChange(async (value) => {
        rule.lowercaseTags = value;
        await this.plugin.saveSettings();
        this.updatePreview(activeFile, rule, previewComponent.inputEl);
      }));
      new import_obsidian5.Setting(optionEL).setName("Result as Link").setDesc("Format Result as Link").addToggle(
        (toggle) => toggle.setValue(rule.asLink).onChange(async (value) => {
          rule.asLink = value;
          await this.plugin.saveSettings();
          this.updatePreview(activeFile, rule, previewComponent.inputEl);
        })
      );
    }
    if (rule.type === "text" || rule.type === "multitext" || rule.type === "tags" || rule.type === "aliases") {
      new import_obsidian5.Setting(optionEL).setName("Add content").setDesc("select how the content should be stored").addDropdown(
        (dropdown) => dropdown.addOption("overwrite", "replace content").addOption("start", "place on start").addOption("end", "place on end").setValue(rule.addContent).onChange(async (value) => {
          if (value !== "") {
            rule.addContent = value === "overwrite" ? "overwrite" : value === "start" ? "start" : "end";
            await this.plugin.saveSettings();
            this.updatePreview(activeFile, rule, previewComponent.inputEl);
          }
        })
      );
    }
    const includeEL = new import_obsidian5.Setting(optionEL).setName("Include Files and Folders for this rule ").setDesc(`Currently ${((_a = rule.include) == null ? void 0 : _a.selectedFolders.length) || 0} folders and ${((_b = rule.include) == null ? void 0 : _b.selectedFiles.length) || 0} files will be ${((_c = rule.include) == null ? void 0 : _c.mode) || "include"}d.`).addButton((button) => {
      button.setIcon("folder-check").setButtonText("Include").setCta().onClick(() => {
        var _a2, _b2, _c2;
        openDirectorySelectionModal(
          this.app,
          ((_a2 = rule.include) == null ? void 0 : _a2.selectedFolders) || [],
          ((_b2 = rule.include) == null ? void 0 : _b2.selectedFiles) || [],
          "include",
          ((_c2 = rule.include) == null ? void 0 : _c2.display) || "folders",
          false,
          // include, include option hidden
          (result) => {
            var _a3, _b3, _c3;
            if (!result)
              return;
            if (!rule.include) {
              rule.include = Object.assign({}, DEFAULT_FILTER_FILES_AND_FOLDERS, {
                mode: "include"
              });
            }
            ;
            rule.include.selectedFolders = result.folders;
            rule.include.selectedFiles = result.files;
            rule.include.mode = "include";
            rule.include.display = result.display;
            this.plugin.saveSettings();
            console.log(rule.include);
            this.updateFilterIndicator(activeFile, this.propertiesListEl);
            includeEL.setDesc(`Currently ${((_a3 = rule.include) == null ? void 0 : _a3.selectedFolders.length) || 0} folders and ${((_b3 = rule.include) == null ? void 0 : _b3.selectedFiles.length) || 0} files will be ${((_c3 = rule.include) == null ? void 0 : _c3.mode) || "include"}d.`);
          }
        );
      });
    });
    const excludeEL = new import_obsidian5.Setting(optionEL).setName("Exclude Files and Folders from this rule").setDesc(`Currently ${((_d = rule.exclude) == null ? void 0 : _d.selectedFolders.length) || 0} folders and ${((_e = rule.exclude) == null ? void 0 : _e.selectedFiles.length) || 0} files will be ${((_f = rule.exclude) == null ? void 0 : _f.mode) || "exclude"}d.`).addButton((button) => {
      button.setIcon("folder-x").setButtonText("Exclude").setCta().onClick(() => {
        var _a2, _b2, _c2;
        openDirectorySelectionModal(
          this.app,
          ((_a2 = rule.exclude) == null ? void 0 : _a2.selectedFolders) || [],
          ((_b2 = rule.exclude) == null ? void 0 : _b2.selectedFiles) || [],
          "exclude",
          ((_c2 = rule.exclude) == null ? void 0 : _c2.display) || "folders",
          false,
          // include, exclude option hidden
          (result) => {
            var _a3, _b3, _c3;
            if (!result)
              return;
            if (!rule.exclude) {
              rule.exclude = Object.assign({}, DEFAULT_FILTER_FILES_AND_FOLDERS, {
                mode: "exclude"
              });
            }
            ;
            rule.exclude.selectedFolders = result.folders;
            rule.exclude.selectedFiles = result.files;
            rule.exclude.mode = "exclude";
            rule.exclude.display = result.display;
            this.plugin.saveSettings();
            console.log(rule.exclude);
            this.updateFilterIndicator(activeFile, this.propertiesListEl);
            excludeEL.setDesc(`Currently ${((_a3 = rule.exclude) == null ? void 0 : _a3.selectedFolders.length) || 0} folders and ${((_b3 = rule.exclude) == null ? void 0 : _b3.selectedFiles.length) || 0} files will be ${((_c3 = rule.exclude) == null ? void 0 : _c3.mode) || "exclude"}d.`);
          }
        );
      });
    });
    new import_obsidian5.Setting(optionEL).setName("Script").setDesc("edit the script for own modifications").addButton(
      (button) => button.setButtonText("JS Editor").onClick(() => {
        var _a2, _b2;
        openCodeEditorModal(
          this.app,
          this.plugin,
          rule.content === "script" ? rule.jsCode : rule.buildInCode,
          ((_a2 = rule.typeProperty) == null ? void 0 : _a2.type) || "text",
          activeFile,
          activeFile ? ((_b2 = this.app.metadataCache.getFileCache(activeFile)) == null ? void 0 : _b2.frontmatter) || {} : {},
          (result) => {
            if (!result)
              return;
            if (rule.content === "script") {
              rule.jsCode = result.code;
            } else {
              rule.buildInCode = result.code;
            }
            this.plugin.saveSettings();
          }
        );
      })
    );
  }
  renderSearchResults(searchContainerEl, searchTerm, rowIndex) {
    this.clearSearchResults(searchContainerEl);
    const filteredProperties = Object.entries(this.knownProperties).filter(([name]) => name.toLowerCase().includes(searchTerm.toLowerCase()));
    if (filteredProperties.length === 0 && searchTerm) {
      return;
    }
    if (filteredProperties.length === 0 && !searchTerm) {
      return;
    }
    const resultsEl = searchContainerEl.createDiv({ cls: "property-search-results menu" });
    resultsEl.style.position = "absolute";
    resultsEl.style.top = "100%";
    resultsEl.style.left = "0";
    resultsEl.style.width = "calc(100% + 100px)";
    resultsEl.style.zIndex = "10";
    resultsEl.style.maxHeight = "200px";
    resultsEl.style.overflowY = "auto";
    let activeIndex = -1;
    const updateActiveItem = (newIndex) => {
      const items = resultsEl.querySelectorAll(".menu-item");
      items.forEach((item, index) => {
        if (index === newIndex) {
          item.addClass("property-search-is-active");
          item.scrollIntoView({ block: "nearest" });
        } else {
          item.removeClass("property-search-is-active");
        }
      });
      activeIndex = newIndex;
    };
    const selectActiveItem = async () => {
      if (activeIndex >= 0 && activeIndex < filteredProperties.length) {
        const [name, info] = filteredProperties[activeIndex];
        this.plugin.settings[this.settingsParameter][rowIndex].property = name;
        this.plugin.settings[this.settingsParameter][rowIndex].type = info.type;
        this.plugin.settings[this.settingsParameter][rowIndex].value = void 0;
        await this.plugin.saveSettings();
        this.clearSearchResults(searchContainerEl);
        this.display();
      }
    };
    filteredProperties.forEach(([name, info], index) => {
      const itemEl = resultsEl.createDiv({ cls: "menu-item" });
      const itemIcon = itemEl.createSpan({ cls: "menu-item-icon" });
      updatePropertyIcon(itemIcon, info.type);
      itemEl.createSpan({ text: name });
      itemEl.addEventListener("mousedown", async (e) => {
        e.preventDefault();
        activeIndex = index;
        await selectActiveItem();
      });
    });
    searchContainerEl.addEventListener("keydown", async (e) => {
      const items = resultsEl.querySelectorAll(".menu-item");
      if (e.key === "ArrowDown") {
        e.preventDefault();
        updateActiveItem((activeIndex + 1) % items.length);
      } else if (e.key === "ArrowUp") {
        e.preventDefault();
        updateActiveItem((activeIndex - 1 + items.length) % items.length);
      } else if (e.key === "Enter") {
        e.preventDefault();
        await selectActiveItem();
      }
    });
  }
  clearSearchResults(searchContainerEl) {
    const resultsEl = searchContainerEl.querySelector(".property-search-results");
    if (resultsEl) {
      resultsEl.remove();
    }
  }
  renderValueInput(containerEl, propertyInfo, currentValue, index) {
    let returnComponent;
    containerEl.empty();
    if (!propertyInfo) {
      containerEl.setText("");
      containerEl.addClass("text-muted");
      return;
    }
    const type = propertyInfo.type;
    switch (type) {
      case "number":
        returnComponent = new import_obsidian5.TextComponent(containerEl).setPlaceholder("Numeric Value").setValue(currentValue !== void 0 && currentValue !== null ? String(currentValue) : "").onChange(async (value) => {
          const numValue = value === "" ? void 0 : parseFloat(value);
          this.plugin.settings[this.settingsParameter][index].value = isNaN(numValue) ? void 0 : numValue;
          await this.plugin.saveSettings();
        });
        returnComponent.inputEl.type = "number";
        break;
      case "checkbox":
        returnComponent = containerEl.createDiv({ cls: "tri-state-checkbox clickable-icon" });
        returnComponent.setAttribute("aria-label", "Checkbox change state");
        returnComponent.setAttribute("role", "checkbox");
        const updateCheckboxVisual = (state) => {
          let iconName;
          let ariaState;
          if (state === true) {
            iconName = "check-square";
            ariaState = "true";
          } else if (state === false) {
            iconName = "square";
            ariaState = "false";
          } else {
            iconName = "minus-square";
            ariaState = "mixed";
          }
          (0, import_obsidian5.setIcon)(returnComponent, iconName);
          returnComponent.setAttribute("aria-checked", ariaState);
          returnComponent.dataset.state = String(state);
        };
        updateCheckboxVisual(currentValue);
        returnComponent.addEventListener("click", async () => {
          let currentState = returnComponent.dataset.state;
          let nextState;
          if (currentState === "false") {
            nextState = true;
          } else if (currentState === "true") {
            nextState = void 0;
          } else {
            nextState = false;
          }
          this.plugin.settings[this.settingsParameter][index].value = nextState;
          await this.plugin.saveSettings();
          updateCheckboxVisual(nextState);
        });
        break;
      case "date":
        returnComponent = new import_obsidian5.TextComponent(containerEl).setPlaceholder("YYYY-MM-DD").setValue(currentValue || "").onChange(async (value) => {
          this.plugin.settings[this.settingsParameter][index].value = value || void 0;
          await this.plugin.saveSettings();
        });
        returnComponent.inputEl.type = "date";
        break;
      case "datetime":
        returnComponent = new import_obsidian5.TextComponent(containerEl).setPlaceholder("YYYY-MM-DDTHH:mm").setValue(currentValue || "").onChange(async (value) => {
          this.plugin.settings[this.settingsParameter][index].value = value || void 0;
          await this.plugin.saveSettings();
        });
        returnComponent.inputEl.type = "datetime-local";
        break;
      case "aliases":
      case "tags":
      case "multitext":
        returnComponent = new import_obsidian5.TextComponent(containerEl).setPlaceholder("values (divided by comma)").setValue(Array.isArray(currentValue) ? currentValue.join(", ") : currentValue || "").onChange(async (value) => {
          const arrayValue = value.split(",").map((s) => s.trim()).filter((s) => s);
          this.plugin.settings[this.settingsParameter][index].value = arrayValue.length > 0 ? arrayValue : void 0;
          await this.plugin.saveSettings();
        });
        break;
      case "text":
      default:
        returnComponent = new import_obsidian5.TextComponent(containerEl).setPlaceholder("value").setValue(currentValue || "").onChange(async (value) => {
          this.plugin.settings[this.settingsParameter][index].value = value || void 0;
          await this.plugin.saveSettings();
        });
        break;
    }
    if (type !== "checkbox") {
      returnComponent.inputEl.style.backgroundColor = "transparent";
      returnComponent.inputEl.style.width = "100%";
      returnComponent.inputEl.style.border = "none";
    }
    return returnComponent;
  }
  async updatePreview(activeFile, rule, componentEl) {
    if (activeFile) {
      let ruleResult;
      await this.app.fileManager.processFrontMatter(activeFile, (frontmatter) => {
        ruleResult = executeRule(this.app, this.plugin.settings, activeFile, "", rule, frontmatter);
      }, { "mtime": activeFile.stat.mtime });
      switch (typeof ruleResult) {
        case "object":
          if (Array.isArray(ruleResult))
            componentEl.value = ruleResult.toString();
          break;
        default:
          componentEl.value = ruleResult;
          break;
      }
    }
  }
  async display() {
    const containerEl = this.container;
    containerEl.empty();
    await this.fetchKnownProperties();
    this.propertiesListEl = containerEl.createDiv("properties-list");
    this.plugin.settings.rules.forEach((rule, index) => {
      this.renderPropertyRow(this.propertiesListEl, rule, index);
    });
    let activeFile = this.app.workspace.getActiveFile();
    this.updateFilterIndicator(activeFile, this.propertiesListEl);
    const addBtnContainer = containerEl.createDiv({ cls: "setting-item-control" });
    addBtnContainer.style.justifyContent = "right";
    new import_obsidian5.ButtonComponent(addBtnContainer).setButtonText("Eigenschaft hinzuf\xFCgen").setIcon("plus-circle").setCta().onClick(async () => {
      const defaultName = "";
      this.plugin.settings[this.settingsParameter].push(Object.assign({}, DEFAULT_RULE_DEFINITION, {
        id: (0, import_crypto.randomUUID)().toString()
      }));
      await this.plugin.saveSettings();
      this.display();
    }).buttonEl.className = "property-plus-button";
  }
  updateFilterIndicator(activeFile, propertiesListEl) {
    if (activeFile) {
      this.plugin.settings.rules.forEach((rule, index) => {
        const propertyRowEl = propertiesListEl.getElementsByClassName("property-setting-row")[index];
        const propertyLeftDiv = propertyRowEl.querySelector(".property-left-container");
        if (checkIfFileAllowed(activeFile, this.plugin.settings, rule)) {
          propertyLeftDiv == null ? void 0 : propertyLeftDiv.addClass("property-left-container-allowed");
        } else {
          propertyLeftDiv == null ? void 0 : propertyLeftDiv.removeClass("property-left-container-allowed");
        }
      });
    }
  }
};
function updatePropertyIcon(iconEl, type) {
  let iconName = "hash";
  switch (type) {
    case "text":
      iconName = "align-left";
      break;
    case "number":
      iconName = "binary";
      break;
    case "multitext":
      iconName = "list";
      break;
    case "date":
      iconName = "calendar";
      break;
    case "datetime":
      iconName = "clock";
      break;
    case "checkbox":
      iconName = "check-square";
      break;
    case "tags":
      iconName = "tags";
      break;
    case "aliases":
      iconName = "forward";
      break;
    default:
      iconName = "help-circle";
  }
  (0, import_obsidian5.setIcon)(iconEl, iconName);
}

// src/settings.ts
var FolderTagSettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.scriptingTools = new ScriptingTools(this.plugin.settings);
  }
  hide() {
    this.plugin.settings.liveRules = [];
    this.plugin.settings.rules.forEach((rule) => {
      let ruleFunction = getRuleFunctionById(rule.content);
      if (!ruleFunction)
        return;
      if (ruleFunction.inputProperty) {
        this.plugin.settings.liveRules.push(rule);
      }
    });
    this.plugin.saveSettings();
  }
  display() {
    this.knownProperties = getPropertiesFromMetadataManager(this.app);
    this.knownTypes = getTypesFromMetadataManager(this.app);
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: `Front matter automate V${versionString}` });
    new import_obsidian6.Setting(containerEl).setName("Include Files and Folders globally").setDesc(`Currently ${this.plugin.settings.include.selectedFolders.length} folders and ${this.plugin.settings.include.selectedFiles.length} files will be ${this.plugin.settings.include.mode}d.`).addButton((button) => {
      button.setIcon("folder-check").setButtonText("Include").setCta().onClick(() => {
        openDirectorySelectionModal(
          this.app,
          this.plugin.settings.include.selectedFolders || [],
          this.plugin.settings.include.selectedFiles || [],
          this.plugin.settings.include.mode || "include",
          this.plugin.settings.include.display || "folders",
          false,
          // include, include option hidden
          (result) => {
            if (!result)
              return;
            this.plugin.settings.include.selectedFolders = result.folders;
            this.plugin.settings.include.selectedFiles = result.files;
            this.plugin.settings.include.mode = result.mode;
            this.plugin.settings.include.display = result.display;
            this.plugin.saveSettings();
            this.display();
          }
        );
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Exclude Files and Folders globally").setDesc(`Currently ${this.plugin.settings.exclude.selectedFolders.length} folders and ${this.plugin.settings.exclude.selectedFiles.length} files will be ${this.plugin.settings.exclude.mode}d.`).addButton((button) => {
      button.setIcon("folder-x").setButtonText("Exclude").setCta().onClick(() => {
        openDirectorySelectionModal(
          this.app,
          this.plugin.settings.exclude.selectedFolders || [],
          this.plugin.settings.exclude.selectedFiles || [],
          this.plugin.settings.exclude.mode || "exclude",
          this.plugin.settings.exclude.display || "folders",
          false,
          // include, exclude option hidden
          (result) => {
            if (!result)
              return;
            this.plugin.settings.exclude.selectedFolders = result.folders;
            this.plugin.settings.exclude.selectedFiles = result.files;
            this.plugin.settings.exclude.mode = result.mode;
            this.plugin.settings.exclude.display = result.display;
            this.plugin.saveSettings();
            this.display();
          }
        );
      });
    });
    new import_obsidian6.Setting(containerEl).setName("Rules").setDesc("add rules to update selected parameters");
    this.rulesContainer = containerEl.createDiv("properties-list");
    const rulesTable = new RulesTable(this.app, this.plugin, this.rulesContainer, "rules");
    rulesTable.display();
  }
  addRule(divEl, ruleUUID = "") {
    if (ruleUUID === "") {
      ruleUUID = (0, import_crypto2.randomUUID)().toString();
      this.plugin.settings.rules.push(Object.assign({}, DEFAULT_RULE_DEFINITION, {
        id: ruleUUID
      }));
    }
    const rule = this.plugin.settings.rules.find((rule2) => rule2.id === ruleUUID);
    if (!rule)
      return;
    let propertyNameInput;
    let showFunctionButton;
    let propertyTypeDropdown;
    let propertyDevDropdown;
    let functionResultTextComponent;
    let functionTestButton;
    const rulesDiv = divEl.createDiv({ cls: "obsidian-f2t-ruleLine" });
    rulesDiv.setAttribute("id", ruleUUID);
    const ruleOptionsDiv = divEl.createDiv({ cls: "obsidian-f2t-ruleOptions" });
    ruleOptionsDiv.style.height = "350px;";
    ruleOptionsDiv.style.alignItems = "flex-end";
    function showJsFunctionButton(ruleId) {
      var _a;
      const showCodeButton = ((_a = getRuleFunctionById(ruleId)) == null ? void 0 : _a.source) !== "" || ruleId === "script";
      if (showCodeButton) {
        if (showFunctionButton)
          showFunctionButton.buttonEl.style.display = "block";
        if (propertyDevDropdown)
          propertyDevDropdown.selectEl.style.width = "360px";
      } else {
        if (showFunctionButton)
          showFunctionButton.buttonEl.style.display = "none";
        if (propertyDevDropdown)
          propertyDevDropdown.selectEl.style.width = "400px";
      }
    }
    const ruleSettings = new import_obsidian6.Setting(rulesDiv).addButton((button) => {
      button.buttonEl.setAttribute("style", "width:150px; justify-content: left; ");
      button.setButtonText(rule.property || "Select Parameter");
      button.onClick(() => {
        new SelectProperty(this.app, this.knownProperties, rule.typeProperty, (result) => {
          if (result.name !== "") {
            rule.typeProperty = result;
            rule.property = result.name;
            rule.type = result.type;
            if (this.knownProperties.filter((property) => property.name.toLowerCase().includes(rule.property.toLowerCase())).length === 0) {
            }
            ;
            button.setButtonText(result.name);
            this.plugin.saveSettings();
          }
          propertyTypeDropdown.setValue(result.type);
        }).open();
      });
    }).addDropdown((dropdown) => {
      propertyTypeDropdown = dropdown;
      dropdown.selectEl.setAttribute("style", "width:110px");
      dropdown.addOption("", "Select a type");
      dropdown.addOption("aliases", "Aliases");
      dropdown.addOption("checkbox", "Checkbox");
      dropdown.addOption("date", "Date");
      dropdown.addOption("datetime", "Date & Time");
      dropdown.addOption("multitext", "List");
      dropdown.addOption("number", "Number");
      dropdown.addOption("tags", "Tags");
      dropdown.addOption("text", "Text");
      if (rule.type)
        dropdown.setValue(rule.type);
      dropdown.onChange(async (value) => {
        if (value !== "") {
          rule.type = value;
          await this.plugin.saveSettings();
        }
      });
    }).addDropdown((dropdown) => {
      propertyDevDropdown = dropdown;
      dropdown.selectEl.setAttribute("style", "width:400px");
      dropdown.addOption("", "Select a content");
      for (let rule2 of ruleFunctions) {
        dropdown.addOption(rule2.id, rule2.description);
      }
      dropdown.addOption("script", "JavaScript script");
      dropdown.setValue(rule.content);
      dropdown.onChange(async (value) => {
        var _a, _b, _c;
        let jsCode = "";
        if (value !== "") {
          if (value !== "script") {
            let oldOriginalCode = ((_a = getRuleFunctionById(rule.content)) == null ? void 0 : _a.source) || ruleFunctions[0].source;
            if (rule.buildInCode !== "" && rule.buildInCode !== oldOriginalCode) {
              const shouldProceed = await new AlertModal(
                this.app,
                "Overwrite existing code?",
                "I sees like you have custom code for this rule! Should this be overwritten by default code for this parameter?",
                "Yes",
                "No"
              ).openAndGetValue();
              if (shouldProceed) {
                jsCode = rule.buildInCode = ((_b = getRuleFunctionById(value)) == null ? void 0 : _b.source) || ruleFunctions[0].source;
              } else {
                jsCode = rule.buildInCode;
              }
            } else {
              jsCode = rule.buildInCode = ((_c = getRuleFunctionById(value)) == null ? void 0 : _c.source) || ruleFunctions[0].source;
            }
          } else {
          }
          rule.content = value;
          showJsFunctionButton(rule.content);
          await this.plugin.saveSettings();
        }
      });
      ruleOptionsDiv.style.display = `${rule.content === "script" && rule.showContent ? "flex" : "none"}`;
    }).addButton(async (button) => {
      showFunctionButton = button;
      button.buttonEl.setAttribute("style", "width:30px");
      button.setIcon("square-function");
      button.setClass("obsidian-f2t-smallButton");
      button.setTooltip("show & edit code");
      button.onClick(async () => {
        rule.showContent = !rule.showContent;
        ruleOptionsDiv.style.display = `${rule.showContent ? "flex" : "none"}`;
      });
      showFunctionButton.buttonEl.style.display = "none";
    }).addButton(async (button) => {
      button.buttonEl.setAttribute("style", "width:30px");
      button.setIcon("square-minus");
      button.setClass("obsidian-f2t-smallButton");
      button.setTooltip("remove this rule");
      button.onClick(async () => {
        this.plugin.settings.rules.splice(this.plugin.settings.rules.findIndex((value) => value.id === ruleUUID));
        this.removeRule(rulesDiv);
        await this.plugin.saveSettings();
      });
    });
    showJsFunctionButton(rule.content);
    divEl.style.removeProperty("border-top");
  }
  removeRule(rulesDiv) {
    rulesDiv.remove();
  }
};

// main.ts
var FolderTagPlugin = class extends import_obsidian7.Plugin {
  //private oldFolderPaths = new Map<string, string | null>();
  async onload() {
    await this.loadSettings();
    this.tools = new ScriptingTools(this.settings);
    let noticeMessage = `Front Matter Automate ${versionString}
 loading ...`;
    const loadingNotice = new import_obsidian7.Notice(noticeMessage, 0);
    noticeMessage = noticeMessage + "\n register events ...";
    loadingNotice.setMessage(noticeMessage);
    this.registerEvent(
      this.app.vault.on("create", (file) => {
        if (file instanceof import_obsidian7.TFile && file.extension === "md") {
          this.updateFrontmatterParameters("create", file, this.settings.rules);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", (file, oldPath) => {
        if (file instanceof import_obsidian7.TFile && file.extension === "md") {
          this.updateFrontmatterParameters("rename", file, this.settings.rules, oldPath);
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", (leaf) => {
        if ((leaf == null ? void 0 : leaf.view) instanceof import_obsidian7.MarkdownView) {
          const activeFile = this.app.workspace.getActiveFile();
          console.log(`closing file: `, activeFile == null ? void 0 : activeFile.path);
          if (activeFile)
            this.updateFrontmatterParameters("active-leaf-change", activeFile, this.settings.rules);
        }
      })
    );
    this.registerEvent(
      this.app.metadataCache.on("changed", (file, data, cache) => {
        if (cache.frontmatter && Array.isArray(this.settings.liveRules)) {
          this.app.fileManager.processFrontMatter(file, (frontmatter) => {
            this.settings.liveRules.forEach((rule) => {
              if (rule.onlyModify && !frontmatter.hasOwnProperty(rule.property))
                return;
              if (cache.frontmatter)
                frontmatter[rule.property] = executeRule(this.app, this.settings, file, cache.frontmatter[rule.property], rule, cache.frontmatter);
              console.log(frontmatter[rule.property]);
            });
          }, { "mtime": file.stat.mtime });
        }
        ;
      })
    );
    noticeMessage = noticeMessage + "\n initial processing ...";
    loadingNotice.setMessage(noticeMessage);
    noticeMessage = noticeMessage + "\ndone!";
    loadingNotice.setMessage(noticeMessage);
    setTimeout(() => {
      loadingNotice.hide();
    }, 2e3);
    this.addSettingTab(new FolderTagSettingTab(this.app, this));
  }
  async loadSettings() {
    let data = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  formatTagName(name) {
    if (name === null)
      return null;
    if (name === void 0)
      return void 0;
    let formatted = name.replace(/\s+/g, this.settings.spaceReplacement);
    formatted = formatted.replace(/[^a-zA-Z0-9\-_\/äöüßÄÖÜáéíóúýÁÉÍÓÚÝàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛãñõÃÑÕ]/g, this.settings.specialCharReplacement);
    if (this.settings.lowercaseTags) {
      formatted = formatted.toLowerCase();
    }
    return formatted;
  }
  formatValue(value, type) {
    switch (type) {
      case "text":
      case "tags":
      case "aliases":
      case "multitext":
        return this.tools.toYamlSafeString(value);
      case "date":
      case "datetime":
        if (typeof value === "number") {
          return new Date(value).toISOString();
        }
        return value.toString();
      case "checkbox":
        return value ? "true" : "false";
      case "number":
        return Number(value);
      default:
        return this.tools.toYamlSafeString(value);
    }
  }
  async updateFrontmatterParameters(eventName, file, rules, oldPath) {
    if (!checkIfFileAllowed(file, this.settings)) {
      console.log(`file ${file.path} globally rejected!`);
      return;
    }
    const currentPathTag = this.formatTagName(this.tools.getFoldersFromPath(file.path));
    const oldPathTag = this.formatTagName(this.tools.getFoldersFromPath(oldPath));
    if (oldPathTag)
      console.log(`update file: "${oldPathTag}" to "${currentPathTag}"`);
    let content = await this.app.vault.read(file);
    this.app.fileManager.processFrontMatter(file, (frontmatter) => {
      rules.forEach((rule) => {
        if (!checkIfFileAllowed(file, this.settings, rule))
          return;
        if (rule.onlyModify && !frontmatter.hasOwnProperty(rule.property))
          return;
        frontmatter[rule.property] = executeRule(this.app, this.settings, file, frontmatter[rule.property], rule, frontmatter, oldPath);
      });
    }, { "mtime": file.stat.mtime });
  }
  async removeFrontmatterParamsFromAllFiles(rule) {
    let count = { files: 0, items: 0 };
    this.app.vault.getMarkdownFiles().forEach((file) => {
      count.files++;
      this.removeFrontmatterParameter(file, rule, count);
    });
    return count;
  }
  async removeFrontmatterParameter(file, rule, count) {
    if (!checkIfFileAllowed(file, this.settings, rule))
      return;
    const currentPathTag = this.formatTagName(this.tools.getFoldersFromPath(file.path));
    let content = await this.app.vault.read(file);
    this.app.fileManager.processFrontMatter(file, (frontmatter) => {
      if (Array.isArray(frontmatter[rule.property]))
        count.items += frontmatter[rule.property].length;
      frontmatter[rule.property] = removeRule(this.app, this.settings, file, frontmatter[rule.property], rule, frontmatter);
      if (Array.isArray(frontmatter[rule.property]))
        count.items -= frontmatter[rule.property].length;
    }, { "mtime": file.stat.mtime });
    return count;
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvc2V0dGluZ3MudHMiLCAic3JjL2Zyb250bWF0dGVyLXRvb2xzLnRzIiwgInNyYy90b29scy50cyIsICJzcmMvcnVsZXMudHMiLCAic3JjL3R5cGVzLnRzIiwgInNyYy9hbGVydEJveC50cyIsICJzcmMvZGlyZWN0b3J5U2VsZWN0aW9uTW9kYWwudHMiLCAic3JjL3NldHRpbmdzLXByb3BlcnRpZXMudHMiLCAic3JjL2VkaXRvck1vZGFsLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBBcHAsIEVkaXRvciwgUGx1Z2luLCBNYXJrZG93blZpZXcsIE1hcmtkb3duUG9zdFByb2Nlc3NvciwgUGx1Z2luTWFuaWZlc3QsIFRGaWxlLCBURm9sZGVyLCBWYXVsdCwgcGFyc2VGcm9udE1hdHRlclRhZ3MsIE5vdGljZX0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgRm9sZGVyVGFnU2V0dGluZ1RhYiB9IGZyb20gJy4vc3JjL3NldHRpbmdzJztcbi8vaW1wb3J0IHsgRm9sZGVyVGFnU2V0dGluZ1RhYiB9IGZyb20gJy4vc3JjL3NldHRpbmdzLXByb3BlcnRpZXMnO1xuaW1wb3J0IHsgY2hlY2tJZkZpbGVBbGxvd2VkLCBleGVjdXRlUnVsZSwgcmVtb3ZlUnVsZSwgcnVsZUZ1bmN0aW9ucyB9IGZyb20gJy4vc3JjL3J1bGVzJztcbmltcG9ydCB7IHBhcnNlSlNDb2RlLCBTY3JpcHRpbmdUb29scyB9IGZyb20gJy4vc3JjL3Rvb2xzJztcbmltcG9ydCB7IHZlcnNpb25TdHJpbmcsIEZvbGRlclRhZ1NldHRpbmdzLCBERUZBVUxUX1NFVFRJTkdTLCBGb2xkZXJUYWdSdWxlRGVmaW5pdGlvbiwgUHJvcGVydHlUeXBlSW5mb30gZnJvbSAnLi9zcmMvdHlwZXMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvbGRlclRhZ1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2V0dGluZ3M6IEZvbGRlclRhZ1NldHRpbmdzO1xuICAgIHByaXZhdGUgdG9vbHM6IFNjcmlwdGluZ1Rvb2xzO1xuICAgIC8vcHJpdmF0ZSBvbGRGb2xkZXJQYXRocyA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmcgfCBudWxsPigpO1xuXG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuICAgICAgICB0aGlzLnRvb2xzID0gbmV3IFNjcmlwdGluZ1Rvb2xzKHRoaXMuc2V0dGluZ3MpO1xuICAgICAgICBsZXQgbm90aWNlTWVzc2FnZSA9IGBGcm9udCBNYXR0ZXIgQXV0b21hdGUgJHt2ZXJzaW9uU3RyaW5nfVxcbiBsb2FkaW5nIC4uLmA7XG4gICAgICAgIGNvbnN0IGxvYWRpbmdOb3RpY2UgPSBuZXcgTm90aWNlKG5vdGljZU1lc3NhZ2UsMClcblxuICAgICAgICBub3RpY2VNZXNzYWdlID0gbm90aWNlTWVzc2FnZSArICdcXG4gcmVnaXN0ZXIgZXZlbnRzIC4uLic7XG4gICAgICAgIGxvYWRpbmdOb3RpY2Uuc2V0TWVzc2FnZShub3RpY2VNZXNzYWdlKTtcbiAgICAgICAgLy8gRmlsZSBjcmVhdGlvbiBoYW5kbGVyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMuYXBwLnZhdWx0Lm9uKCdjcmVhdGUnLCAoZmlsZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT09ICdtZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVGcm9udG1hdHRlclBhcmFtZXRlcnMoJ2NyZWF0ZScsIGZpbGUsIHRoaXMuc2V0dGluZ3MucnVsZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gRmlsZSByZW5hbWUvbW92ZSBoYW5kbGVyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMuYXBwLnZhdWx0Lm9uKCdyZW5hbWUnLCAoZmlsZSwgb2xkUGF0aCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZS5leHRlbnNpb24gPT09ICdtZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVGcm9udG1hdHRlclBhcmFtZXRlcnMoJ3JlbmFtZScsIGZpbGUsIHRoaXMuc2V0dGluZ3MucnVsZXMsIG9sZFBhdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gRmlsZSBjbG9zZSBoYW5kbGVyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5vbignYWN0aXZlLWxlYWYtY2hhbmdlJywgKGxlYWYpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobGVhZj8udmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYGNsb3NpbmcgZmlsZTogYCwgYWN0aXZlRmlsZT8ucGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVGaWxlKSB0aGlzLnVwZGF0ZUZyb250bWF0dGVyUGFyYW1ldGVycygnYWN0aXZlLWxlYWYtY2hhbmdlJywgYWN0aXZlRmlsZSwgdGhpcy5zZXR0aW5ncy5ydWxlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBNZXRhZGF0YSBjaGFuZ2VkIGhhbmRsZXJcbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgICAgICAgdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5vbignY2hhbmdlZCcsIChmaWxlLCBkYXRhLCBjYWNoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjYWNoZS5mcm9udG1hdHRlciAmJiBBcnJheS5pc0FycmF5KHRoaXMuc2V0dGluZ3MubGl2ZVJ1bGVzKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5maWxlTWFuYWdlci5wcm9jZXNzRnJvbnRNYXR0ZXIoZmlsZSwgKGZyb250bWF0dGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFwcGx5IGFsbCBsaXZlIHJ1bGVzIHRvIGZyb250bWF0dGVyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MubGl2ZVJ1bGVzLmZvckVhY2gocnVsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocnVsZS5vbmx5TW9kaWZ5ICYmICFmcm9udG1hdHRlci5oYXNPd25Qcm9wZXJ0eShydWxlLnByb3BlcnR5KSkgcmV0dXJuOyAvLyBvbmx5IG1vZGlmeSBpZiBwcm9wZXJ0eSBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZS5mcm9udG1hdHRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9udG1hdHRlcltydWxlLnByb3BlcnR5XSA9IGV4ZWN1dGVSdWxlKHRoaXMuYXBwLCB0aGlzLnNldHRpbmdzLCBmaWxlLCBjYWNoZS5mcm9udG1hdHRlcltydWxlLnByb3BlcnR5XSwgcnVsZSwgY2FjaGUuZnJvbnRtYXR0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZyb250bWF0dGVyW3J1bGUucHJvcGVydHldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICB9LHsnbXRpbWUnOmZpbGUuc3RhdC5tdGltZX0pOyAvLyBkbyBub3QgY2hhbmdlIHRoZSBtb2RpZnkgdGltZS5cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgICAgIFxuICAgICAgICBub3RpY2VNZXNzYWdlID0gbm90aWNlTWVzc2FnZSArICdcXG4gaW5pdGlhbCBwcm9jZXNzaW5nIC4uLic7XG4gICAgICAgIGxvYWRpbmdOb3RpY2Uuc2V0TWVzc2FnZShub3RpY2VNZXNzYWdlKTtcblxuICAgICAgICBub3RpY2VNZXNzYWdlID0gbm90aWNlTWVzc2FnZSArICdcXG5kb25lISc7XG4gICAgICAgIGxvYWRpbmdOb3RpY2Uuc2V0TWVzc2FnZShub3RpY2VNZXNzYWdlKTtcbiAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgbG9hZGluZ05vdGljZS5oaWRlKCk7XG4gICAgICAgIH0sMjAwMClcblxuICAgICAgICAvLyBBZGQgc2V0dGluZ3MgdGFiXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgRm9sZGVyVGFnU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICAgICAgbGV0IGRhdGEgPSBhd2FpdCB0aGlzLmxvYWREYXRhKCk7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBkYXRhKTtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZm9ybWF0VGFnTmFtZShuYW1lOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkKTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZHtcbiAgICAgICAgaWYgKG5hbWUgPT09IG51bGwpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBcbiAgICAgICAgLy8gRmlyc3QgcmVwbGFjZSBzcGFjZXMgYWNjb3JkaW5nIHRvIHNldHRpbmdzXG4gICAgICAgIGxldCBmb3JtYXR0ZWQgPSBuYW1lLnJlcGxhY2UoL1xccysvZywgdGhpcy5zZXR0aW5ncy5zcGFjZVJlcGxhY2VtZW50KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRoZW4gcmVwbGFjZSBzcGVjaWFsIGNoYXJhY3RlcnMgKHByZXNlcnZpbmcgbGV0dGVycyB3aXRoIGRpYWNyaXRpY3MpXG4gICAgICAgIGZvcm1hdHRlZCA9IGZvcm1hdHRlZC5yZXBsYWNlKC9bXmEtekEtWjAtOVxcLV9cXC9cdTAwRTRcdTAwRjZcdTAwRkNcdTAwREZcdTAwQzRcdTAwRDZcdTAwRENcdTAwRTFcdTAwRTlcdTAwRURcdTAwRjNcdTAwRkFcdTAwRkRcdTAwQzFcdTAwQzlcdTAwQ0RcdTAwRDNcdTAwREFcdTAwRERcdTAwRTBcdTAwRThcdTAwRUNcdTAwRjJcdTAwRjlcdTAwQzBcdTAwQzhcdTAwQ0NcdTAwRDJcdTAwRDlcdTAwRTJcdTAwRUFcdTAwRUVcdTAwRjRcdTAwRkJcdTAwQzJcdTAwQ0FcdTAwQ0VcdTAwRDRcdTAwREJcdTAwRTNcdTAwRjFcdTAwRjVcdTAwQzNcdTAwRDFcdTAwRDVdL2csIHRoaXMuc2V0dGluZ3Muc3BlY2lhbENoYXJSZXBsYWNlbWVudCk7XG4gICAgICAgIFxuICAgICAgICAvLyBDb252ZXJ0IHRvIGxvd2VyY2FzZSBpZiBjb25maWd1cmVkXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmxvd2VyY2FzZVRhZ3MpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZCA9IGZvcm1hdHRlZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkO1xuICAgIH1cblxuICAgIGZvcm1hdFZhbHVlKHZhbHVlOmFueSwgdHlwZTpzdHJpbmcpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgICAgIGNhc2UgJ3RhZ3MnOlxuICAgICAgICAgICAgY2FzZSAnYWxpYXNlcyc6XG4gICAgICAgICAgICBjYXNlICdtdWx0aXRleHQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvb2xzLnRvWWFtbFNhZmVTdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICBjYXNlICdkYXRldGltZSc6XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlKS50b0lTT1N0cmluZygpXG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPyAndHJ1ZScgOiAnZmFsc2UnO1xuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9vbHMudG9ZYW1sU2FmZVN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVGcm9udG1hdHRlclBhcmFtZXRlcnMoZXZlbnROYW1lOiAnY3JlYXRlJyB8ICdyZW5hbWUnIHwgJ2FjdGl2ZS1sZWFmLWNoYW5nZScsIGZpbGU6IFRGaWxlLCBydWxlczogRm9sZGVyVGFnUnVsZURlZmluaXRpb25bXSwgb2xkUGF0aD86IHN0cmluZykge1xuICAgICAgICBpZiAoIWNoZWNrSWZGaWxlQWxsb3dlZChmaWxlLCB0aGlzLnNldHRpbmdzKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYGZpbGUgJHtmaWxlLnBhdGh9IGdsb2JhbGx5IHJlamVjdGVkIWApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudFBhdGhUYWcgPSB0aGlzLmZvcm1hdFRhZ05hbWUodGhpcy50b29scy5nZXRGb2xkZXJzRnJvbVBhdGgoZmlsZS5wYXRoKSk7XG4gICAgICAgIGNvbnN0IG9sZFBhdGhUYWcgPSB0aGlzLmZvcm1hdFRhZ05hbWUodGhpcy50b29scy5nZXRGb2xkZXJzRnJvbVBhdGgob2xkUGF0aCkpXG4gICAgICAgIGlmIChvbGRQYXRoVGFnKSBjb25zb2xlLmxvZyhgdXBkYXRlIGZpbGU6IFwiJHtvbGRQYXRoVGFnfVwiIHRvIFwiJHtjdXJyZW50UGF0aFRhZ31cImApO1xuICAgICAgICBsZXQgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICAgIC8vIGNvbnN0IGNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG5cbiAgICAgICAgdGhpcy5hcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKGZpbGUsIChmcm9udG1hdHRlcikgPT4ge1xuICAgICAgICAgICAvLyBhcHBseSBhbGwgcnVsZXMgdG8gZnJvbnRtYXR0ZXJcbiAgICAgICAgICAgIHJ1bGVzLmZvckVhY2gocnVsZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFjaGVja0lmRmlsZUFsbG93ZWQoZmlsZSwgdGhpcy5zZXR0aW5ncywgcnVsZSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAocnVsZS5vbmx5TW9kaWZ5ICYmICFmcm9udG1hdHRlci5oYXNPd25Qcm9wZXJ0eShydWxlLnByb3BlcnR5KSkgcmV0dXJuOyAvLyBvbmx5IG1vZGlmeSBpZiBwcm9wZXJ0eSBleGlzdHNcbiAgICAgICAgICAgICAgICBmcm9udG1hdHRlcltydWxlLnByb3BlcnR5XSA9IGV4ZWN1dGVSdWxlKHRoaXMuYXBwLCB0aGlzLnNldHRpbmdzLCBmaWxlLCBmcm9udG1hdHRlcltydWxlLnByb3BlcnR5XSwgcnVsZSwgZnJvbnRtYXR0ZXIsIG9sZFBhdGgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSx7J210aW1lJzpmaWxlLnN0YXQubXRpbWV9KTsgLy8gZG8gbm90IGNoYW5nZSB0aGUgbW9kaWZ5IHRpbWUuXG4gICAgfVxuICAgIFxuICAgIGFzeW5jIHJlbW92ZUZyb250bWF0dGVyUGFyYW1zRnJvbUFsbEZpbGVzKHJ1bGU6IEZvbGRlclRhZ1J1bGVEZWZpbml0aW9uKXtcbiAgICAgICAgbGV0IGNvdW50ID0ge2ZpbGVzOjAsIGl0ZW1zOiAwfVxuICAgICAgICB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCkuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgICAgICAgIGNvdW50LmZpbGVzKys7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUZyb250bWF0dGVyUGFyYW1ldGVyKGZpbGUsIHJ1bGUsIGNvdW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICB9XG5cbiAgICBhc3luYyByZW1vdmVGcm9udG1hdHRlclBhcmFtZXRlcihmaWxlOiBURmlsZSwgcnVsZTogRm9sZGVyVGFnUnVsZURlZmluaXRpb24sIGNvdW50KSB7XG4gICAgICAgIGlmICghY2hlY2tJZkZpbGVBbGxvd2VkKGZpbGUsIHRoaXMuc2V0dGluZ3MsIHJ1bGUpKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQYXRoVGFnID0gdGhpcy5mb3JtYXRUYWdOYW1lKHRoaXMudG9vbHMuZ2V0Rm9sZGVyc0Zyb21QYXRoKGZpbGUucGF0aCkpO1xuICAgICAgICBsZXQgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICAgIHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCAoZnJvbnRtYXR0ZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZyb250bWF0dGVyW3J1bGUucHJvcGVydHldKSkgY291bnQuaXRlbXMgKz0gZnJvbnRtYXR0ZXJbcnVsZS5wcm9wZXJ0eV0ubGVuZ3RoO1xuICAgICAgICAgICAgZnJvbnRtYXR0ZXJbcnVsZS5wcm9wZXJ0eV0gPSByZW1vdmVSdWxlKHRoaXMuYXBwLCB0aGlzLnNldHRpbmdzLCBmaWxlLCBmcm9udG1hdHRlcltydWxlLnByb3BlcnR5XSwgcnVsZSwgZnJvbnRtYXR0ZXIpO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZnJvbnRtYXR0ZXJbcnVsZS5wcm9wZXJ0eV0pKSBjb3VudC5pdGVtcyAtPSBmcm9udG1hdHRlcltydWxlLnByb3BlcnR5XS5sZW5ndGg7XG4gICAgICAgIH0seydtdGltZSc6ZmlsZS5zdGF0Lm10aW1lfSk7IC8vIGRvIG5vdCBjaGFuZ2UgdGhlIG1vZGlmeSB0aW1lLlxuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxufVxuIiwgImltcG9ydCB7IEFwcCwgQnV0dG9uQ29tcG9uZW50LCBEcm9wZG93bkNvbXBvbmVudCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgVGV4dENvbXBvbmVudCB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0ICogYXMgZm1Ub29scyBmcm9tICcuL2Zyb250bWF0dGVyLXRvb2xzJztcclxuaW1wb3J0IHsgcGFyc2VKU0NvZGUsIFNjcmlwdGluZ1Rvb2xzIH0gZnJvbSAnLi90b29scyc7XHJcbmltcG9ydCB7IGdldFJ1bGVGdW5jdGlvbkJ5SWQsIHJ1bGVGdW5jdGlvbnMsIFJ1bGVGdW5jdGlvbiB9IGZyb20gJy4vcnVsZXMnO1xyXG5pbXBvcnQgeyB2ZXJzaW9uU3RyaW5nLCBGb2xkZXJUYWdSdWxlRGVmaW5pdGlvbiwgREVGQVVMVF9SVUxFX0RFRklOSVRJT04sIFByb3BlcnR5VHlwZUluZm8sIE9ic2lkaWFuUHJvcGVydHlUeXBlc30gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IEFsZXJ0TW9kYWwgfSBmcm9tICcuL2FsZXJ0Qm94JztcclxuaW1wb3J0IHsgb3BlbkRpcmVjdG9yeVNlbGVjdGlvbk1vZGFsLCBEaXJlY3RvcnlTZWxlY3Rpb25SZXN1bHQgfSBmcm9tICcuL2RpcmVjdG9yeVNlbGVjdGlvbk1vZGFsJztcclxuaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gJ2NyeXB0byc7XHJcbmltcG9ydCB7IFJ1bGVzVGFibGUgfSBmcm9tICcuL3NldHRpbmdzLXByb3BlcnRpZXMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZvbGRlclRhZ1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuICAgIHBsdWdpbjogYW55OyAvL0ZvbGRlclRhZ1BsdWdpbjtcclxuICAgIHJ1bGVzRGl2OiBIVE1MRGl2RWxlbWVudDtcclxuICAgIHJ1bGVzQ29udGFpbmVyOiBIVE1MRGl2RWxlbWVudDtcclxuICAgIHJ1bGVzQ29udHJvbDogSFRNTERpdkVsZW1lbnQ7XHJcbiAgICBrbm93blByb3BlcnRpZXM6IFByb3BlcnR5VHlwZUluZm9bXTtcclxuICAgIGtub3duVHlwZXM6IGFueTtcclxuICAgIHNjcmlwdGluZ1Rvb2xzOiBTY3JpcHRpbmdUb29scztcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogYW55IC8qRm9sZGVyVGFnUGx1Z2luKi8pIHtcclxuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgICAgICAgdGhpcy5zY3JpcHRpbmdUb29scyA9IG5ldyBTY3JpcHRpbmdUb29scyh0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XHJcbiAgICB9XHJcbiAgICBoaWRlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmxpdmVSdWxlcz1bXTtcclxuICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5ydWxlcy5mb3JFYWNoKHJ1bGUgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcnVsZUZ1bmN0aW9uID0gZ2V0UnVsZUZ1bmN0aW9uQnlJZChydWxlLmNvbnRlbnQpO1xyXG4gICAgICAgICAgICBpZiAoIXJ1bGVGdW5jdGlvbikgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAocnVsZUZ1bmN0aW9uLmlucHV0UHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmxpdmVSdWxlcy5wdXNoKHJ1bGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgIH1cclxuICAgIGRpc3BsYXkoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5rbm93blByb3BlcnRpZXMgPSBmbVRvb2xzLmdldFByb3BlcnRpZXNGcm9tTWV0YWRhdGFNYW5hZ2VyKHRoaXMuYXBwKTtcclxuICAgICAgICB0aGlzLmtub3duVHlwZXMgPSBmbVRvb2xzLmdldFR5cGVzRnJvbU1ldGFkYXRhTWFuYWdlcih0aGlzLmFwcCk7XHJcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcclxuXHJcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6IGBGcm9udCBtYXR0ZXIgYXV0b21hdGUgViR7dmVyc2lvblN0cmluZ31gIH0pO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZSgnSW5jbHVkZSBGaWxlcyBhbmQgRm9sZGVycyBnbG9iYWxseScpXHJcbiAgICAgICAgLnNldERlc2MoYEN1cnJlbnRseSAke3RoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGUuc2VsZWN0ZWRGb2xkZXJzLmxlbmd0aH0gZm9sZGVycyBhbmQgJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlLnNlbGVjdGVkRmlsZXMubGVuZ3RofSBmaWxlcyB3aWxsIGJlICR7dGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5jbHVkZS5tb2RlfWQuYClcclxuICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgICAgIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgLnNldEljb24oJ2ZvbGRlci1jaGVjaycpXHJcbiAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnSW5jbHVkZScpXHJcbiAgICAgICAgICAgICAgICAuc2V0Q3RhKCkgLy8gTWFrZXMgdGhlIGJ1dHRvbiBtb3JlIHByb21pbmVudFxyXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5EaXJlY3RvcnlTZWxlY3Rpb25Nb2RhbChcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGUuc2VsZWN0ZWRGb2xkZXJzIHx8IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlLnNlbGVjdGVkRmlsZXMgfHwgW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGUubW9kZSB8fCAnaW5jbHVkZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGUuZGlzcGxheSB8fCAnZm9sZGVycycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlLCAvLyBpbmNsdWRlLCBpbmNsdWRlIG9wdGlvbiBoaWRkZW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKHJlc3VsdDogRGlyZWN0b3J5U2VsZWN0aW9uUmVzdWx0IHwgbnVsbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGUuc2VsZWN0ZWRGb2xkZXJzID0gcmVzdWx0LmZvbGRlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlLnNlbGVjdGVkRmlsZXMgPSByZXN1bHQuZmlsZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlLm1vZGUgPSByZXN1bHQubW9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGUuZGlzcGxheSA9IHJlc3VsdC5kaXNwbGF5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7ICAgIFxyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZSgnRXhjbHVkZSBGaWxlcyBhbmQgRm9sZGVycyBnbG9iYWxseScpXHJcbiAgICAgICAgLnNldERlc2MoYEN1cnJlbnRseSAke3RoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGUuc2VsZWN0ZWRGb2xkZXJzLmxlbmd0aH0gZm9sZGVycyBhbmQgJHt0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlLnNlbGVjdGVkRmlsZXMubGVuZ3RofSBmaWxlcyB3aWxsIGJlICR7dGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZS5tb2RlfWQuYClcclxuICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgICAgIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgLnNldEljb24oJ2ZvbGRlci14JylcclxuICAgICAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KCdFeGNsdWRlJylcclxuICAgICAgICAgICAgICAgIC5zZXRDdGEoKSAvLyBNYWtlcyB0aGUgYnV0dG9uIG1vcmUgcHJvbWluZW50XHJcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlbkRpcmVjdG9yeVNlbGVjdGlvbk1vZGFsKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZS5zZWxlY3RlZEZvbGRlcnMgfHwgW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGUuc2VsZWN0ZWRGaWxlcyB8fCBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZS5tb2RlIHx8ICdleGNsdWRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZS5kaXNwbGF5IHx8ICdmb2xkZXJzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsIC8vIGluY2x1ZGUsIGV4Y2x1ZGUgb3B0aW9uIGhpZGRlblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocmVzdWx0OiBEaXJlY3RvcnlTZWxlY3Rpb25SZXN1bHQgfCBudWxsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZS5zZWxlY3RlZEZvbGRlcnMgPSByZXN1bHQuZm9sZGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGUuc2VsZWN0ZWRGaWxlcyA9IHJlc3VsdC5maWxlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmV4Y2x1ZGUubW9kZSA9IHJlc3VsdC5tb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhjbHVkZS5kaXNwbGF5ID0gcmVzdWx0LmRpc3BsYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgICAgICAgICAgXHJcbiAgXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgLnNldE5hbWUoJ1J1bGVzJylcclxuICAgICAgICAuc2V0RGVzYygnYWRkIHJ1bGVzIHRvIHVwZGF0ZSBzZWxlY3RlZCBwYXJhbWV0ZXJzJyk7XHJcblxyXG4gICAgICAgIHRoaXMucnVsZXNDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoJ3Byb3BlcnRpZXMtbGlzdCcpO1xyXG4gICAgICAgIGNvbnN0IHJ1bGVzVGFibGUgPSBuZXcgUnVsZXNUYWJsZSh0aGlzLmFwcCwgdGhpcy5wbHVnaW4sdGhpcy5ydWxlc0NvbnRhaW5lciwncnVsZXMnKTtcclxuICAgICAgICBydWxlc1RhYmxlLmRpc3BsYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRSdWxlKGRpdkVsOiBIVE1MRGl2RWxlbWVudCwgcnVsZVVVSUQgPSAnJykge1xyXG4gICAgICAgIGlmIChydWxlVVVJRCA9PT0gJycpe1xyXG4gICAgICAgICAgICBydWxlVVVJRCA9IHJhbmRvbVVVSUQoKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5ydWxlcy5wdXNoKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfUlVMRV9ERUZJTklUSU9OLCB7XHJcbiAgICAgICAgICAgICAgICBpZDogcnVsZVVVSUQsXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcnVsZTpGb2xkZXJUYWdSdWxlRGVmaW5pdGlvbiA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnJ1bGVzLmZpbmQocnVsZSA9PiBydWxlLmlkID09PSBydWxlVVVJRCk7XHJcbiAgICAgICAgaWYoIXJ1bGUpIHJldHVybjtcclxuICAgICAgICBsZXQgcHJvcGVydHlOYW1lSW5wdXQgOiBUZXh0Q29tcG9uZW50O1xyXG4gICAgICAgIGxldCBzaG93RnVuY3Rpb25CdXR0b24gOiBCdXR0b25Db21wb25lbnQgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IHByb3BlcnR5VHlwZURyb3Bkb3duIDogRHJvcGRvd25Db21wb25lbnQ7XHJcbiAgICAgICAgbGV0IHByb3BlcnR5RGV2RHJvcGRvd24gOiBEcm9wZG93bkNvbXBvbmVudCB8IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgZnVuY3Rpb25SZXN1bHRUZXh0Q29tcG9uZW50OiBUZXh0Q29tcG9uZW50IHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCBmdW5jdGlvblRlc3RCdXR0b246IEJ1dHRvbkNvbXBvbmVudCB8IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBydWxlc0RpdiA9IGRpdkVsLmNyZWF0ZURpdih7IGNsczogXCJvYnNpZGlhbi1mMnQtcnVsZUxpbmVcIiB9KTtcclxuICAgICAgICBydWxlc0Rpdi5zZXRBdHRyaWJ1dGUoJ2lkJyxydWxlVVVJRClcclxuICAgICAgICBjb25zdCBydWxlT3B0aW9uc0RpdiA9IGRpdkVsLmNyZWF0ZURpdih7IGNsczogXCJvYnNpZGlhbi1mMnQtcnVsZU9wdGlvbnNcIiB9KTtcclxuICAgICAgICAvL3J1bGVPcHRpb25zRGl2LnN0eWxlLmRpc3BsYXk9ICdub25lJztcclxuICAgICAgICAvL3J1bGVPcHRpb25zRGl2LnN0eWxlLndpZHRoPSAnNzAwcHgnXHJcbiAgICAgICAgcnVsZU9wdGlvbnNEaXYuc3R5bGUuaGVpZ2h0PSAnMzUwcHg7JztcclxuICAgICAgICBydWxlT3B0aW9uc0Rpdi5zdHlsZS5hbGlnbkl0ZW1zPSAnZmxleC1lbmQnO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzaG93SnNGdW5jdGlvbkJ1dHRvbihydWxlSWQ6c3RyaW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNob3dDb2RlQnV0dG9uOmJvb2xlYW4gPSBcclxuICAgICAgICAgICAgICAgIChnZXRSdWxlRnVuY3Rpb25CeUlkKHJ1bGVJZCk/LnNvdXJjZSAhPT0gJycpIHx8XHJcbiAgICAgICAgICAgICAgICAocnVsZUlkID09PSAnc2NyaXB0Jyk7XHJcbiAgICAgICAgICAgIGlmICggc2hvd0NvZGVCdXR0b24gKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hvd0Z1bmN0aW9uQnV0dG9uKSBzaG93RnVuY3Rpb25CdXR0b24uYnV0dG9uRWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eURldkRyb3Bkb3duKSBwcm9wZXJ0eURldkRyb3Bkb3duLnNlbGVjdEVsLnN0eWxlLndpZHRoID0gXCIzNjBweFwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNob3dGdW5jdGlvbkJ1dHRvbikgc2hvd0Z1bmN0aW9uQnV0dG9uLmJ1dHRvbkVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eURldkRyb3Bkb3duKSBwcm9wZXJ0eURldkRyb3Bkb3duLnNlbGVjdEVsLnN0eWxlLndpZHRoID0gXCI0MDBweFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBydWxlU2V0dGluZ3MgPSBuZXcgU2V0dGluZyhydWxlc0RpdilcclxuICAgICAgICAgICAgLmFkZEJ1dHRvbihidXR0b24gPT4ge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmJ1dHRvbkVsLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCd3aWR0aDoxNTBweDsganVzdGlmeS1jb250ZW50OiBsZWZ0OyAnKTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRCdXR0b25UZXh0KHJ1bGUucHJvcGVydHkgfHwgJ1NlbGVjdCBQYXJhbWV0ZXInKVxyXG4gICAgICAgICAgICAgICAgYnV0dG9uLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBmbVRvb2xzLlNlbGVjdFByb3BlcnR5KHRoaXMuYXBwLCB0aGlzLmtub3duUHJvcGVydGllcywgcnVsZS50eXBlUHJvcGVydHksIChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5uYW1lICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS50eXBlUHJvcGVydHkgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLnByb3BlcnR5ID0gcmVzdWx0Lm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLnR5cGUgPSByZXN1bHQudHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmtub3duUHJvcGVydGllcy5maWx0ZXIoKHByb3BlcnR5KSA9PiBwcm9wZXJ0eS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocnVsZS5wcm9wZXJ0eS50b0xvd2VyQ2FzZSgpKSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wcm9wZXJ0eVR5cGVEcm9wZG93bi5zZXREaXNhYmxlZChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnNldEJ1dHRvblRleHQocmVzdWx0Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlUeXBlRHJvcGRvd24uc2V0VmFsdWUocmVzdWx0LnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMuZGlzcGxheSgpOyAvLyBSZWZyZXNoIHRoZSBzZXR0aW5ncyB0YWIgdG8gc2hvdyBuZXcgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICB9KS5vcGVuKCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eVR5cGVEcm9wZG93biA9IGRyb3Bkb3duO1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uc2VsZWN0RWwuc2V0QXR0cmlidXRlKCdzdHlsZScsJ3dpZHRoOjExMHB4Jyk7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24oXCJcIiwgXCJTZWxlY3QgYSB0eXBlXCIpO1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKFwiYWxpYXNlc1wiLCBcIkFsaWFzZXNcIik7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24oXCJjaGVja2JveFwiLCBcIkNoZWNrYm94XCIpO1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKFwiZGF0ZVwiLCBcIkRhdGVcIik7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24oXCJkYXRldGltZVwiLCBcIkRhdGUgJiBUaW1lXCIpO1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKFwibXVsdGl0ZXh0XCIsIFwiTGlzdFwiKTtcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbihcIm51bWJlclwiLCBcIk51bWJlclwiKTtcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbihcInRhZ3NcIiwgXCJUYWdzXCIpO1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKFwidGV4dFwiLCBcIlRleHRcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAocnVsZS50eXBlKSBkcm9wZG93bi5zZXRWYWx1ZShydWxlLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgLy9kcm9wZG93bi5zZXREaXNhYmxlZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS50eXBlID0gdmFsdWUgYXMgT2JzaWRpYW5Qcm9wZXJ0eVR5cGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZXZEcm9wZG93biA9IGRyb3Bkb3duO1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uc2VsZWN0RWwuc2V0QXR0cmlidXRlKCdzdHlsZScsJ3dpZHRoOjQwMHB4Jyk7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24oXCJcIiwgXCJTZWxlY3QgYSBjb250ZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcnVsZSBvZiBydWxlRnVuY3Rpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKHJ1bGUuaWQsIHJ1bGUuZGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKFwic2NyaXB0XCIsIFwiSmF2YVNjcmlwdCBzY3JpcHRcIik7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5zZXRWYWx1ZShydWxlLmNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24ub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGpzQ29kZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAnc2NyaXB0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9sZE9yaWdpbmFsQ29kZSA9IGdldFJ1bGVGdW5jdGlvbkJ5SWQocnVsZS5jb250ZW50KT8uc291cmNlIHx8IHJ1bGVGdW5jdGlvbnNbMF0uc291cmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChydWxlLmJ1aWxkSW5Db2RlICE9PSAnJykgJiYgKHJ1bGUuYnVpbGRJbkNvZGUgIT09IG9sZE9yaWdpbmFsQ29kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaG91bGRQcm9jZWVkID0gYXdhaXQgbmV3IEFsZXJ0TW9kYWwoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdPdmVyd3JpdGUgZXhpc3RpbmcgY29kZT8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0kgc2VlcyBsaWtlIHlvdSBoYXZlIGN1c3RvbSBjb2RlIGZvciB0aGlzIHJ1bGUhIFNob3VsZCB0aGlzIGJlIG92ZXJ3cml0dGVuIGJ5IGRlZmF1bHQgY29kZSBmb3IgdGhpcyBwYXJhbWV0ZXI/JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdZZXMnLCAnTm8nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkub3BlbkFuZEdldFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZFByb2NlZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganNDb2RlID0gcnVsZS5idWlsZEluQ29kZSA9IGdldFJ1bGVGdW5jdGlvbkJ5SWQodmFsdWUpPy5zb3VyY2UgfHwgcnVsZUZ1bmN0aW9uc1swXS5zb3VyY2U7IC8vIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzQ29kZSA9IHJ1bGUuYnVpbGRJbkNvZGU7IC8vIGtlZXAgdGhlIGV4aXN0aW5nIGNvZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbUVkaXRvcj8uc2V0VmFsdWUoanNDb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2F3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc0NvZGUgPSBydWxlLmJ1aWxkSW5Db2RlID0gZ2V0UnVsZUZ1bmN0aW9uQnlJZCh2YWx1ZSk/LnNvdXJjZSB8fCBydWxlRnVuY3Rpb25zWzBdLnNvdXJjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NtRWRpdG9yPy5zZXRWYWx1ZShqc0NvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NtRWRpdG9yPy5zZXRWYWx1ZShydWxlLmpzQ29kZSE9PScnID8gcnVsZS5qc0NvZGUgOiBydWxlRnVuY3Rpb25zWzBdLnNvdXJjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5jb250ZW50ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcnVsZU9wdGlvbnNEaXYuc3R5bGUuZGlzcGxheSA9IGAkeyhydWxlLmNvbnRlbnQgPT09ICdzY3JpcHQnKSA/ICdmbGV4JyA6ICdub25lJ31gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93SnNGdW5jdGlvbkJ1dHRvbihydWxlLmNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJ1bGVPcHRpb25zRGl2LnN0eWxlLmRpc3BsYXkgPSBgJHsocnVsZS5jb250ZW50ID09PSAnc2NyaXB0JykgJiYgKHJ1bGUuc2hvd0NvbnRlbnQpID8gJ2ZsZXgnIDogJ25vbmUnfWA7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hZGRCdXR0b24oYXN5bmMgKGJ1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2hvd0Z1bmN0aW9uQnV0dG9uID0gYnV0dG9uO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmJ1dHRvbkVsLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCd3aWR0aDozMHB4Jyk7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uc2V0SWNvbignc3F1YXJlLWZ1bmN0aW9uJyk7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uc2V0Q2xhc3MoJ29ic2lkaWFuLWYydC1zbWFsbEJ1dHRvbicpO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLnNldFRvb2x0aXAoJ3Nob3cgJiBlZGl0IGNvZGUnKVxyXG4gICAgICAgICAgICAgICAgYnV0dG9uLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJ1bGUuc2hvd0NvbnRlbnQgPSAhcnVsZS5zaG93Q29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICBydWxlT3B0aW9uc0Rpdi5zdHlsZS5kaXNwbGF5ID0gYCR7KHJ1bGUuc2hvd0NvbnRlbnQpID8gJ2ZsZXgnIDogJ25vbmUnfWA7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgc2hvd0Z1bmN0aW9uQnV0dG9uLmJ1dHRvbkVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmFkZEJ1dHRvbihhc3luYyAoYnV0dG9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uYnV0dG9uRWwuc2V0QXR0cmlidXRlKCdzdHlsZScsJ3dpZHRoOjMwcHgnKTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRJY29uKCdzcXVhcmUtbWludXMnKTtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRDbGFzcygnb2JzaWRpYW4tZjJ0LXNtYWxsQnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uc2V0VG9vbHRpcCgncmVtb3ZlIHRoaXMgcnVsZScpXHJcbiAgICAgICAgICAgICAgICBidXR0b24ub25DbGljayhhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucnVsZXMuc3BsaWNlKHRoaXMucGx1Z2luLnNldHRpbmdzLnJ1bGVzLmZpbmRJbmRleCh2YWx1ZSA9PiB2YWx1ZS5pZCA9PT0gcnVsZVVVSUQpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVJ1bGUocnVsZXNEaXYpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzaG93SnNGdW5jdGlvbkJ1dHRvbihydWxlLmNvbnRlbnQpO1xyXG4gICAgICAgICAgICBkaXZFbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnYm9yZGVyLXRvcCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIHJlbW92ZVJ1bGUocnVsZXNEaXY6IEhUTUxEaXZFbGVtZW50KSB7XHJcbiAgICAgICAgcnVsZXNEaXYucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG59IiwgImltcG9ydCB7IEFwcCwgTm90aWNlLCBTdWdnZXN0TW9kYWwsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBQcm9wZXJ0eVR5cGVJbmZvLCBQcm9wZXJ0eVR5cGUsIE9ic2lkaWFuUHJvcGVydHlUeXBlc30gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9QUk9QRVJUWV9UWVBFX0lORk86IFByb3BlcnR5VHlwZUluZm8gPSB7XHJcbiAgICBuYW1lIDogXCJcIixcclxuICAgIHR5cGUgOiAndGV4dCcsXHJcbiAgICBpc0FycmF5OiBmYWxzZSxcclxuICAgIHZhbHVlczogW10sXHJcbiAgICBzb3VyY2U6ICdyZWdpc3RlcmVkJyxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIGFsbCBhdmFpbGFibGUgcHJvcGVydGllcyB3aXRoIHRoZWlyIHR5cGUgaW5mb3JtYXRpb25cclxuICogQHBhcmFtIGFwcCBUaGUgT2JzaWRpYW4gQXBwIGluc3RhbmNlXHJcbiAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheSBvZiBQcm9wZXJ0eVR5cGVJbmZvXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsUHJvcGVydGllc1dpdGhUeXBlcyhhcHA6IEFwcCk6IFByb21pc2U8UHJvcGVydHlUeXBlSW5mb1tdPiB7XHJcbiAgICAvLyBUcnkgdG8gZ2V0IHJlZ2lzdGVyZWQgcHJvcGVydGllcyAoZmFsbGJhY2sgdG8gZW1wdHkgYXJyYXkgaWYgQVBJIGNoYW5nZWQpXHJcbiAgICBjb25zdCByZWdpc3RlcmVkUHJvcHMgPSBhd2FpdCBnZXRSZWdpc3RlcmVkUHJvcGVydGllc1NhZmUoYXBwKTtcclxuICAgIFxyXG4gICAgLy8gR2V0IGFkZGl0aW9uYWwgcHJvcGVydGllcyBmb3VuZCBpbiBub3Rlc1xyXG4gICAgY29uc3QgZmlsZVByb3BzID0gYXdhaXQgZ2V0UHJvcGVydGllc0Zyb21GaWxlcyhhcHApO1xyXG4gICAgXHJcbiAgICAvLyBDb21iaW5lIHJlc3VsdHMgKGZhdm9yIHJlZ2lzdGVyZWQgcHJvcGVydGllcyB3aGVuIGR1cGxpY2F0ZXMgZXhpc3QpXHJcbiAgICBjb25zdCBjb21iaW5lZCA9IG5ldyBNYXA8c3RyaW5nLCBQcm9wZXJ0eVR5cGVJbmZvPigpO1xyXG4gICAgXHJcbiAgICAvLyBBZGQgcHJvcGVydGllcyBmb3VuZCBpbiBmaWxlcyBmaXJzdFxyXG4gICAgZmlsZVByb3BzLmZvckVhY2gocHJvcCA9PiB7XHJcbiAgICAgICAgY29tYmluZWQuc2V0KHByb3AubmFtZSwgcHJvcCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gVGhlbiBvdmVycmlkZSB3aXRoIHJlZ2lzdGVyZWQgcHJvcGVydGllcyAod2hpY2ggaGF2ZSBtb3JlIGNvbXBsZXRlIHR5cGUgaW5mbylcclxuICAgIHJlZ2lzdGVyZWRQcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xyXG4gICAgICAgIGNvbWJpbmVkLnNldChwcm9wLm5hbWUsIHByb3ApO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHJldHVybiBBcnJheS5mcm9tKGNvbWJpbmVkLnZhbHVlcygpKS5zb3J0KChhLCBiKSA9PiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCBQcm9wZXJ0aWVzIGZyb20gTWV0YWRhdGFNYW5hZ2VyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvcGVydGllc0Zyb21NZXRhZGF0YU1hbmFnZXIoYXBwOiBBcHApOiBQcm9wZXJ0eVR5cGVJbmZvW10ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBtZXRhZGF0YU1hbmFnZXIgPSAoYXBwIGFzIGFueSkubWV0YWRhdGFUeXBlTWFuYWdlcjtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImdldCBwcm9wZXJ0aWVzOlwiLG1ldGFkYXRhTWFuYWdlcik7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMobWV0YWRhdGFNYW5hZ2VyLnByb3BlcnRpZXMpLm1hcCggKHZhbHVlOmFueSk6UHJvcGVydHlUeXBlSW5mbyA9PiAoe1xyXG4gICAgICAgICAgICBuYW1lOiB2YWx1ZS5uYW1lLFxyXG4gICAgICAgICAgICB0eXBlOiB2YWx1ZS50eXBlLFxyXG4gICAgICAgICAgICBjb3VudDogdmFsdWUuY291bnQsXHJcbiAgICAgICAgICAgIHNvdXJjZTogJ3JlZ2lzdGVyZWQnXHJcbiAgICAgICAgfSkpLnNvcnQoKGEsIGIpID0+IGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSkpO1xyXG5cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ291bGRuJ3QgYWNjZXNzIHByb3BlcnRpZXMgZnJvbSBNZXRhZGF0YSBNYW5hZ2VyXCIsIGUpO1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogR2V0IFR5cGVzIGZyb20gTWV0YWRhdGFNYW5hZ2VyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwZXNGcm9tTWV0YWRhdGFNYW5hZ2VyKGFwcDogQXBwKTogYW55IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgbWV0YWRhdGFNYW5hZ2VyID0gKGFwcCBhcyBhbnkpLm1ldGFkYXRhVHlwZU1hbmFnZXI7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJnZXQgdHlwZXM6XCIsbWV0YWRhdGFNYW5hZ2VyKTtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhtZXRhZGF0YU1hbmFnZXIucmVnaXN0ZXJlZFR5cGVXaWRnZXRzKS5tYXAoICh2YWx1ZTphbnksIGluZGV4LCBhcnJheSk6UHJvcGVydHlUeXBlICA9PiAoe1xyXG4gICAgICAgICAgICB0eXBlOiB2YWx1ZS50eXBlLFxyXG4gICAgICAgICAgICBpY29uOiB2YWx1ZS5pY29uLFxyXG4gICAgICAgICAgICBqc1R5cGU6ICcnLFxyXG4gICAgICAgIH0pKS5zb3J0KChhLCBiKSA9PiBhLnR5cGUubG9jYWxlQ29tcGFyZShiLnR5cGUpKTtcclxuXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkbid0IGFjY2VzcyBwcm9wZXJ0aWVzIGZyb20gTWV0YWRhdGEgTWFuYWdlclwiLCBlKTtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFNhZmUgbWV0aG9kIHRvIGdldCByZWdpc3RlcmVkIHByb3BlcnRpZXMgdGhhdCB3b24ndCB0aHJvdyBpZiBBUEkgY2hhbmdlc1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZFByb3BlcnRpZXNTYWZlKGFwcDogQXBwKTogUHJvbWlzZTxQcm9wZXJ0eVR5cGVJbmZvW10+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgbWV0YWRhdGFNYW5hZ2VyID0gKGFwcCBhcyBhbnkpLm1ldGFkYXRhVHlwZU1hbmFnZXI7XHJcbiAgICAgICAgY29uc29sZS5sb2cobWV0YWRhdGFNYW5hZ2VyKTtcclxuICAgICAgICBpZiAoIW1ldGFkYXRhTWFuYWdlcikgcmV0dXJuIFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFRyeSBkaWZmZXJlbnQgd2F5cyB0byBnZXQgcHJvcGVydGllcyBiYXNlZCBvbiBPYnNpZGlhbiB2ZXJzaW9uXHJcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRhZGF0YU1hbmFnZXIuZ2V0QWxsRnJvbnRtYXR0ZXJUeXBlcyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAvLyBPbGRlciBPYnNpZGlhbiB2ZXJzaW9uc1xyXG4gICAgICAgICAgICBjb25zdCBmcm9udG1hdHRlclR5cGVzID0gbWV0YWRhdGFNYW5hZ2VyLmdldEFsbEZyb250bWF0dGVyVHlwZXMoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZyb250bWF0dGVyVHlwZXMubWFwKChuYW1lOiBzdHJpbmcpID0+ICh7XHJcbiAgICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLCAvLyBEZWZhdWx0IHR5cGUgaWYgd2UgY2FuJ3QgZ2V0IG1vcmUgaW5mb1xyXG4gICAgICAgICAgICAgICAgc291cmNlOiAncmVnaXN0ZXJlZCdcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG1ldGFkYXRhTWFuYWdlci5nZXRQcm9wZXJ0aWVzID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIC8vIE5ld2VyIE9ic2lkaWFuIHZlcnNpb25zIG1pZ2h0IHVzZSB0aGlzXHJcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBtZXRhZGF0YU1hbmFnZXIuZ2V0UHJvcGVydGllcygpO1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMocHJvcGVydGllcykubWFwKChbbmFtZSwgdHlwZV06IFtzdHJpbmcsIGFueV0pID0+ICh7XHJcbiAgICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgICAgIHNvdXJjZTogJ3JlZ2lzdGVyZWQnXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkbid0IGFjY2VzcyByZWdpc3RlcmVkIHByb3BlcnRpZXM6XCIsIGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtdO1xyXG59XHJcblxyXG4vKipcclxuICogU2NhbnMgZmlsZXMgZm9yIGFkZGl0aW9uYWwgcHJvcGVydGllcyB3aXRoIHR5cGUgaW5mZXJlbmNlXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBnZXRQcm9wZXJ0aWVzRnJvbUZpbGVzKGFwcDogQXBwKTogUHJvbWlzZTxQcm9wZXJ0eVR5cGVJbmZvW10+IHtcclxuICAgIGNvbnN0IGZpbGVzID0gYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcclxuICAgIGNvbnN0IHByb3BlcnR5TWFwID0gbmV3IE1hcDxzdHJpbmcsIHsgdmFsdWVzOiBTZXQ8YW55PiwgdHlwZXM6IFNldDxzdHJpbmc+IH0+KCk7XHJcbiAgICBcclxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcy5zbGljZSgwLCAxMDAwKSkgeyAvLyBMaW1pdCB0byAxMDAwIGZpbGVzIGZvciBwZXJmb3JtYW5jZVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGU/LmZyb250bWF0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhjYWNoZS5mcm9udG1hdHRlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAncG9zaXRpb24nKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXByb3BlcnR5TWFwLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TWFwLnNldChrZXksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogbmV3IFNldCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZXM6IG5ldyBTZXQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcERhdGEgPSBwcm9wZXJ0eU1hcC5nZXQoa2V5KSE7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcERhdGEudmFsdWVzLmFkZCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcERhdGEudHlwZXMuYWRkKGluZmVyVHlwZUZyb21WYWx1ZSh2YWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgcHJvY2Vzc2luZyBmaWxlICR7ZmlsZS5wYXRofTpgLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbShwcm9wZXJ0eU1hcC5lbnRyaWVzKCkpLm1hcCgoW25hbWUsIGRhdGFdKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdHlwZSA9IGRldGVybWluZVByaW1hcnlUeXBlKGRhdGEudHlwZXMpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgIGlzQXJyYXk6IGRhdGEudHlwZXMuaGFzKCdhcnJheScpLFxyXG4gICAgICAgICAgICB2YWx1ZXM6IGRhdGEudmFsdWVzLnNpemUgPiAwID8gQXJyYXkuZnJvbShkYXRhLnZhbHVlcykubWFwKFN0cmluZykgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIHNvdXJjZTogJ2luZmVycmVkJ1xyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIERldGVybWluZXMgdGhlIHByaW1hcnkgdHlwZSBmcm9tIGEgU2V0IG9mIG9ic2VydmVkIHR5cGVzXHJcbiAqIEBwYXJhbSB0eXBlcyBTZXQgb2Ygb2JzZXJ2ZWQgdHlwZXMgZm9yIGEgcHJvcGVydHlcclxuICogQHJldHVybnMgVGhlIG1vc3Qgc3BlY2lmaWMgdHlwZSB3ZSBjYW4gZGV0ZXJtaW5lXHJcbiAqL1xyXG5mdW5jdGlvbiBkZXRlcm1pbmVQcmltYXJ5VHlwZSh0eXBlczogU2V0PHN0cmluZz4pOiBPYnNpZGlhblByb3BlcnR5VHlwZXMge1xyXG4gICAgLy8gSGFuZGxlIGVtcHR5IGNhc2UgKHNob3VsZG4ndCBoYXBwZW4gYnV0IFR5cGVTY3JpcHQgd2FudHMgdXMgdG8gY2hlY2spXHJcbiAgICBpZiAodHlwZXMuc2l6ZSA9PT0gMCkgcmV0dXJuICd0ZXh0JztcclxuICAgIFxyXG4gICAgLy8gSWYgb25seSBvbmUgdHlwZSBvYnNlcnZlZCwgdXNlIHRoYXRcclxuICAgIGlmICh0eXBlcy5zaXplID09PSAxKSByZXR1cm4gdHlwZXMudmFsdWVzKCkubmV4dCgpLnZhbHVlO1xyXG4gICAgXHJcbiAgICAvLyBQcmlvcml0eSBvcmRlciBmb3IgdHlwZSByZXNvbHV0aW9uXHJcbiAgICBjb25zdCB0eXBlUHJpb3JpdHk6IE9ic2lkaWFuUHJvcGVydHlUeXBlc1tdID0gW1xyXG4gICAgICAgICdkYXRlJyxcclxuICAgICAgICAnZGF0ZXRpbWUnLFxyXG4gICAgICAgICdjaGVja2JveCcsXHJcbiAgICAgICAgJ251bWJlcicsXHJcbiAgICAgICAgJ3RhZ3MnLFxyXG4gICAgICAgICdhbGlhc2VzJyxcclxuICAgICAgICAnbXVsdGl0ZXh0JyxcclxuICAgICAgICAndGV4dCcgLy8gZmFsbGJhY2tcclxuICAgIF07XHJcbiAgICBcclxuICAgIC8vIFJldHVybiB0aGUgaGlnaGVzdCBwcmlvcml0eSB0eXBlIHdlIGZpbmRcclxuICAgIGZvciAoY29uc3QgdHlwZSBvZiB0eXBlUHJpb3JpdHkpIHtcclxuICAgICAgICBpZiAodHlwZXMuaGFzKHR5cGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gRmluYWwgZmFsbGJhY2tcclxuICAgIHJldHVybiAndGV4dCc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFbmhhbmNlZCB0eXBlIGluZmVyZW5jZSB3aXRoIGJldHRlciBkYXRlIGRldGVjdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gaW5mZXJUeXBlRnJvbVZhbHVlKHZhbHVlOiBhbnkpOiBzdHJpbmcge1xyXG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gJ251bGwnO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBDaGVjayBhcnJheSBmaXJzdFxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgLy8gQ2hlY2sgYXJyYXkgZWxlbWVudCB0eXBlc1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50VHlwZXMgPSBuZXcgU2V0KHZhbHVlLm1hcChpbmZlclR5cGVGcm9tVmFsdWUpKTtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnRUeXBlcy5zaXplID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYGFycmF5PCR7ZWxlbWVudFR5cGVzLnZhbHVlcygpLm5leHQoKS52YWx1ZX0+YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJ2FycmF5JztcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgYmFzaWMgdHlwZXNcclxuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XHJcbiAgICAgICAgY2FzZSAnYm9vbGVhbic6IHJldHVybiAnYm9vbGVhbic7XHJcbiAgICAgICAgY2FzZSAnbnVtYmVyJzogcmV0dXJuICdudW1iZXInO1xyXG4gICAgICAgIGNhc2UgJ29iamVjdCc6IHJldHVybiAnb2JqZWN0JzsgLy8gZm9yIGZ1dHVyZSBleHBhbnNpb25cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gTXVzdCBiZSBzdHJpbmcgYXQgdGhpcyBwb2ludCAtIGNoZWNrIGZvciBzcGVjaWFsIHN0cmluZyBmb3JtYXRzXHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIC8vIElTTyBEYXRlIChZWVlZLU1NLUREKVxyXG4gICAgICAgIGlmICgvXlxcZHs0fS1cXGR7Mn0tXFxkezJ9JC8udGVzdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdkYXRlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gSVNPIERhdGVUaW1lXHJcbiAgICAgICAgaWYgKC9eXFxkezR9LVxcZHsyfS1cXGR7Mn1bVCBdXFxkezJ9OlxcZHsyfTpcXGR7Mn0vLnRlc3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnZGF0ZXRpbWUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBPYnNpZGlhbiB0YWdcclxuICAgICAgICBpZiAodmFsdWUuc3RhcnRzV2l0aCgnIycpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAndGFnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIERlZmF1bHQgdG8gc3RyaW5nXHJcbiAgICByZXR1cm4gJ3N0cmluZyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHZhbHVlKHZhbHVlOiB1bmtub3duLCBpbmRleDogbnVtYmVyLCBhcnJheTogdW5rbm93bltdKTogdW5rbm93biB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uIG5vdCBpbXBsZW1lbnRlZC4nKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNlbGVjdFByb3BlcnR5IGV4dGVuZHMgU3VnZ2VzdE1vZGFsPFByb3BlcnR5VHlwZUluZm8+IHtcclxuICAgIHByaXZhdGUgb25TdWJtaXQ6IChyZXN1bHQ6IFByb3BlcnR5VHlwZUluZm8pID0+IHZvaWQ7XHJcbiAgICBwcm9wZXJ0eTogUHJvcGVydHlUeXBlSW5mbyB8IHVuZGVmaW5lZDtcclxuICAgIGtub3duUHJvcGVydGllczpQcm9wZXJ0eVR5cGVJbmZvW107XHJcbiAgICB0eXBlZFRleHQ6IHN0cmluZztcclxuICAgIG5ld1RleHRGbGFnOiBCb29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yIChhcHA6QXBwLCBrbm93blByb3BlcnRpZXM6UHJvcGVydHlUeXBlSW5mb1tdLCBwcm9wZXJ0eTogUHJvcGVydHlUeXBlSW5mbyB8IHVuZGVmaW5lZCwgb25TdWJtaXQ6IChyZXN1bHQ6IFByb3BlcnR5VHlwZUluZm8pID0+IHZvaWQpIHtcclxuICAgICAgICBzdXBlcihhcHApO1xyXG4gICAgICAgIHRoaXMub25TdWJtaXQgPSBvblN1Ym1pdDtcclxuICAgICAgICB0aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XHJcbiAgICAgICAgdGhpcy50eXBlZFRleHQgPSAnJztcclxuICAgICAgICB0aGlzLm5ld1RleHRGbGFnID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmtub3duUHJvcGVydGllcyA9IGtub3duUHJvcGVydGllcztcclxuICAgIH1cclxuICAgIC8vIFJldHVybnMgYWxsIGF2YWlsYWJsZSBzdWdnZXN0aW9ucy5cclxuICAgIGdldFN1Z2dlc3Rpb25zKHF1ZXJ5OiBzdHJpbmcpOiBQcm9wZXJ0eVR5cGVJbmZvW10ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMua25vd25Qcm9wZXJ0aWVzLmZpbHRlcigocHJvcGVydHkpID0+IHByb3BlcnR5Lm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeS50b0xvd2VyQ2FzZSgpKSk7XHJcbiAgICAgICAgdGhpcy5uZXdUZXh0RmxhZyA9IChyZXN1bHQubGVuZ3RoID09PSAwKTtcclxuICAgICAgICB0aGlzLnR5cGVkVGV4dCA9IHF1ZXJ5O1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBvbk9wZW4oKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydHkpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRQbGFjZWhvbGRlcih0aGlzLnByb3BlcnR5Lm5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UGxhY2Vob2xkZXIoJ25vIHByb3BlcnR5IHNlbGVjdGVkIScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldFRpdGxlKCdTZWxlY3Qgb3IgdHlwZSBhIHByb3BlcnR5IG5hbWUnKTtcclxuICAgIH1cclxuICAgIC8vIFJlbmRlcnMgZWFjaCBzdWdnZXN0aW9uIGl0ZW0uXHJcbiAgICByZW5kZXJTdWdnZXN0aW9uKHByb3BlcnR5OiBQcm9wZXJ0eVR5cGVJbmZvLCBlbDogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgZWwuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogcHJvcGVydHkubmFtZSB9KTtcclxuICAgICAgZWwuY3JlYXRlRWwoJ3NtYWxsJywgeyB0ZXh0OiBwcm9wZXJ0eS50eXBlIH0pO1xyXG4gICAgfVxyXG4gICAgb25DbG9zZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5uZXdUZXh0RmxhZyAmJiB0aGlzLnByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydHkubmFtZSA9IHRoaXMudHlwZWRUZXh0O1xyXG4gICAgICAgICAgICB0aGlzLnByb3BlcnR5LnR5cGUgPSAndGV4dCc7XHJcbiAgICAgICAgICAgIHRoaXMub25TdWJtaXQodGhpcy5wcm9wZXJ0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFBlcmZvcm0gYWN0aW9uIG9uIHRoZSBzZWxlY3RlZCBzdWdnZXN0aW9uLlxyXG4gICAgb25DaG9vc2VTdWdnZXN0aW9uKHByb3BlcnR5OiBQcm9wZXJ0eVR5cGVJbmZvLCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGV2dCBpbnN0YW5jZW9mIEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYGtleWJvYXJkICR7dGhpcy50eXBlZFRleHR9ICR7dGhpcy5uZXdUZXh0RmxhZ31gLCBwcm9wZXJ0eSlcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coJ29uQ2hvb3NlU3VnZ2VzdGlvbicsIGV2dClcclxuICAgICAgICB0aGlzLm9uU3VibWl0KHByb3BlcnR5KTtcclxuICAgIH1cclxuICB9XHJcbiIsICJpbXBvcnQgeyBGb2xkZXJUYWdTZXR0aW5ncyB9IGZyb20gJy4vdHlwZXMnXHJcbi8qKlxyXG4gKiBQYXJzZSBhIEphdmFTY3JpcHQgZnVuY3Rpb24sIGNsZWFuIGNvbW1lbnRzIGFuZCBkZWZpbmUgdGhlIGZ1bmN0aW9uIFxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBqc0NvZGVcclxuICogQHJldHVybiB7Kn0gIHsoRnVuY3Rpb24gfCBzdHJpbmcgfCB1bmRlZmluZWQpfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSlNDb2RlKGpzQ29kZTpzdHJpbmcpOiBGdW5jdGlvbiB8IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICBmdW5jdGlvbiBwYXJzZUZ1bmN0aW9uIChqc0NvZGU6IHN0cmluZyk6IEZ1bmN0aW9uIHwgc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgIGpzQ29kZSA9IGNsZWFuQ29kZVN0cmluZyhqc0NvZGUpO1xyXG4gICAgICAgIHZhciBmdW5jUmVnID0gL2Z1bmN0aW9uICpcXCgoW14oKV0qKVxcKVsgXFxuXFx0XSp7KC4qKX0vZ21pO1xyXG4gICAgICAgIHZhciBtYXRjaCA9IGZ1bmNSZWcuZXhlYyhqc0NvZGUucmVwbGFjZSgvXFxuL2csICcgJykpO1xyXG4gICAgICAgIGlmICghbWF0Y2gpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBtYXRjaFsxXS5zcGxpdCgnLCcpO1xyXG4gICAgICAgIGFyZ3MucHVzaChtYXRjaFsyXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbiguLi5hcmdzKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdlcnJvciBwYXJzaW5nIEpTIGZ1bmN0aW9uIScsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBwYXJzZUZ1bmN0aW9uKGpzQ29kZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGVhbnMgYSBKYXZhU2NyaXB0L1R5cGVTY3JpcHQgY29kZSBzdHJpbmcgYnkgcmVtb3ZpbmcgY29tbWVudHMuXHJcbiAqIFRoaXMgZnVuY3Rpb24gaGFuZGxlcyBib3RoIHNpbmdsZS1saW5lIGNvbW1lbnRzIChgLy8gLi4uYCkgYW5kXHJcbiAqIG11bHRpLWxpbmUgY29tbWVudHMgKGAvKiAuLi4gKlxcL2ApLiBJdCBhbHNvIGNvcnJlY3RseSBoYW5kbGVzXHJcbiAqIGNvbW1lbnRzIHdpdGhpbiBzdHJpbmdzIGFuZCByZWd1bGFyIGV4cHJlc3Npb25zLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gY29kZVN0cmluZyBUaGUgY29kZSBzdHJpbmcgdG8gY2xlYW4uXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjbGVhbmVkIGNvZGUgc3RyaW5nIHdpdGggY29tbWVudHMgcmVtb3ZlZC5cclxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiB0aGUgaW5wdXQgaXMgbm90IGEgc3RyaW5nLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFuQ29kZVN0cmluZyhjb2RlU3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgLy8gRW5zdXJlIHRoZSBpbnB1dCBpcyBhIHN0cmluZ1xyXG4gICAgaWYgKHR5cGVvZiBjb2RlU3RyaW5nICE9PSAnc3RyaW5nJykge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnB1dCBtdXN0IGJlIGEgc3RyaW5nLicpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgLy8gRmxhZ3MgdG8gdHJhY2sgdGhlIGN1cnJlbnQgcGFyc2luZyBjb250ZXh0XHJcbiAgICBsZXQgaW5NdWx0aUxpbmVDb21tZW50OiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBsZXQgaW5TaW5nbGVMaW5lQ29tbWVudDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgbGV0IGluU3RyaW5nOiAnXCInIHwgXCInXCIgfCBudWxsID0gbnVsbDsgLy8gVHJhY2tzIGlmIGluc2lkZSBzaW5nbGUgb3IgZG91YmxlIHF1b3Rlc1xyXG4gICAgbGV0IGluUmVnRXhwOiBib29sZWFuID0gZmFsc2U7IC8vIFRyYWNrcyBpZiBpbnNpZGUgYSByZWd1bGFyIGV4cHJlc3Npb24gbGl0ZXJhbFxyXG4gIFxyXG4gICAgLy8gVGhlIHJlc3VsdGluZyBzdHJpbmcgd2l0aG91dCBjb21tZW50c1xyXG4gICAgbGV0IGNsZWFuZWRDb2RlOiBzdHJpbmcgPSAnJztcclxuICAgIC8vIEN1cnJlbnQgaW5kZXggaW4gdGhlIGlucHV0IHN0cmluZ1xyXG4gICAgbGV0IGk6IG51bWJlciA9IDA7XHJcbiAgXHJcbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggdGhlIGlucHV0IHN0cmluZyBjaGFyYWN0ZXIgYnkgY2hhcmFjdGVyXHJcbiAgICB3aGlsZSAoaSA8IGNvZGVTdHJpbmcubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IGNoYXI6IHN0cmluZyA9IGNvZGVTdHJpbmdbaV07XHJcbiAgICAgIGNvbnN0IG5leHRDaGFyOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBjb2RlU3RyaW5nW2kgKyAxXTsgLy8gVXNlIHVuZGVmaW5lZCBmb3IgcG90ZW50aWFsIGVuZCBvZiBzdHJpbmdcclxuICBcclxuICAgICAgLy8gLS0tIFN0YXRlOiBJbnNpZGUgYSBtdWx0aS1saW5lIGNvbW1lbnQgLS0tXHJcbiAgICAgIGlmIChpbk11bHRpTGluZUNvbW1lbnQpIHtcclxuICAgICAgICAvLyBDaGVjayBmb3IgdGhlIGVuZCBvZiB0aGUgbXVsdGktbGluZSBjb21tZW50ICcqLydcclxuICAgICAgICBpZiAoY2hhciA9PT0gJyonICYmIG5leHRDaGFyID09PSAnLycpIHtcclxuICAgICAgICAgIGluTXVsdGlMaW5lQ29tbWVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgaSArPSAyOyAvLyBTa2lwIHRoZSAnKi8nXHJcbiAgICAgICAgICBjb250aW51ZTsgLy8gTW92ZSB0byB0aGUgbmV4dCBpdGVyYXRpb25cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaSsrOyAvLyBTa2lwIHRoZSBjaGFyYWN0ZXIgaW5zaWRlIHRoZSBjb21tZW50XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgLy8gLS0tIFN0YXRlOiBJbnNpZGUgYSBzaW5nbGUtbGluZSBjb21tZW50IC0tLVxyXG4gICAgICBpZiAoaW5TaW5nbGVMaW5lQ29tbWVudCkge1xyXG4gICAgICAgIC8vIENoZWNrIGZvciB0aGUgZW5kIG9mIHRoZSBsaW5lIChuZXdsaW5lIG9yIGNhcnJpYWdlIHJldHVybilcclxuICAgICAgICBpZiAoY2hhciA9PT0gJ1xcbicgfHwgY2hhciA9PT0gJ1xccicpIHtcclxuICAgICAgICAgIGluU2luZ2xlTGluZUNvbW1lbnQgPSBmYWxzZTtcclxuICAgICAgICAgIGNsZWFuZWRDb2RlICs9IGNoYXI7IC8vIEtlZXAgdGhlIG5ld2xpbmUgY2hhcmFjdGVyXHJcbiAgICAgICAgICBpKys7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaSsrOyAvLyBTa2lwIHRoZSBjaGFyYWN0ZXIgaW5zaWRlIHRoZSBjb21tZW50XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgLy8gLS0tIFN0YXRlOiBJbnNpZGUgYSBzdHJpbmcgbGl0ZXJhbCAtLS1cclxuICAgICAgaWYgKGluU3RyaW5nKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgY2hhcmFjdGVyIGNsb3NlcyB0aGUgc3RyaW5nXHJcbiAgICAgICAgaWYgKGNoYXIgPT09IGluU3RyaW5nKSB7XHJcbiAgICAgICAgICBpblN0cmluZyA9IG51bGw7IC8vIEV4aXQgc3RyaW5nIHN0YXRlXHJcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09PSAnXFxcXCcpIHtcclxuICAgICAgICAgIC8vIEhhbmRsZSBlc2NhcGVkIGNoYXJhY3RlcnMgd2l0aGluIHN0cmluZ3MgKGUuZy4sIFwiaXRcXCdzXCIpXHJcbiAgICAgICAgICBjbGVhbmVkQ29kZSArPSBjaGFyOyAvLyBBZGQgdGhlIGJhY2tzbGFzaFxyXG4gICAgICAgICAgaSsrOyAvLyBNb3ZlIHRvIHRoZSBuZXh0IGNoYXJhY3RlciAodGhlIGVzY2FwZWQgb25lKVxyXG4gICAgICAgICAgaWYgKGkgPCBjb2RlU3RyaW5nLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgY2xlYW5lZENvZGUgKz0gY29kZVN0cmluZ1tpXTsgLy8gQWRkIHRoZSBlc2NhcGVkIGNoYXJhY3RlclxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFkZCB0aGUgY2hhcmFjdGVyIHRvIHRoZSByZXN1bHQgaWYgaXQncyBwYXJ0IG9mIHRoZSBzdHJpbmdcclxuICAgICAgICBjbGVhbmVkQ29kZSArPSBjaGFyO1xyXG4gICAgICAgIGkrKztcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gIFxyXG4gICAgICAgLy8gLS0tIFN0YXRlOiBJbnNpZGUgYSByZWd1bGFyIGV4cHJlc3Npb24gbGl0ZXJhbCAtLS1cclxuICAgICAgIGlmIChpblJlZ0V4cCkge1xyXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgY2hhcmFjdGVyIGNsb3NlcyB0aGUgcmVnZXggbGl0ZXJhbFxyXG4gICAgICAgICAgLy8gTm90ZTogVGhpcyBkb2Vzbid0IGhhbmRsZSByZWdleCBmbGFncyBwZXJmZWN0bHkgYnV0IGNvdmVycyBiYXNpYyBjYXNlcy5cclxuICAgICAgICAgIGlmIChjaGFyID09PSAnLycpIHtcclxuICAgICAgICAgICAgICBpblJlZ0V4cCA9IGZhbHNlOyAvLyBFeGl0IHJlZ2V4IHN0YXRlXHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT09ICdcXFxcJykge1xyXG4gICAgICAgICAgICAgIC8vIEhhbmRsZSBlc2NhcGVkIGNoYXJhY3RlcnMgd2l0aGluIHJlZ2V4IChlLmcuLCAvXFwvLylcclxuICAgICAgICAgICAgICBjbGVhbmVkQ29kZSArPSBjaGFyOyAvLyBBZGQgdGhlIGJhY2tzbGFzaFxyXG4gICAgICAgICAgICAgIGkrKzsgLy8gTW92ZSB0byB0aGUgbmV4dCBjaGFyYWN0ZXJcclxuICAgICAgICAgICAgICBpZiAoaSA8IGNvZGVTdHJpbmcubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgY2xlYW5lZENvZGUgKz0gY29kZVN0cmluZ1tpXTsgLy8gQWRkIHRoZSBlc2NhcGVkIGNoYXJhY3RlclxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBBZGQgdGhlIGNoYXJhY3RlciB0byB0aGUgcmVzdWx0IGlmIGl0J3MgcGFydCBvZiB0aGUgcmVnZXhcclxuICAgICAgICAgIGNsZWFuZWRDb2RlICs9IGNoYXI7XHJcbiAgICAgICAgICBpKys7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgIH1cclxuICBcclxuICAgICAgLy8gLS0tIERlZmF1bHQgU3RhdGU6IENoZWNrIGZvciBjb21tZW50L3N0cmluZy9yZWdleCBzdGFydHMgLS0tXHJcbiAgXHJcbiAgICAgIC8vIENoZWNrIGZvciB0aGUgc3RhcnQgb2YgYSBtdWx0aS1saW5lIGNvbW1lbnQgJy8qJ1xyXG4gICAgICBpZiAoY2hhciA9PT0gJy8nICYmIG5leHRDaGFyID09PSAnKicpIHtcclxuICAgICAgICBpbk11bHRpTGluZUNvbW1lbnQgPSB0cnVlO1xyXG4gICAgICAgIGkgKz0gMjsgLy8gU2tpcCB0aGUgJy8qJ1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgIC8vIENoZWNrIGZvciB0aGUgc3RhcnQgb2YgYSBzaW5nbGUtbGluZSBjb21tZW50ICcvLydcclxuICAgICAgaWYgKGNoYXIgPT09ICcvJyAmJiBuZXh0Q2hhciA9PT0gJy8nKSB7XHJcbiAgICAgICAgaW5TaW5nbGVMaW5lQ29tbWVudCA9IHRydWU7XHJcbiAgICAgICAgaSArPSAyOyAvLyBTa2lwIHRoZSAnLy8nXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgLy8gQ2hlY2sgZm9yIHRoZSBzdGFydCBvZiBhIHN0cmluZyBsaXRlcmFsICgnIG9yIFwiKVxyXG4gICAgICBpZiAoY2hhciA9PT0gJ1wiJyB8fCBjaGFyID09PSBcIidcIikge1xyXG4gICAgICAgIGluU3RyaW5nID0gY2hhcjsgLy8gRW50ZXIgc3RyaW5nIHN0YXRlLCByZW1lbWJlcmluZyB0aGUgcXVvdGUgdHlwZVxyXG4gICAgICAgIGNsZWFuZWRDb2RlICs9IGNoYXI7IC8vIEFkZCB0aGUgb3BlbmluZyBxdW90ZVxyXG4gICAgICAgIGkrKztcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gIFxyXG4gICAgICAvLyBDaGVjayBmb3IgdGhlIHN0YXJ0IG9mIGEgcmVndWxhciBleHByZXNzaW9uIGxpdGVyYWwgJy8nXHJcbiAgICAgIC8vIEJhc2ljIGNoZWNrOiBhc3N1bWVzICcvJyBpbmRpY2F0ZXMgYSByZWdleCBzdGFydCBpZiBub3QgcHJlY2VkZWQgYnkgb3BlcmF0b3JzL2tleXdvcmRzXHJcbiAgICAgIC8vIEEgbW9yZSByb2J1c3Qgc29sdXRpb24gd291bGQgcmVxdWlyZSBtb3JlIGNvbXBsZXggcGFyc2luZy5cclxuICAgICAgaWYgKGNoYXIgPT09ICcvJykge1xyXG4gICAgICAgICAgLy8gVmVyeSBiYXNpYyBjaGVjayB0byBkaWZmZXJlbnRpYXRlIGRpdmlzaW9uIGZyb20gcmVnZXggc3RhcnQuXHJcbiAgICAgICAgICAvLyBUaGlzIG1pZ2h0IG5lZWQgcmVmaW5lbWVudCBmb3IgY29tcGxleCBjYXNlcy5cclxuICAgICAgICAgIGNvbnN0IHByZXZNZWFuaW5nZnVsQ2hhciA9IGNsZWFuZWRDb2RlLnRyaW0oKS5zbGljZSgtMSk7XHJcbiAgICAgICAgICBpZiAocHJldk1lYW5pbmdmdWxDaGFyID09PSAnJyB8fCBbJygnLCAnLCcsICc9JywgJzonLCAnWycsICchJywgJyYnLCAnfCcsICc/JywgJ3snLCAnOycsICdcXG4nLCAnXFxyJ10uaW5jbHVkZXMocHJldk1lYW5pbmdmdWxDaGFyKSkge1xyXG4gICAgICAgICAgICAgIGluUmVnRXhwID0gdHJ1ZTtcclxuICAgICAgICAgICAgICBjbGVhbmVkQ29kZSArPSBjaGFyO1xyXG4gICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG4gIFxyXG4gICAgICAvLyBJZiBub25lIG9mIHRoZSBhYm92ZSwgaXQncyByZWd1bGFyIGNvZGU7IGFkZCBpdCB0byB0aGUgcmVzdWx0XHJcbiAgICAgIGNsZWFuZWRDb2RlICs9IGNoYXI7XHJcbiAgICAgIGkrKztcclxuICAgIH1cclxuICBcclxuICAgIC8vIFJldHVybiB0aGUgYWNjdW11bGF0ZWQgY2xlYW5lZCBjb2RlIHN0cmluZ1xyXG4gICAgcmV0dXJuIGNsZWFuZWRDb2RlO1xyXG4gIH1cclxuXHJcblxyXG4gIGV4cG9ydCBjbGFzcyBTY3JpcHRpbmdUb29scyB7XHJcbiAgICBzZXR0aW5nczogRm9sZGVyVGFnU2V0dGluZ3MgfCB1bmRlZmluZWQ7XHJcbiAgICBmcm9udG1hdHRlcjogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzPzogRm9sZGVyVGFnU2V0dGluZ3MgfCB1bmRlZmluZWQsIGZyb250bWF0dGVyPzogYW55KSB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuZnJvbnRtYXR0ZXIgPSBmcm9udG1hdHRlcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgYSBzdHJpbmcgY29tcGxpZXMgd2l0aCBJU08gU3RhbmRhcmRcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHN0ciBBbnkgc3RyaW5nXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHRvIGxvb2sgZm9yXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgaXNJU09TdHJpbmcoXHJcbiAgICAgIHN0cjogc3RyaW5nLFxyXG4gICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgd2l0aE1pbGxpc2Vjb25kcz86IGJvb2xlYW47XHJcbiAgICAgICAgd2l0aFRpbWV6b25lPzogYm9vbGVhbjtcclxuICAgICAgICB3aXRoVGltZT86IGJvb2xlYW47XHJcbiAgICAgICAgd2l0aERhdGU/OiBib29sZWFuOyBcclxuICAgICAgfSA9IHt9XHJcbiAgICApOiBib29sZWFuIHtcclxuICAgICAgY29uc3Qge1xyXG4gICAgICAgIHdpdGhNaWxsaXNlY29uZHMgPSBmYWxzZSxcclxuICAgICAgICB3aXRoVGltZXpvbmUgPSBmYWxzZSxcclxuICAgICAgICB3aXRoVGltZSA9IHRydWUsXHJcbiAgICAgICAgd2l0aERhdGUgPSB0cnVlLCBcclxuICAgICAgfSA9IG9wdGlvbnM7XHJcbiAgICBcclxuICAgICAgbGV0IGRhdGVSZWdleFN0ciA9IFwiXig/OlxcXFxkezR9LSg/OjBbMS05XXwxWzAtMl0pLSg/OjBbMS05XXxbMTJdXFxcXGR8M1swMV0pKVwiO1xyXG4gICAgICBsZXQgdGltZVJlZ2V4U3RyID0gXCIoPzpUKD86WzAxXVxcXFxkfDJbMC0zXSk6WzAtNV1cXFxcZDpbMC01XVxcXFxkXCI7XHJcbiAgICBcclxuICAgICAgaWYgKHdpdGhNaWxsaXNlY29uZHMpIHtcclxuICAgICAgICB0aW1lUmVnZXhTdHIgKz0gXCJcXFxcLlxcXFxkezN9XCI7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICBpZiAod2l0aFRpbWV6b25lKSB7XHJcbiAgICAgICAgdGltZVJlZ2V4U3RyICs9IFwiKD86WnxbKy1dKD86WzAxXVxcXFxkfDJbMC0zXSk6WzAtNV1cXFxcZCk/KT9cIjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aW1lUmVnZXhTdHIgKz0gXCIpP1wiO1xyXG4gICAgICB9XHJcbiAgICBcclxuICAgICAgbGV0IHJlZ2V4U3RyID0gXCJcIjtcclxuICAgICAgaWYgKHdpdGhEYXRlICYmIHdpdGhUaW1lKSB7XHJcbiAgICAgICAgcmVnZXhTdHIgPSBgJHtkYXRlUmVnZXhTdHJ9JHt0aW1lUmVnZXhTdHJ9JGA7XHJcbiAgICAgIH0gZWxzZSBpZiAod2l0aERhdGUpIHtcclxuICAgICAgICByZWdleFN0ciA9IGAke2RhdGVSZWdleFN0cn0kYDtcclxuICAgICAgfSBlbHNlIGlmICh3aXRoVGltZSkge1xyXG4gICAgICAgIHJlZ2V4U3RyID0gYF4ke3RpbWVSZWdleFN0ci5zbGljZSg0KX0kYDsgXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlOyBcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFN0cik7XHJcbiAgICAgIHJldHVybiByZWdleC50ZXN0KHN0cik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRyeSB0byBjb252ZXJ0IEFueSBUeXBlcyB0byBhIHNwZWNpZmljIFR5cGVcclxuICAgICAqIEBwYXJhbSBpbnB1dCBcclxuICAgICAqIEBwYXJhbSB0eXBlU3RyaW5nICdzdHJpbmcnIHwgJ251bWJlcicgfCAnYm9vbGVhbicgfCAnc3RyaW5nW10nXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgdHJ5Q29udmVydChpbnB1dDogYW55LCB0eXBlU3RyaW5nOiAnc3RyaW5nJyB8ICdudW1iZXInIHwgJ2Jvb2xlYW4nIHwgJ3N0cmluZ1tdJyk6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBzdHJpbmdbXSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgIHN3aXRjaCAodHlwZVN0cmluZykge1xyXG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIGNhc2UgJ251bWJlcic6XHJcbiAgICAgICAgICBjb25zdCBudW0gPSBOdW1iZXIoaW5wdXQpO1xyXG4gICAgICAgICAgaWYgKCFpc05hTihudW0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICBjb25zdCBsb3dlclZhbHVlID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICBpZiAobG93ZXJWYWx1ZSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYgKGxvd2VyVmFsdWUgPT09ICdmYWxzZScpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICBjYXNlICdzdHJpbmdbXSc6XHJcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkgJiYgaW5wdXQuZXZlcnkoaXRlbSA9PiB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgZm9ybWF0VG9ZQU1MU2F2ZVN0cmluZyh0ZXh0OnN0cmluZywgcmVwbGFjZUJ5OnN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCk6c3RyaW5nIHtcclxuICAgICAgbGV0IHJlcGxhY2VTdHJpbmcgPSAnLSc7XHJcbiAgICAgIGlmICghcmVwbGFjZUJ5ICYmIHRoaXMuc2V0dGluZ3MpIHtcclxuICAgICAgICByZXBsYWNlU3RyaW5nID0gdGhpcy5zZXR0aW5ncy5zcGVjaWFsQ2hhclJlcGxhY2VtZW50IHx8ICctJztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAocmVwbGFjZUJ5KSByZXBsYWNlU3RyaW5nID0gcmVwbGFjZUJ5O1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1teYS16QS1aMC05XFwtX1xcL1x1MDBFNFx1MDBGNlx1MDBGQ1x1MDBERlx1MDBDNFx1MDBENlx1MDBEQ1x1MDBFMVx1MDBFOVx1MDBFRFx1MDBGM1x1MDBGQVx1MDBGRFx1MDBDMVx1MDBDOVx1MDBDRFx1MDBEM1x1MDBEQVx1MDBERFx1MDBFMFx1MDBFOFx1MDBFQ1x1MDBGMlx1MDBGOVx1MDBDMFx1MDBDOFx1MDBDQ1x1MDBEMlx1MDBEOVx1MDBFMlx1MDBFQVx1MDBFRVx1MDBGNFx1MDBGQlx1MDBDMlx1MDBDQVx1MDBDRVx1MDBENFx1MDBEQlx1MDBFM1x1MDBGMVx1MDBGNVx1MDBDM1x1MDBEMVx1MDBENV0vZywgcmVwbGFjZVN0cmluZyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgYSBzdHJpbmcgdG8gYSBZQU1MLXNhZmUgZm9ybWF0IGJ5IGFkZGluZyBxdW90ZXMgd2hlbiBuZWNlc3NhcnkuXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgVGhlIHN0cmluZywgYm9vbGVhbiwgbnVtYmVyIG9yIGFycmF5IHRvIG1ha2UgWUFNTC1zYWZlXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgc2FmZWx5IHF1b3RlZCBzdHJpbmcgd2hlbiBuZWVkZWQsIG9yIHRoZSBvcmlnaW5hbCBzdHJpbmcgaWYgc2FmZVxyXG4gICAgICovXHJcbiAgICB0b1lhbWxTYWZlU3RyaW5nKGlucHV0OiBzdHJpbmd8bnVtYmVyfGJvb2xlYW58c3RyaW5nW10pOiBzdHJpbmd8bnVtYmVyfHN0cmluZ1tdIHtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgICAgaW5wdXQuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgIGlucHV0W2luZGV4XSA9IHRoaXMudG9ZYW1sU2FmZVN0cmluZyhpdGVtKS50b1N0cmluZygpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgICB9XHJcbiAgICAgIHN3aXRjaCAodHlwZW9mIGlucHV0KSB7XHJcbiAgICAgICAgY2FzZSAnbnVtYmVyJzogcmV0dXJuIGlucHV0O1xyXG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOiByZXR1cm4gaW5wdXQgPyAndHJ1ZScgOiAnZmFsc2UnO1xyXG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgICAgICAvLyBUcmltIHdoaXRlc3BhY2UgZmlyc3RcclxuICAgICAgICAgIGNvbnN0IHRyaW1tZWQgPSBpbnB1dC50cmltKCk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIEVtcHR5IHN0cmluZ3MgbmVlZCBxdW90ZXNcclxuICAgICAgICAgIGlmICh0cmltbWVkID09PSAnJykgcmV0dXJuICdcIlwiJztcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gQ2hlY2sgZm9yIHNwZWNpYWwgY2hhcmFjdGVycy9wYXR0ZXJucyB0aGF0IHJlcXVpcmUgcXVvdGluZ1xyXG4gICAgICAgICAgY29uc3QgbmVlZHNRdW90ZXMgPSAvWzp7fVxcW1xcXSwmKiM/fDw+PSElQGBcIidcXFxcXXxeWy0/XFxuXXxbXFxzXFxuXXxeW3lZbk5dfF5bMC05XXxeWystXXxeKHRydWV8ZmFsc2V8eWVzfG5vfG9ufG9mZikkL2kudGVzdCh0cmltbWVkKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHN0cmluZyBpcyBhbHJlYWR5IHByb3Blcmx5IHF1b3RlZFxyXG4gICAgICAgICAgY29uc3QgaXNBbHJlYWR5UXVvdGVkID0gKHRyaW1tZWQuc3RhcnRzV2l0aCgnXCInKSAmJiB0cmltbWVkLmVuZHNXaXRoKCdcIicpKSB8fCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodHJpbW1lZC5zdGFydHNXaXRoKFwiJ1wiKSAmJiB0cmltbWVkLmVuZHNXaXRoKFwiJ1wiKSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmICghbmVlZHNRdW90ZXMgJiYgIWlzQWxyZWFkeVF1b3RlZCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiB0cmltbWVkO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBJZiB3ZSBnZXQgaGVyZSwgd2UgbmVlZCBxdW90ZXNcclxuICAgICAgICAgIC8vIFVzZSBkb3VibGUgcXVvdGVzIGFuZCBlc2NhcGUgYW55IGV4aXN0aW5nIGRvdWJsZSBxdW90ZXNcclxuICAgICAgICAgIGlmICghaXNBbHJlYWR5UXVvdGVkKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGBcIiR7dHJpbW1lZC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJyl9XCJgO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBJZiBhbHJlYWR5IHF1b3RlZCwgcmV0dXJuIGFzLWlzXHJcbiAgICAgICAgICByZXR1cm4gdHJpbW1lZDtcclxuICAgICAgICBkZWZhdWx0OiBcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYHRvWWFtbFNhZmVTdHJpbmcoJHtpbnB1dH0pIGlmIG9mIHR5cGUgJyR7dHlwZW9mIGlucHV0fSdgKTtcclxuICAgICAgICAgIHJldHVybiBpbnB1dDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlcGxhY2VTcGFjZXModGV4dDpzdHJpbmcsIHJlcGxhY2VCeTpzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpOnN0cmluZyB7XHJcbiAgICAgIGxldCByZXBsYWNlU3RyaW5nID0gJ18nO1xyXG4gICAgICBpZiAoIXJlcGxhY2VCeSAmJiB0aGlzLnNldHRpbmdzKSB7XHJcbiAgICAgICAgcmVwbGFjZVN0cmluZyA9IHRoaXMuc2V0dGluZ3Muc3BhY2VSZXBsYWNlbWVudCB8fCAnXyc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHJlcGxhY2VCeSkgcmVwbGFjZVN0cmluZyA9IHJlcGxhY2VCeTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC9cXHMrL2csIHJlcGxhY2VTdHJpbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvcm1hdENhbWVsQ2FzZSh0ZXh0OnN0cmluZyk6c3RyaW5nIHtcclxuICAgICAgbGV0IHRleHRQYXJ0cyA9IHRleHQuc3BsaXQoJyAnKTtcclxuICAgICAgbGV0IGNvbnZlcnRlZFRleHRQYXJ0czpzdHJpbmdbXSA9IFtdO1xyXG4gICAgICB0ZXh0UGFydHMuZm9yRWFjaCgodGV4dCxpbmRleCkgPT4ge1xyXG4gICAgICAgIGxldCBuZXdUZXh0UGFydCA9IHRleHQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAoaW5kZXg+MCkgbmV3VGV4dFBhcnQgPSBuZXdUZXh0UGFydC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5ld1RleHRQYXJ0LnNsaWNlKDEpO1xyXG4gICAgICAgIGNvbnZlcnRlZFRleHRQYXJ0cy5wdXNoKG5ld1RleHRQYXJ0KTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBjb252ZXJ0ZWRUZXh0UGFydHMuam9pbignJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9ybWF0VXBwZXJDYW1lbENhc2UodGV4dDpzdHJpbmcpOnN0cmluZyB7XHJcbiAgICAgIGxldCB0ZXh0UGFydHMgPSB0ZXh0LnNwbGl0KCcgJyk7XHJcbiAgICAgIGxldCBjb252ZXJ0ZWRUZXh0UGFydHM6c3RyaW5nW10gPSBbXTtcclxuICAgICAgdGV4dFBhcnRzLmZvckVhY2goKHRleHQsaW5kZXgpID0+IHtcclxuICAgICAgICBsZXQgbmV3VGV4dFBhcnQgPSB0ZXh0LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgbmV3VGV4dFBhcnQgPSBuZXdUZXh0UGFydC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5ld1RleHRQYXJ0LnNsaWNlKDEpO1xyXG4gICAgICAgIGNvbnZlcnRlZFRleHRQYXJ0cy5wdXNoKG5ld1RleHRQYXJ0KTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBjb252ZXJ0ZWRUZXh0UGFydHMuam9pbignJyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGdldCB0aGUgcGF0aCB0byBhIGZpbGUgZnJvbSBhIHN0cmluZyBjb250YWluaW5nIHRoZSBmdWxsIHBhcmgvbmFtZSBzdHJpbmdcclxuICAgICAqIEBwYXJhbSBwYXRoIHN0cmluZ1xyXG4gICAgICogQHBhcmFtIHNlcGFyYXRvciBzdHJpbmcgZGVmYXVsdHMgdG8gJy8nXHJcbiAgICAgKiBAcmV0dXJucyBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgZ2V0Rm9sZGVyc0Zyb21QYXRoIChwYXRoOnN0cmluZ3xudWxsfHVuZGVmaW5lZCwgc2VwYXJhdG9yID0gJy8nKSB7XHJcbiAgICAgICAgaWYgKHBhdGggPT09IG51bGwpIHJldHVybiBudWxsO1xyXG4gICAgICAgIGlmIChwYXRoID09PSB1bmRlZmluZWQpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFBhdGhQYXJ0cyA9IHBhdGguc3BsaXQoJy8nKTtcclxuICAgICAgICBjdXJyZW50UGF0aFBhcnRzLnBvcCgpOyAvLyByZW1vdmUgRmlsZSBuYW1lO1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50UGF0aFBhcnRzLmpvaW4oc2VwYXJhdG9yKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiByZW1vdmVzIGR1cGxpY2F0ZSBzdHJpbmdzIGluIGFuIGFycmF5IGFuZCBkZWxldGVzIGVtcHR5IHN0cmluZ3NcclxuICAgICAqIEBwYXJhbSBzdHJpbmdBcnJheSBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICByZW1vdmVEdXBsaWNhdGVTdHJpbmdzKHN0cmluZ0FycmF5OiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgICAgaWYgKCFzdHJpbmdBcnJheSkgcmV0dXJuIFtdO1xyXG4gICAgICBjb25zdCB1bmlxdWVTdHJpbmdzU2V0ID0gbmV3IFNldDxzdHJpbmc+KHN0cmluZ0FycmF5KTtcclxuICAgICAgdW5pcXVlU3RyaW5nc1NldC5kZWxldGUoJycpOyAvLyByZW1vdmUgZW1wdHkgc3RyaW5nc1xyXG4gICAgICByZXR1cm4gWy4uLnVuaXF1ZVN0cmluZ3NTZXRdO1xyXG4gICAgfVxyXG4gIH0iLCAiaW1wb3J0IHsgQXBwLCByZW5kZXJSZXN1bHRzLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgcGFyc2VKU0NvZGUsIFNjcmlwdGluZ1Rvb2xzIH0gZnJvbSAnLi90b29scyc7XHJcbmltcG9ydCB7IE9ic2lkaWFuUHJvcGVydHlUeXBlcywgRm9sZGVyVGFnUnVsZURlZmluaXRpb24sIEZvbGRlclRhZ1NldHRpbmdzIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJ1bGVGdW5jdGlvbiB7XHJcbiAgICBpZDpzdHJpbmc7XHJcbiAgICBkZXNjcmlwdGlvbjpzdHJpbmc7XHJcbiAgICB0b29sdGlwPzogc3RyaW5nO1xyXG4gICAgaW5wdXRQcm9wZXJ0eT86IGJvb2xlYW47XHJcbiAgICBzb3VyY2U6c3RyaW5nO1xyXG4gICAgdHlwZTpPYnNpZGlhblByb3BlcnR5VHlwZXNbXTtcclxuICAgIGZ4OkZ1bmN0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcnVsZUZ1bmN0aW9uczpSdWxlRnVuY3Rpb25bXT1bXTtcclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJ1bGVGdW5jdGlvbkJ5SWQgKGlkIDogc3RyaW5nKTpSdWxlRnVuY3Rpb24gfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHJ1bGVGdW5jdGlvbnMuZmluZChydWxlID0+IHJ1bGUuaWQgPT09IGlkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXBwbHlGb3JtYXRPcHRpb25zKHZhbHVlOmFueSwgcnVsZTpGb2xkZXJUYWdSdWxlRGVmaW5pdGlvbik6YW55IHtcclxuICBpZiAocnVsZS50eXBlID09PSAnZGF0ZScgfHwgcnVsZS50eXBlID09PSAnZGF0ZXRpbWUnKSByZXR1cm4gdmFsdWU7IC8vIGxlYXZlIGRhdGUgYW5kIGRhdGVUaW1lIHVudG91Y2hlZFxyXG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XHJcbiAgICBjYXNlICdib29sZWFuJzpcclxuICAgIGNhc2UgJ251bWJlcic6XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgIGlmIChydWxlLnNwYWNlUmVwbGFjZW1lbnQgJiYgcnVsZS5zcGFjZVJlcGxhY2VtZW50ICE9PSAnJykgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXHMrL2csIHJ1bGUuc3BhY2VSZXBsYWNlbWVudCk7XHJcbiAgICAgIGlmIChydWxlLnNwZWNpYWxDaGFyUmVwbGFjZW1lbnQgJiYgcnVsZS5zcGVjaWFsQ2hhclJlcGxhY2VtZW50ICE9PScnKSB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1teYS16QS1aMC05XFwtX1xcL1x1MDBFNFx1MDBGNlx1MDBGQ1x1MDBERlx1MDBDNFx1MDBENlx1MDBEQ1x1MDBFMVx1MDBFOVx1MDBFRFx1MDBGM1x1MDBGQVx1MDBGRFx1MDBDMVx1MDBDOVx1MDBDRFx1MDBEM1x1MDBEQVx1MDBERFx1MDBFMFx1MDBFOFx1MDBFQ1x1MDBGMlx1MDBGOVx1MDBDMFx1MDBDOFx1MDBDQ1x1MDBEMlx1MDBEOVx1MDBFMlx1MDBFQVx1MDBFRVx1MDBGNFx1MDBGQlx1MDBDMlx1MDBDQVx1MDBDRVx1MDBENFx1MDBEQlx1MDBFM1x1MDBGMVx1MDBGNVx1MDBDM1x1MDBEMVx1MDBENV0vZywgcnVsZS5zcGVjaWFsQ2hhclJlcGxhY2VtZW50KTtcclxuICAgICAgaWYgKHJ1bGUubG93ZXJjYXNlVGFncykgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICBpZiAocnVsZS5wcmVmaXggJiYgcnVsZS5wcmVmaXggIT09ICcnKSB2YWx1ZSA9IHJ1bGUucHJlZml4ICsgdmFsdWU7XHJcbiAgICAgIGlmIChydWxlLmFzTGluaykgdmFsdWUgPSBgW1ske3ZhbHVlfV1dYDtcclxuICAgICAgcmV0dXJuIHZhbHVlXHJcbiAgICBjYXNlICdvYmplY3QnOlxyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUubWFwKHZhbHVlID0+IGFwcGx5Rm9ybWF0T3B0aW9ucyh2YWx1ZSwgcnVsZSkpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcbiAgcmV0dXJuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlUnVsZSAoYXBwLCBzZXR0aW5ncywgY3VycmVudEZpbGU6IFRGaWxlLCByZXR1cm5SZXN1bHQ6IGFueSwgcnVsZTpGb2xkZXJUYWdSdWxlRGVmaW5pdGlvbiwgZnJvbnRNYXR0ZXIsIG9sZFBhdGg/OnN0cmluZykge1xyXG4gIGlmICghcnVsZS5hY3RpdmUpIHJldHVybiByZXR1cm5SZXN1bHQ7XHJcbiAgY29uc3QgdG9vbHMgPSBuZXcgU2NyaXB0aW5nVG9vbHMoc2V0dGluZ3MsIGZyb250TWF0dGVyKTtcclxuICBsZXQgZnhSZXN1bHQ6YW55O1xyXG4gIGxldCBvbGRSZXN1bHQ6YW55O1xyXG4gIGxldCBvbGRGaWxlOlRGaWxlIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gIGlmIChvbGRQYXRoKSB7XHJcbiAgICBsZXQgb2xkRmlsZVBhcnRzID0gb2xkUGF0aC5zcGxpdCgnLycpO1xyXG4gICAgb2xkRmlsZSA9IHtcclxuICAgICAgcGF0aDogb2xkUGF0aCxcclxuICAgICAgZXh0ZW5zaW9uOiBvbGRGaWxlUGFydHNbb2xkRmlsZVBhcnRzLmxlbmd0aC0xXS5zcGxpdCgnLicpWzFdLFxyXG4gICAgICBuYW1lOiBvbGRGaWxlUGFydHNbb2xkRmlsZVBhcnRzLmxlbmd0aC0xXS5zcGxpdCgnLicpWzBdLFxyXG4gICAgICBzdGF0OiBjdXJyZW50RmlsZS5zdGF0LFxyXG4gICAgICBiYXNlbmFtZTogY3VycmVudEZpbGUuYmFzZW5hbWUsXHJcbiAgICAgIHZhdWx0OiBjdXJyZW50RmlsZS52YXVsdCxcclxuICAgICAgcGFyZW50OiBjdXJyZW50RmlsZS5wYXJlbnRcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKHJ1bGUuY29udGVudCA9PT0gJ3NjcmlwdCcpIHtcclxuICAgIGNvbnN0IHJ1bGVGdW5jdGlvbiA9IHBhcnNlSlNDb2RlKHJ1bGUuanNDb2RlKTtcclxuICAgIGlmICh0eXBlb2YgcnVsZUZ1bmN0aW9uICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XHJcbiAgICBmeFJlc3VsdCA9IGFwcGx5Rm9ybWF0T3B0aW9ucyhydWxlRnVuY3Rpb24oYXBwLCBjdXJyZW50RmlsZSwgdG9vbHMpLCBydWxlKTtcclxuICAgIGlmIChvbGRGaWxlKSB7XHJcbiAgICAgIG9sZFJlc3VsdCA9IGFwcGx5Rm9ybWF0T3B0aW9ucyhydWxlRnVuY3Rpb24oYXBwLCBvbGRGaWxlLCB0b29scyksIHJ1bGUpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGZ1bmN0aW9uSW5kZXggPSBydWxlRnVuY3Rpb25zLmZpbmRJbmRleChmeCA9PiBmeC5pZCA9PT0gcnVsZS5jb250ZW50KTtcclxuICAgICAgaWYgKGZ1bmN0aW9uSW5kZXghPT0tMSl7XHJcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKGBleGVjdXRlIHJ1bGUgZm9yICR7cnVsZS5wcm9wZXJ0eX0gJHtydWxlLmNvbnRlbnR9IGZvciBmaWxlICR7ZmlsZS5wYXRofWApO1xyXG4gICAgICAgICAgaWYgKHJ1bGVGdW5jdGlvbnNbZnVuY3Rpb25JbmRleF0uaW5wdXRQcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICBmeFJlc3VsdCA9IGFwcGx5Rm9ybWF0T3B0aW9ucyhydWxlRnVuY3Rpb25zW2Z1bmN0aW9uSW5kZXhdLmZ4KGFwcCwgY3VycmVudEZpbGUsIHRvb2xzLCBmcm9udE1hdHRlcltydWxlLmlucHV0UHJvcGVydHldKSwgcnVsZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmeFJlc3VsdCA9IGFwcGx5Rm9ybWF0T3B0aW9ucyhydWxlRnVuY3Rpb25zW2Z1bmN0aW9uSW5kZXhdLmZ4KGFwcCwgY3VycmVudEZpbGUsIHRvb2xzKSwgcnVsZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKHJ1bGUuY29udGVudCwgcnVsZUZ1bmN0aW9uc1tmdW5jdGlvbkluZGV4XSA/IGZ4UmVzdWx0IDogJycpO1xyXG4gICAgICAgICAgaWYgKG9sZEZpbGUpIHtcclxuICAgICAgICAgICAgICBpZiAocnVsZUZ1bmN0aW9uc1tmdW5jdGlvbkluZGV4XS5pbnB1dFByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICBvbGRSZXN1bHQgPSBhcHBseUZvcm1hdE9wdGlvbnMocnVsZUZ1bmN0aW9uc1tmdW5jdGlvbkluZGV4XS5meChhcHAsIG9sZEZpbGUsIHRvb2xzLCBmcm9udE1hdHRlcltydWxlLmlucHV0UHJvcGVydHldKSwgcnVsZSk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9sZFJlc3VsdCA9IGFwcGx5Rm9ybWF0T3B0aW9ucyhydWxlRnVuY3Rpb25zW2Z1bmN0aW9uSW5kZXhdLmZ4KGFwcCwgb2xkRmlsZSwgdG9vbHMpLCBydWxlKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH1cclxuICB9XHJcbiAgaWYgKHJ1bGUudHlwZSA9PT0gJ251bWJlcicgfHwgcnVsZS50eXBlID09PSAnY2hlY2tib3gnIHx8IHJ1bGUudHlwZSA9PT0gJ2RhdGUnIHx8IHJ1bGUudHlwZSA9PT0gJ2RhdGV0aW1lJykge1xyXG4gICAgICByZXR1cm4gZnhSZXN1bHQ7XHJcbiAgfVxyXG4gIHN3aXRjaCAocnVsZS5hZGRDb250ZW50KSB7XHJcbiAgICAgIGNhc2UgJ292ZXJ3cml0ZSc6XHJcbiAgICAgICAgICByZXR1cm5SZXN1bHQgPSBmeFJlc3VsdDsgLy8gdXBkYXRlIG9yIGFkZCB0aGUgbmV3IHZhbHVlXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnZW5kJzpcclxuICAgICAgICAgIGlmIChydWxlLnR5cGUgPT09ICdtdWx0aXRleHQnIHx8IHJ1bGUudHlwZSA9PT0gJ3RhZ3MnIHx8IHJ1bGUudHlwZSA9PT0gJ2FsaWFzZXMnKSB7XHJcbiAgICAgICAgICAgICAgaWYgKCFmeFJlc3VsdCkgZnhSZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ4UmVzdWx0ID09PSAnc3RyaW5nJykgZnhSZXN1bHQgPSBbZnhSZXN1bHRdOyAvLyBjb252ZXJ0IHN0cmluZyB0byBhcnJheSBcclxuICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmV0dXJuUmVzdWx0KSkgcmV0dXJuUmVzdWx0ID0gW3JldHVyblJlc3VsdF07XHJcbiAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG9sZFJlc3VsdCkpIG9sZFJlc3VsdCA9IFtvbGRSZXN1bHRdO1xyXG4gICAgICAgICAgICAgIGxldCBmaWx0ZXJlZCA9IHJldHVyblJlc3VsdC5maWx0ZXIoKHZhbHVlKSA9PiAhb2xkUmVzdWx0LmluY2x1ZGVzKHZhbHVlKSlcclxuICAgICAgICAgICAgICByZXR1cm5SZXN1bHQgPSB0b29scy5yZW1vdmVEdXBsaWNhdGVTdHJpbmdzKGZpbHRlcmVkLmNvbmNhdChmeFJlc3VsdCkpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBpZiAoIXJldHVyblJlc3VsdCkgcmV0dXJuUmVzdWx0ID0gJyc7XHJcbiAgICAgICAgICAgICAgcmV0dXJuUmVzdWx0ID0gcmV0dXJuUmVzdWx0LnJlcGxhY2VBbGwocmV0dXJuUmVzdWx0LG9sZFJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuUmVzdWx0ID0gcmV0dXJuUmVzdWx0ICsgZnhSZXN1bHQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnc3RhcnQnOlxyXG4gICAgICAgICAgaWYgKHJ1bGUudHlwZSA9PT0gJ211bHRpdGV4dCcgfHwgcnVsZS50eXBlID09PSAndGFncycgfHwgcnVsZS50eXBlID09PSAnYWxpYXNlcycpIHtcclxuICAgICAgICAgICAgICBpZiAoIWZ4UmVzdWx0KSBmeFJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZnhSZXN1bHQgPT09ICdzdHJpbmcnKSBmeFJlc3VsdCA9IFtmeFJlc3VsdF07IC8vIGNvbnZlcnQgc3RyaW5nIHRvIGFycmF5IFxyXG4gICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXR1cm5SZXN1bHQpKSByZXR1cm5SZXN1bHQgPSBbcmV0dXJuUmVzdWx0XTtcclxuICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkob2xkUmVzdWx0KSkgb2xkUmVzdWx0ID0gW29sZFJlc3VsdF07XHJcbiAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkID0gcmV0dXJuUmVzdWx0LmZpbHRlcigodmFsdWUpID0+ICFvbGRSZXN1bHQuaW5jbHVkZXModmFsdWUpKVxyXG4gICAgICAgICAgICAgIHJldHVyblJlc3VsdCA9IHRvb2xzLnJlbW92ZUR1cGxpY2F0ZVN0cmluZ3MoZnhSZXN1bHQuY29uY2F0KGZpbHRlcmVkKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGlmICghcmV0dXJuUmVzdWx0KSByZXR1cm5SZXN1bHQgPSAnJztcclxuICAgICAgICAgICAgICByZXR1cm5SZXN1bHQgPSByZXR1cm5SZXN1bHQucmVwbGFjZUFsbChyZXR1cm5SZXN1bHQsb2xkUmVzdWx0KTtcclxuICAgICAgICAgICAgICByZXR1cm5SZXN1bHQgPSBmeFJlc3VsdCArIHJldHVyblJlc3VsdDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gIH1cclxuICByZXR1cm4gcmV0dXJuUmVzdWx0O1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVJ1bGUgKGFwcCwgc2V0dGluZ3MsIGN1cnJlbnRGaWxlOiBURmlsZSwgcmV0dXJuUmVzdWx0OiBhbnksIHJ1bGU6Rm9sZGVyVGFnUnVsZURlZmluaXRpb24sIGZyb250TWF0dGVyKSB7XHJcbiAgY29uc3QgdG9vbHMgPSBuZXcgU2NyaXB0aW5nVG9vbHMoc2V0dGluZ3MpO1xyXG4gIGxldCBmeFJlc3VsdDphbnk7XHJcbiAgaWYgKHJ1bGUuY29udGVudCA9PT0gJ3NjcmlwdCcpIHtcclxuICAgICAgY29uc3QgcnVsZUZ1bmN0aW9uID0gcGFyc2VKU0NvZGUocnVsZS5qc0NvZGUpO1xyXG4gICAgICBpZiAodHlwZW9mIHJ1bGVGdW5jdGlvbiAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xyXG4gICAgICBmeFJlc3VsdCA9IHJ1bGVGdW5jdGlvbihhcHAsIGN1cnJlbnRGaWxlLCB0b29scyk7XHJcbiAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgZnVuY3Rpb25JbmRleCA9IHJ1bGVGdW5jdGlvbnMuZmluZEluZGV4KGZ4ID0+IGZ4LmlkID09PSBydWxlLmNvbnRlbnQpO1xyXG4gICAgICBpZiAoZnVuY3Rpb25JbmRleCE9PS0xKXtcclxuICAgICAgICAgIGlmIChydWxlRnVuY3Rpb25zW2Z1bmN0aW9uSW5kZXhdLmlucHV0UHJvcGVydHkpIHtcclxuICAgICAgICAgICAgZnhSZXN1bHQgPSBhcHBseUZvcm1hdE9wdGlvbnMocnVsZUZ1bmN0aW9uc1tmdW5jdGlvbkluZGV4XS5meChhcHAsIGN1cnJlbnRGaWxlLCB0b29scywgZnJvbnRNYXR0ZXJbcnVsZS5pbnB1dFByb3BlcnR5XSksIHJ1bGUpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZnhSZXN1bHQgPSBhcHBseUZvcm1hdE9wdGlvbnMocnVsZUZ1bmN0aW9uc1tmdW5jdGlvbkluZGV4XS5meChhcHAsIGN1cnJlbnRGaWxlLCB0b29scyksIHJ1bGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgfVxyXG4gIHN3aXRjaCAocnVsZS5hZGRDb250ZW50KSB7XHJcbiAgICAgIGNhc2UgJ292ZXJ3cml0ZSc6XHJcbiAgICAgICAgICByZXR1cm5SZXN1bHQgPSBmeFJlc3VsdDsgLy8gdXBkYXRlIG9yIGFkZCB0aGUgbmV3IHZhbHVlXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnZW5kJzpcclxuICAgICAgICAgIGlmIChydWxlLnR5cGUgPT09ICdtdWx0aXRleHQnIHx8IHJ1bGUudHlwZSA9PT0gJ3RhZ3MnIHx8IHJ1bGUudHlwZSA9PT0gJ2FsaWFzZXMnKSB7XHJcbiAgICAgICAgICAgICAgaWYgKCFmeFJlc3VsdCkgZnhSZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ4UmVzdWx0ID09PSAnc3RyaW5nJykgZnhSZXN1bHQgPSBbZnhSZXN1bHRdOyAvLyBjb252ZXJ0IHN0cmluZyB0byBhcnJheSBcclxuICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmV0dXJuUmVzdWx0KSkgcmV0dXJuUmVzdWx0ID0gW3JldHVyblJlc3VsdF07XHJcbiAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGZ4UmVzdWx0KSkgZnhSZXN1bHQgPSBbZnhSZXN1bHRdO1xyXG4gICAgICAgICAgICAgIGxldCBmaWx0ZXJlZCA9IHJldHVyblJlc3VsdC5maWx0ZXIoKHZhbHVlKSA9PiAhZnhSZXN1bHQuaW5jbHVkZXModmFsdWUpKVxyXG4gICAgICAgICAgICAgIHJldHVyblJlc3VsdCA9IHRvb2xzLnJlbW92ZUR1cGxpY2F0ZVN0cmluZ3MoZmlsdGVyZWQpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBpZiAoIXJldHVyblJlc3VsdCkgcmV0dXJuUmVzdWx0ID0gJyc7XHJcbiAgICAgICAgICAgICAgcmV0dXJuUmVzdWx0ID0gcmV0dXJuUmVzdWx0LnJlcGxhY2VBbGwocmV0dXJuUmVzdWx0LGZ4UmVzdWx0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdzdGFydCc6XHJcbiAgICAgICAgICBpZiAocnVsZS50eXBlID09PSAnbXVsdGl0ZXh0JyB8fCBydWxlLnR5cGUgPT09ICd0YWdzJyB8fCBydWxlLnR5cGUgPT09ICdhbGlhc2VzJykge1xyXG4gICAgICAgICAgICAgIGlmICghZnhSZXN1bHQpIGZ4UmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmeFJlc3VsdCA9PT0gJ3N0cmluZycpIGZ4UmVzdWx0ID0gW2Z4UmVzdWx0XTsgLy8gY29udmVydCBzdHJpbmcgdG8gYXJyYXkgXHJcbiAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJldHVyblJlc3VsdCkpIHJldHVyblJlc3VsdCA9IFtyZXR1cm5SZXN1bHRdO1xyXG4gICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShmeFJlc3VsdCkpIGZ4UmVzdWx0ID0gW2Z4UmVzdWx0XTtcclxuICAgICAgICAgICAgICBsZXQgZmlsdGVyZWQgPSByZXR1cm5SZXN1bHQuZmlsdGVyKCh2YWx1ZSkgPT4gIWZ4UmVzdWx0LmluY2x1ZGVzKHZhbHVlKSlcclxuICAgICAgICAgICAgICByZXR1cm5SZXN1bHQgPSB0b29scy5yZW1vdmVEdXBsaWNhdGVTdHJpbmdzKGZpbHRlcmVkKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgaWYgKCFyZXR1cm5SZXN1bHQpIHJldHVyblJlc3VsdCA9ICcnO1xyXG4gICAgICAgICAgICAgIHJldHVyblJlc3VsdCA9IHJldHVyblJlc3VsdC5yZXBsYWNlQWxsKHJldHVyblJlc3VsdCxmeFJlc3VsdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICB9XHJcbiAgcmV0dXJuIHJldHVyblJlc3VsdDtcclxuXHJcbn1cclxuXHJcbmNvbnN0ICB0b29scyA9IG5ldyBTY3JpcHRpbmdUb29scygpO1xyXG4gIC8qKlxyXG4gICAqIEZpbHRlcnMgYSBnaXZlbiBmaWxlIGFuZCByZXR1cm5zIHRydWUgaWYgaXQgaXMgaW5jbHVkZWQgaW4gYSBmb2xkZXIgb3IgZmlsZSBsaXN0XHJcbiAgICogQHBhcmFtIGZpbGUgXHJcbiAgICogQHBhcmFtIGZpbHRlck1vZGUgJ2V4Y2x1ZGUnfCdpbmNsdWRlJ1xyXG4gICAqIEBwYXJhbSB0eXBlICdmb2xkZXJzJ3wnZmlsZXMnXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJGaWxlKGZpbGU6IFRGaWxlLCBmaWxlTGlzdDogYW55LCBmaWx0ZXJNb2RlOiBzdHJpbmcsIHR5cGU6c3RyaW5nKTpib29sZWFuIHtcclxuICAgIGxldCByZXN1bHQgPSBmYWxzZTtcclxuICAgIGNvbnN0IGZpbHRlckFycmF5ID0gKHR5cGU9PT0nZm9sZGVycycpID8gZmlsZUxpc3RbZmlsdGVyTW9kZV0uc2VsZWN0ZWRGb2xkZXJzIDogZmlsZUxpc3RbZmlsdGVyTW9kZV0uc2VsZWN0ZWRGaWxlcztcclxuICAgIGlmIChmaWx0ZXJBcnJheS5sZW5ndGggPT09IDApIHJldHVybiAoZmlsdGVyTW9kZSA9PT0gJ2luY2x1ZGUnKT8gZmFsc2UgOiB0cnVlO1xyXG4gICAgY29uc3QgZmlsZVBhdGggPSBmaWxlLnBhdGg7XHJcbiAgICBjb25zdCBmaWxlRm9sZGVyID0gdG9vbHMuZ2V0Rm9sZGVyc0Zyb21QYXRoKGZpbGUucGF0aCk7XHJcbiAgICBjb25zdCBmaWxlTmFtZSA9IGZpbGUuYmFzZW5hbWUgKyAnLicgKyBmaWxlLmV4dGVuc2lvbjtcclxuICAgIFxyXG4gICAgaWYgKHR5cGUgPT09ICdmaWxlcycpIHtcclxuICAgICAgICByZXN1bHQgPSBmaWx0ZXJBcnJheS5pbmNsdWRlcyhmaWxlUGF0aCk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZSA9PT0gJ2ZvbGRlcnMnKSB7XHJcbiAgICAgICAgZmlsdGVyQXJyYXkuZm9yRWFjaChwYXRoID0+IHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gZmlsZUZvbGRlcj8uc3RhcnRzV2l0aChwYXRoLnNsaWNlKDEpKSB8fCBmYWxzZTsgLy8gcmVtb3ZlIHJvb3QgJy8nXHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHJldHVybjtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gKGZpbHRlck1vZGUgPT09ICdleGNsdWRlJyk/ICFyZXN1bHQgOiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja0lmRmlsZUFsbG93ZWQoZmlsZTogVEZpbGUsIHNldHRpbmdzPzpGb2xkZXJUYWdTZXR0aW5ncywgcnVsZT86Rm9sZGVyVGFnUnVsZURlZmluaXRpb24pOmJvb2xlYW4ge1xyXG4gICAgICBsZXQgcmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgIGlmICghZmlsZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBpZiAoc2V0dGluZ3MpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYGNoZWNrIGZpbGUgJHtmaWxlLnBhdGh9IGFnYWluc3Qgc2V0dGluZ3NgLCBzZXR0aW5ncy5pbmNsdWRlLCBzZXR0aW5ncy5leGNsdWRlKTtcclxuICAgICAgICAgIGlmIChzZXR0aW5ncy5pbmNsdWRlLnNlbGVjdGVkRmlsZXMubGVuZ3RoPjApIHsgLy8gdGhlcmUgYXJlIGZpbGVzIGluIHRoZSBpbmNsdWRlIGZpbGVzIGxpc3RcclxuICAgICAgICAgICAgICByZXN1bHQgPSBmaWx0ZXJGaWxlKGZpbGUsIHNldHRpbmdzLCAnaW5jbHVkZScsICdmaWxlcycpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHNldHRpbmdzLmluY2x1ZGUuc2VsZWN0ZWRGb2xkZXJzLmxlbmd0aD4wKSB7IC8vIHRoZXJlIGFyZSBmb2xkZXJzIGluIHRoZSBpbmNsdWRlIGZvbGRlcnMgbGlzdFxyXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGZpbHRlckZpbGUoZmlsZSwgc2V0dGluZ3MsICdpbmNsdWRlJywgJ2ZvbGRlcnMnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChzZXR0aW5ncy5leGNsdWRlLnNlbGVjdGVkRmlsZXMubGVuZ3RoPjApIHsgLy8gdGhlcmUgYXJlIGZpbGVzIGluIHRoZSBleGNsdWRlIGZpbGVzIGxpc3QuXHJcbiAgICAgICAgICAgICAgcmVzdWx0ID0gZmlsdGVyRmlsZShmaWxlLCBzZXR0aW5ncywgJ2V4Y2x1ZGUnLCAnZmlsZXMnKTtcclxuICAgICAgICAgIH0gICAgICAgIFxyXG4gICAgICAgICAgaWYgKHNldHRpbmdzLmV4Y2x1ZGUuc2VsZWN0ZWRGb2xkZXJzLmxlbmd0aD4wKSB7IC8vIHRoZXJlIGFyZSBmb2xkZXJzIGluIHRoZSBpbmNsdWRlIGZvbGRlcnMgbGlzdC5cclxuICAgICAgICAgICAgICByZXN1bHQgPSBmaWx0ZXJGaWxlKGZpbGUsIHNldHRpbmdzLCdleGNsdWRlJywgJ2ZvbGRlcnMnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmlsdGVyaW5nIGZpbGUgJHtmaWxlLnBhdGh9IGdsb2JhbGx5OiAke2Vycm9yfWApO1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBkZWZhdWx0IHRvIGZhbHNlIGlmIHRoZXJlIGlzIGFuIGVycm9yXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmKHJ1bGUpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYGNoZWNrIGZpbGUgJHtmaWxlLnBhdGh9IGFnYWluc3QgcnVsZWAsIHJ1bGUuaW5jbHVkZSwgcnVsZS5leGNsdWRlKTtcclxuICAgICAgICAgIGlmIChydWxlLmluY2x1ZGUuc2VsZWN0ZWRGaWxlcy5sZW5ndGg+MCkgeyAvLyB0aGVyZSBhcmUgZmlsZXMgaW4gdGhlIGluY2x1ZGUgZmlsZXMgbGlzdFxyXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGZpbHRlckZpbGUoZmlsZSwgcnVsZSwgJ2luY2x1ZGUnLCAnZmlsZXMnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChydWxlLmluY2x1ZGUuc2VsZWN0ZWRGb2xkZXJzLmxlbmd0aD4wKSB7IC8vIHRoZXJlIGFyZSBmb2xkZXJzIGluIHRoZSBpbmNsdWRlIGZvbGRlcnMgbGlzdFxyXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGZpbHRlckZpbGUoZmlsZSwgcnVsZSwgJ2luY2x1ZGUnLCAnZm9sZGVycycpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHJ1bGUuZXhjbHVkZS5zZWxlY3RlZEZpbGVzLmxlbmd0aD4wKSB7IC8vIHRoZXJlIGFyZSBmaWxlcyBpbiB0aGUgZXhjbHVkZSBmaWxlcyBsaXN0LlxyXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGZpbHRlckZpbGUoZmlsZSwgcnVsZSwgJ2V4Y2x1ZGUnLCAnZmlsZXMnKTtcclxuICAgICAgICAgIH0gICAgICAgIFxyXG4gICAgICAgICAgaWYgKHJ1bGUuZXhjbHVkZS5zZWxlY3RlZEZvbGRlcnMubGVuZ3RoPjApIHsgLy8gdGhlcmUgYXJlIGZvbGRlcnMgaW4gdGhlIGluY2x1ZGUgZm9sZGVycyBsaXN0LlxyXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGZpbHRlckZpbGUoZmlsZSwgcnVsZSwgJ2V4Y2x1ZGUnLCAnZm9sZGVycycpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBmaWx0ZXJpbmcgZmlsZSAke2ZpbGUucGF0aH0gYnkgcnVsZSAke3J1bGUucHJvcGVydHl9fCR7cnVsZS5jb250ZW50fTogJHtlcnJvcn1gKTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gZGVmYXVsdCB0byBmYWxzZSBpZiB0aGVyZSBpcyBhbiBlcnJvclxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5ydWxlRnVuY3Rpb25zLnB1c2goe1xyXG4gICAgaWQ6J2RlZmF1bHQnLFxyXG4gICAgZGVzY3JpcHRpb246ICdQYXNzIHBhcmFtZXRlcicsXHJcbiAgICBzb3VyY2U6IFwiZnVuY3Rpb24gKGFwcCwgZmlsZSwgdG9vbHMpIHsgLy8gZG8gbm90IGNoYW5nZSB0aGlzIGxpbmUhXFxuICBsZXQgcmVzdWx0ID0gJyc7XFxuICByZXR1cm4gcmVzdWx0O1xcbn1cIixcclxuICAgIHR5cGU6IFsndGV4dCddLFxyXG4gICAgZng6IGZ1bmN0aW9uIChhcHAsIGZpbGUsIHRvb2xzOlNjcmlwdGluZ1Rvb2xzKSB7IC8vIGRvIG5vdCBjaGFuZ2UgdGhpcyBsaW5lIVxyXG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9XHJcbn0pO1xyXG5cclxucnVsZUZ1bmN0aW9ucy5wdXNoKHtcclxuICBpZDonZnVsbFBhdGgnLFxyXG4gIGRlc2NyaXB0aW9uOiAnRnVsbCBwYXRoLCBmaWxlbmFtZScsXHJcbiAgc291cmNlOiBcImZ1bmN0aW9uIChhcHAsIGZpbGUsIHRvb2xzKSB7IC8vIGRvIG5vdCBjaGFuZ2UgdGhpcyBsaW5lIVxcbiAgLy8gYWNxdWlyZSBmaWxlIHBhdGhcXG4gIGNvbnN0IHBhdGggPSBmaWxlLnBhdGg7XFxuICBjb25zdCBwYXJ0cyA9IHBhdGguc3BsaXQoJy8nKTtcXG4gIGxldCByZXN1bHQgPSAnJztcXG4gIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XFxuICAgIHBhcnRzLnBvcCgpOyAvLyByZW1vdmUgZmlsZSBuYW1lXFxuICAgIHJlc3VsdCA9IHJlc3VsdCArIHBhcnRzLmpvaW4oJy8nKTtcXG4gIH1cXG4gIHJldHVybiByZXN1bHQ7XFxufVwiLFxyXG4gIHR5cGU6IFsndGV4dCcsICd0YWdzJywgJ2FsaWFzZXMnLCdtdWx0aXRleHQnXSxcclxuICBmeDpmdW5jdGlvbiAoYXBwOiBBcHAsIGZpbGU6VEZpbGUsIHRvb2xzOlNjcmlwdGluZ1Rvb2xzKXtcclxuICAgICAgbGV0IHBhcnRzID0gZmlsZS5wYXRoLnNwbGl0KCcvJyk7XHJcbiAgICAgIHBhcnRzLnBvcCgpO1xyXG4gICAgICBwYXJ0cy5wdXNoKGZpbGUuYmFzZW5hbWUpO1xyXG4gICAgICByZXR1cm4gcGFydHMuam9pbignLycpO1xyXG4gIH1cclxufSk7XHJcblxyXG5ydWxlRnVuY3Rpb25zLnB1c2goe1xyXG4gICAgaWQ6J2Z1bGxQYXRoRXh0JyxcclxuICAgIGRlc2NyaXB0aW9uOiAnRnVsbCBwYXRoLCBmaWxlbmFtZSBhbmQgRXh0ZW5zaW9uJyxcclxuICAgIHNvdXJjZTogXCJmdW5jdGlvbiAoYXBwLCBmaWxlLCB0b29scykgeyAvLyBkbyBub3QgY2hhbmdlIHRoaXMgbGluZSFcXG4gIC8vIGFjcXVpcmUgZmlsZSBwYXRoXFxuICBjb25zdCByZXN1bHQgPSBmaWxlLnBhdGg7XFxuICByZXR1cm4gcmVzdWx0O1xcbn1cIixcclxuICAgIHR5cGU6IFsndGV4dCcsICd0YWdzJywgJ2FsaWFzZXMnXSxcclxuICAgIGZ4OiBmdW5jdGlvbiAoYXBwOiBBcHAsIGZpbGU6VEZpbGUsIHRvb2xzOlNjcmlwdGluZ1Rvb2xzKXtcclxuICAgICAgICAgICAgcmV0dXJuIGAke2ZpbGUucGF0aH1gO1xyXG4gICAgICAgIH1cclxufSk7XHJcbi8qXHJcbnJ1bGVGdW5jdGlvbnMucHVzaCh7XHJcbiAgICBpZDonYWxpYXNGcm9tUGF0aCcsXHJcbiAgICBkZXNjcmlwdGlvbjogJ0FuIEFsaWFzIGZyb20gZXZlcnkgZm9sZGVyIG9mIHRoZSBmaWxlIFBhdGgnLFxyXG4gICAgc291cmNlOiBcImZ1bmN0aW9uIChhcHAsIGZpbGUsIHRvb2xzKSB7IC8vIGRvIG5vdCBjaGFuZ2UgdGhpcyBsaW5lIVxcbiAgLy8gYWNxdWlyZSBmaWxlIHBhdGhcXG4gIGxldCBwYXRoQXJyYXkgPSBmaWxlLnBhdGguc3BsaXQoJy8nKTtcXG4gIHBhdGhBcnJheS5wb3AoKTsgLy8gcmVtb3ZlIEZpbGUgbmFtZSB3aXRoIGV4dGVuc2lvblxcbiAgcGF0aEFycmF5ID0gcGF0aEFycmF5Lm1hcCgoZGlyKSA9PiB0b29scy5mb3JtYXRVcHBlckNhbWVsQ2FzZShkaXIpKTsgLy8gY29udmVydCB0byBVcHBlckNhbWVsQ2FzZVxcbiAgY29uc3QgZmlsZU5hbWVQYXJ0cyA9IGZpbGUubmFtZS5zcGxpdCgnLicpO1xcbiAgaWYgKGZpbGVOYW1lUGFydHMubGVuZ3RoID4gMSkge1xcbiAgICBmaWxlTmFtZVBhcnRzLnBvcCgpOyAvLyByZW1vdmUgRXh0ZW5zaW9uXFxuICB9XFxuICBjb25zdCBmaWxlTmFtZSA9IGZpbGVOYW1lUGFydHMuam9pbignLicpOyAvLyByZWJ1aWxkIGZpbGUgTmFtZVxcbiAgcGF0aEFycmF5LnB1c2godG9vbHMuZm9ybWF0VXBwZXJDYW1lbENhc2UoZmlsZU5hbWUpKTsgLy8gYWRkIGZpbGUgbmFtZSB3aXRob3V0IGV4dGVuc2lvbiBhbmQgaW4gVXBwZXJDYW1lbENhc2VcXG4gIGNvbnN0IHJlc3VsdCA9IHBhdGhBcnJheS5qb2luKCcuJykgfHwgJyc7XFxuICByZXR1cm4gcmVzdWx0O1xcbn1cIixcclxuICAgIHR5cGU6IFsnYWxpYXNlcyddLFxyXG4gICAgZng6IGZ1bmN0aW9uIChhcHAsIGZpbGUsIHRvb2xzOlNjcmlwdGluZ1Rvb2xzKSB7IC8vIGRvIG5vdCBjaGFuZ2UgdGhpcyBsaW5lIVxyXG4gICAgICAgICAgICAvLyBhY3F1aXJlIGZpbGUgcGF0aFxyXG4gICAgICAgICAgICBsZXQgcGF0aEFycmF5ID0gZmlsZS5wYXRoLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgICAgIHBhdGhBcnJheS5wb3AoKTsgLy8gcmVtb3ZlIEZpbGUgbmFtZSB3aXRoIGV4dGVuc2lvblxyXG4gICAgICAgICAgICBwYXRoQXJyYXkgPSBwYXRoQXJyYXkubWFwKChkaXIpID0+IHRvb2xzLmZvcm1hdFVwcGVyQ2FtZWxDYXNlKGRpcikpOyAvLyBjb252ZXJ0IHRvIHVwcGVyIGNhbWVsQ2FzZVxyXG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZVBhcnRzID0gZmlsZS5uYW1lLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgIGlmIChmaWxlTmFtZVBhcnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgZmlsZU5hbWVQYXJ0cy5wb3AoKTsgLy8gcmVtb3ZlIEV4dGVuc2lvblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gZmlsZU5hbWVQYXJ0cy5qb2luKCcuJyk7IC8vIHJlYnVpbGQgZmlsZSBOYW1lXHJcbiAgICAgICAgICAgIHBhdGhBcnJheS5wdXNoKHRvb2xzLmZvcm1hdFVwcGVyQ2FtZWxDYXNlKGZpbGVOYW1lKSk7IC8vIGFkZCBmaWxlIG5hbWUgd2l0aG91dCBleHRlbnNpb24gYW5kIGluIHVwcGVyQ2FtZWxDYXNlXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHBhdGhBcnJheS5qb2luKCcuJykgfHwgJyc7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG59KTtcclxuKi9cclxucnVsZUZ1bmN0aW9ucy5wdXNoKHtcclxuICAgIGlkOidwYXRoJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnRnVsbCBQYXRoJyxcclxuICAgIHNvdXJjZTogXCJmdW5jdGlvbiAoYXBwLCBmaWxlLCB0b29scykgeyAvLyBkbyBub3QgY2hhbmdlIHRoaXMgbGluZSFcXG4gIC8vIGFjcXVpcmUgZmlsZSBwYXRoXFxuICBjb25zdCBwYXRoID0gZmlsZS5wYXRoO1xcbiAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcvJyk7XFxuICBsZXQgcmVzdWx0ID0gJyc7XFxuICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xcbiAgICBwYXJ0cy5wb3AoKTsgLy8gcmVtb3ZlIGZpbGUgbmFtZVxcbiAgICByZXN1bHQgPSByZXN1bHQgKyBwYXJ0cy5qb2luKCcvJyk7XFxuICB9XFxuICByZXR1cm4gcmVzdWx0O1xcbn1cIixcclxuICAgIHR5cGU6IFsndGV4dCcsICd0YWdzJywgJ2FsaWFzZXMnXSxcclxuICAgIGZ4OmZ1bmN0aW9uIChhcHA6IEFwcCwgZmlsZTpURmlsZSwgdG9vbHM6U2NyaXB0aW5nVG9vbHMpe1xyXG4gICAgICAgIGxldCBwYXJ0cyA9IGZpbGUucGF0aC5zcGxpdCgnLycpO1xyXG4gICAgICAgIHBhcnRzLnBvcCgpO1xyXG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcvJyk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxucnVsZUZ1bmN0aW9ucy5wdXNoKHtcclxuICAgIGlkOidsaW5rVG9GaWxlJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnTGluayB0byBmaWxlJyxcclxuICAgIHNvdXJjZTogXCJmdW5jdGlvbiAoYXBwLCBmaWxlLCB0b29scykgeyAvLyBkbyBub3QgY2hhbmdlIHRoaXMgbGluZSFcXG4gIC8vIGFjcXVpcmUgZmlsZSBwYXRoXFxuICBjb25zdCBwYXRoID0gZmlsZS5wYXRoO1xcbiAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcvJyk7XFxuICBsZXQgcmVzdWx0ID0gJyc7XFxuICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xcbiAgICBwYXJ0cy5wb3AoKTsgLy8gcmVtb3ZlIGZpbGUgbmFtZVxcbiAgICByZXN1bHQgPSByZXN1bHQgKyBwYXJ0cy5qb2luKCcvJyk7XFxuICB9XFxuICByZXR1cm4gcmVzdWx0O1xcbn1cIixcclxuICAgIHR5cGU6IFsndGV4dCcsICd0YWdzJywgJ2FsaWFzZXMnLCdtdWx0aXRleHQnXSxcclxuICAgIGZ4OmZ1bmN0aW9uIChhcHA6IEFwcCwgZmlsZTpURmlsZSwgdG9vbHM6U2NyaXB0aW5nVG9vbHMpe1xyXG4gICAgICAgIGxldCBwYXJ0cyA9IGZpbGUucGF0aC5zcGxpdCgnLycpO1xyXG4gICAgICAgIHBhcnRzLnBvcCgpO1xyXG4gICAgICAgIGlmIChwYXJ0c1twYXJ0cy5sZW5ndGgtMV0gPT09IGZpbGUuYmFzZW5hbWUpIHBhcnRzLnBvcCgpO1xyXG4gICAgICAgIHJldHVybiBgW1ske3BhcnRzLmpvaW4oJy8nKX0vJHtmaWxlLmJhc2VuYW1lfXwke2ZpbGUuYmFzZW5hbWV9XV1gO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbnJ1bGVGdW5jdGlvbnMucHVzaCh7XHJcbiAgICBpZDoncGF0aEZvbGRlck5vdGVzJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnUGF0aCAoZm9sZGVyIG5vdGVzKScsXHJcbiAgICBzb3VyY2U6IFwiZnVuY3Rpb24gKGFwcCwgZmlsZSwgdG9vbHMpIHsgLy8gZG8gbm90IGNoYW5nZSB0aGlzIGxpbmUhXFxuICAvLyBhY3F1aXJlIGZpbGUgcGF0aFxcbiAgY29uc3QgcGF0aCA9IGZpbGUucGF0aDtcXG4gIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnLycpO1xcbiAgbGV0IHJlc3VsdCA9ICcnO1xcbiAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcXG4gICAgcGFydHMucG9wKCk7IC8vIHJlbW92ZSBmaWxlIG5hbWVcXG4gICAgcmVzdWx0ID0gcmVzdWx0ICsgcGFydHMuam9pbignLycpO1xcbiAgfVxcbiAgcmV0dXJuIHJlc3VsdDtcXG59XCIsXHJcbiAgICB0eXBlOiBbJ3RleHQnLCAndGFncycsICdhbGlhc2VzJywnbXVsdGl0ZXh0J10sXHJcbiAgICBmeDpmdW5jdGlvbiAoYXBwOiBBcHAsIGZpbGU6VEZpbGUsIHRvb2xzOlNjcmlwdGluZ1Rvb2xzKXtcclxuICAgICAgICBsZXQgcGFydHMgPSBmaWxlLnBhdGguc3BsaXQoJy8nKTtcclxuICAgICAgICBwYXJ0cy5wb3AoKTtcclxuICAgICAgICBpZiAocGFydHNbcGFydHMubGVuZ3RoLTFdID09PSBmaWxlLmJhc2VuYW1lKSBwYXJ0cy5wb3AoKTsgLy8gcmVtb3ZlIHBhcmVudCBmb2xkZXIgaWYgc2FtZSBuYW1lIGFzIHRoZSBmaWxlXHJcbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJy8nKTtcclxuICAgIH1cclxufSk7XHJcblxyXG5ydWxlRnVuY3Rpb25zLnB1c2goe1xyXG4gIGlkOidmdWxsUGF0aEZvbGRlck5vdGVzJyxcclxuICBkZXNjcmlwdGlvbjogJ0Z1bGwgUGF0aCAoY29tcGx5IHdpdGggXCJmb2xkZXIgbm90ZXNcIiknLFxyXG4gIHNvdXJjZTogXCJmdW5jdGlvbiAoYXBwLCBmaWxlLCB0b29scykgeyAvLyBkbyBub3QgY2hhbmdlIHRoaXMgbGluZSFcXG4gIC8vIGFjcXVpcmUgZmlsZSBwYXRoXFxuICBjb25zdCBwYXRoID0gZmlsZS5wYXRoO1xcbiAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcvJyk7XFxuICBsZXQgcmVzdWx0ID0gJyc7XFxuICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xcbiAgICBwYXJ0cy5wb3AoKTsgLy8gcmVtb3ZlIGZpbGUgbmFtZVxcbiAgICByZXN1bHQgPSByZXN1bHQgKyBwYXJ0cy5qb2luKCcvJyk7XFxuICB9XFxuICByZXR1cm4gcmVzdWx0O1xcbn1cIixcclxuICB0eXBlOiBbJ3RleHQnLCAndGFncycsICdhbGlhc2VzJ10sXHJcbiAgZng6ZnVuY3Rpb24gKGFwcDogQXBwLCBmaWxlOlRGaWxlLCB0b29sczpTY3JpcHRpbmdUb29scyl7XHJcbiAgICAgIGxldCBwYXJ0cyA9IGZpbGUucGF0aC5zcGxpdCgnLycpO1xyXG4gICAgICBwYXJ0cy5wb3AoKTsgLy8gcmVtb3ZlIGZpbGUgbmFtZVxyXG4gICAgICBpZiAocGFydHNbcGFydHMubGVuZ3RoLTFdID09PSBmaWxlLmJhc2VuYW1lKSBwYXJ0cy5wb3AoKTsgLy8gcmVtb3ZlIHBhcmVudCBmb2xkZXIgaWYgc2FtZSBuYW1lIGFzIHRoZSBmaWxlXHJcbiAgICAgIHBhcnRzLnB1c2goZmlsZS5iYXNlbmFtZSk7IC8vIGFkZCB0aGUgZmlsZSBuYW1lIGJhY2tcclxuICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJy8nKTtcclxuICB9XHJcbn0pO1xyXG5cclxucnVsZUZ1bmN0aW9ucy5wdXNoKHtcclxuICAgIGlkOidmdWxsUGF0aEV4dEZvbGRlck5vdGVzJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnRnVsbCBQYXRoIHdpdGggRXh0ZW5zaW9uIChjb21wbHkgd2l0aCBcImZvbGRlciBub3Rlc1wiKScsXHJcbiAgICBzb3VyY2U6IFwiZnVuY3Rpb24gKGFwcCwgZmlsZSwgdG9vbHMpIHsgLy8gZG8gbm90IGNoYW5nZSB0aGlzIGxpbmUhXFxuICAvLyBhY3F1aXJlIGZpbGUgcGF0aFxcbiAgY29uc3QgcGF0aCA9IGZpbGUucGF0aDtcXG4gIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnLycpO1xcbiAgbGV0IHJlc3VsdCA9ICcnO1xcbiAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcXG4gICAgcGFydHMucG9wKCk7IC8vIHJlbW92ZSBmaWxlIG5hbWVcXG4gICAgcmVzdWx0ID0gcmVzdWx0ICsgcGFydHMuam9pbignLycpO1xcbiAgfVxcbiAgcmV0dXJuIHJlc3VsdDtcXG59XCIsXHJcbiAgICB0eXBlOiBbJ3RleHQnLCAndGFncycsICdhbGlhc2VzJ10sXHJcbiAgICBmeDpmdW5jdGlvbiAoYXBwOiBBcHAsIGZpbGU6VEZpbGUsIHRvb2xzOlNjcmlwdGluZ1Rvb2xzKXtcclxuICAgICAgICBsZXQgcGFydHMgPSBmaWxlLnBhdGguc3BsaXQoJy8nKTtcclxuICAgICAgICBwYXJ0cy5wb3AoKTsgLy8gcmVtb3ZlIGZpbGUgbmFtZVxyXG4gICAgICAgIGlmIChwYXJ0c1twYXJ0cy5sZW5ndGgtMV0gPT09IGZpbGUuYmFzZW5hbWUpIHBhcnRzLnBvcCgpOyAvLyByZW1vdmUgcGFyZW50IGZvbGRlciBpZiBzYW1lIG5hbWUgYXMgdGhlIGZpbGVcclxuICAgICAgICBwYXJ0cy5wdXNoKGZpbGUubmFtZSk7IC8vIGFkZCB0aGUgZmlsZSBuYW1lIGJhY2tcclxuICAgICAgICByZXR1cm4gcGFydHMuam9pbignLycpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbnJ1bGVGdW5jdGlvbnMucHVzaCh7XHJcbiAgICBpZDonaXNSb290JyxcclxuICAgIGRlc2NyaXB0aW9uOiAnRmlsZSBpbiBSb290IGZvbGRlcicsXHJcbiAgICBzb3VyY2U6IFwiZnVuY3Rpb24gKGFwcCwgZmlsZSwgdG9vbHMpIHsgLy8gZG8gbm90IGNoYW5nZSB0aGlzIGxpbmUhXFxuICBsZXQgcGFydHMgPSBmaWxlLnBhdGguc3BsaXQoJy8nKTtcXG4gIHJldHVybiBwYXJ0cy5sZW5ndGggPT09IDE7XFxufVwiLFxyXG4gICAgdHlwZTogWydjaGVja2JveCddLFxyXG4gICAgZng6ZnVuY3Rpb24gKGFwcDogQXBwLCBmaWxlOlRGaWxlLCB0b29sczpTY3JpcHRpbmdUb29scyl7XHJcbiAgICAgICAgbGV0IHBhcnRzID0gZmlsZS5wYXRoLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnRzLmxlbmd0aCA9PT0gMTtcclxuICAgIH1cclxufSk7XHJcblxyXG5ydWxlRnVuY3Rpb25zLnB1c2goe1xyXG4gICAgaWQ6J2ZvbGRlcicsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1BhcmVudCBGb2xkZXInLFxyXG4gICAgc291cmNlOiBcImZ1bmN0aW9uIChhcHAsIGZpbGUsIHRvb2xzKSB7IC8vIGRvIG5vdCBjaGFuZ2UgdGhpcyBsaW5lIVxcbiAgLy8gYWNxdWlyZSBmaWxlIHBhdGhcXG4gIGNvbnN0IHBhdGggPSBmaWxlLnBhdGg7XFxuICBjb25zdCBwYXJ0cyA9IHBhdGguc3BsaXQoJy8nKTtcXG4gIGxldCByZXN1bHQgPSAnJztcXG4gIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XFxuICAgIHJlc3VsdCA9IHBhcnRzW3BhcnRzLmxlbmd0aC0yXTtcXG4gIH1cXG4gIHJldHVybiByZXN1bHQ7XFxufVwiLFxyXG4gICAgdHlwZTogWyd0ZXh0JywgJ3RhZ3MnXSxcclxuICAgIGZ4OmZ1bmN0aW9uIChhcHAsIGZpbGUsIHRvb2xzOlNjcmlwdGluZ1Rvb2xzKSB7IC8vIGRvIG5vdCBjaGFuZ2UgdGhpcyBsaW5lIVxyXG4gICAgICAgIC8vIGFjcXVpcmUgZmlsZSBwYXRoXHJcbiAgICAgICAgY29uc3QgcGF0aCA9IGZpbGUucGF0aDtcclxuICAgICAgICBjb25zdCBwYXJ0cyA9IHBhdGguc3BsaXQoJy8nKTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XHJcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgIHJlc3VsdCA9IHBhcnRzW3BhcnRzLmxlbmd0aC0yXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgfVxyXG59KTtcclxuXHJcbnJ1bGVGdW5jdGlvbnMucHVzaCh7XHJcbiAgICBpZDonZm9sZGVycycsXHJcbiAgICBkZXNjcmlwdGlvbjogJ0FsbCBmb2xkZXJzIG9mIHRoZSBmaWxlIGFzIGEgbGlzdCcsXHJcbiAgICBzb3VyY2U6IFwiZnVuY3Rpb24gKGFwcCwgZmlsZSwgdG9vbHMpIHsgLy8gZG8gbm90IGNoYW5nZSB0aGlzIGxpbmUhXFxuICBjb25zdCBwYXRoID0gZmlsZS5wYXRoOyAvLyBhY3F1aXJlIGZpbGUgcGF0aFxcbiAgY29uc3QgcmVzdWx0ID0gcGF0aC5zcGxpdCgnLycpO1xcbiAgcmVzdWx0LnBvcCgpOyAvLyByZW1vdmUgZmlsZSBuYW1lXFxuICByZXR1cm4gcmVzdWx0O1xcbn1cIixcclxuICAgIHR5cGU6IFsnbXVsdGl0ZXh0JywndGFncycsJ2FsaWFzZXMnXSxcclxuICAgIGZ4OmZ1bmN0aW9uIChhcHAsIGZpbGUsIHRvb2xzOlNjcmlwdGluZ1Rvb2xzKSB7IC8vIGRvIG5vdCBjaGFuZ2UgdGhpcyBsaW5lIVxyXG4gICAgICAgIC8vIGFjcXVpcmUgZmlsZSBwYXRoXHJcbiAgICAgICAgY29uc3QgcGF0aCA9IGZpbGUucGF0aDtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBwYXRoLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgcmVzdWx0LnBvcCgpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgIH1cclxufSk7XHJcblxyXG5ydWxlRnVuY3Rpb25zLnB1c2goe1xyXG4gICAgaWQ6J3Jvb3RGb2xkZXInLFxyXG4gICAgZGVzY3JpcHRpb246ICdSb290IGZvbGRlcicsXHJcbiAgICBzb3VyY2U6IFwiZnVuY3Rpb24gKGFwcCwgZmlsZSwgdG9vbHMpIHsgLy8gZG8gbm90IGNoYW5nZSB0aGlzIGxpbmUhXFxuICAvLyBhY3F1aXJlIGZpbGUgcGF0aFxcbiAgY29uc3QgcGF0aCA9IGZpbGUucGF0aDtcXG4gIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnLycpO1xcbiAgbGV0IHJlc3VsdCA9ICcnO1xcbiAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcXG4gICAgcmVzdWx0ID0gcGFydHNbMF07XFxuICB9XFxuICByZXR1cm4gcmVzdWx0O1xcbn1cIixcclxuICAgIHR5cGU6IFsndGV4dCcsICd0YWdzJywgJ2FsaWFzZXMnXSxcclxuICAgIGZ4OmZ1bmN0aW9uIChhcHAsIGZpbGUsIHRvb2xzOlNjcmlwdGluZ1Rvb2xzKSB7IC8vIGRvIG5vdCBjaGFuZ2UgdGhpcyBsaW5lIVxyXG4gICAgICAgIC8vIGFjcXVpcmUgZmlsZSBwYXRoXHJcbiAgICAgICAgY29uc3QgcGF0aCA9IGZpbGUucGF0aDtcclxuICAgICAgICBjb25zdCBwYXJ0cyA9IHBhdGguc3BsaXQoJy8nKTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XHJcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgIHJlc3VsdCA9IHBhcnRzWzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9XHJcbn0pO1xyXG5cclxucnVsZUZ1bmN0aW9ucy5wdXNoKHtcclxuICAgIGlkOiduYW1lJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnRmlsZSBuYW1lIHdpdGhvdXQgZXh0ZW5zaW9uJyxcclxuICAgIHNvdXJjZTogXCJmdW5jdGlvbiAoYXBwLCBmaWxlLCB0b29scykgeyAvLyBkbyBub3QgY2hhbmdlIHRoaXMgbGluZSFcXG4gIC8vIGFjcXVpcmUgZmlsZSBuYW1lXFxuICBjb25zdCByZXN1bHQgPSBmaWxlLm5hbWUuc3BsaXQoJy4nKTtcXG4gIHJlc3VsdC5wb3AoKTsgLy8gcmVtb3ZlIGV4dGVuc2lvblxcbiAgcmVzdWx0LmpvaW4oJy4nKTsgLy8gcmVjb25zdHJ1Y3QgdGhlIGZpbGUgbmFtZVxcbiAgcmV0dXJuIHJlc3VsdDtcXG59XCIsXHJcbiAgICB0eXBlOiBbJ3RleHQnLCAndGFncycsICdhbGlhc2VzJ10sXHJcbiAgICBmeDpmdW5jdGlvbiAoYXBwLCBmaWxlLCB0b29sczpTY3JpcHRpbmdUb29scykgeyAvLyBkbyBub3QgY2hhbmdlIHRoaXMgbGluZSFcclxuICAgICAgICAvLyBhY3F1aXJlIGZpbGUgbmFtZVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZpbGUubmFtZS5zcGxpdCgnLicpO1xyXG4gICAgICAgIHJlc3VsdC5wb3AoKTsgLy8gcmVtb3ZlIGV4dGVuc2lvblxyXG4gICAgICAgIHJlc3VsdC5qb2luKCcuJyk7IC8vIHJlY29uc3RydWN0IHRoZSBmaWxlIG5hbWVcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9XHJcbn0pO1xyXG5cclxucnVsZUZ1bmN0aW9ucy5wdXNoKHtcclxuICAgIGlkOiduYW1lRXh0JyxcclxuICAgIGRlc2NyaXB0aW9uOiAnRmlsZSBuYW1lIHdpdGggZXh0ZW5zaW9uJyxcclxuICAgIHNvdXJjZTogXCJmdW5jdGlvbiAoYXBwLCBmaWxlLCB0b29scykgeyAvLyBkbyBub3QgY2hhbmdlIHRoaXMgbGluZSFcXG4gIC8vIGFjcXVpcmUgZmlsZSBuYW1lXFxuICBjb25zdCByZXN1bHQgPSBmaWxlLm5hbWU7XFxuICByZXR1cm4gcmVzdWx0O1xcbn1cIixcclxuICAgIHR5cGU6IFsndGV4dCcsICd0YWdzJywgJ2FsaWFzZXMnXSxcclxuICAgIGZ4OmZ1bmN0aW9uIChhcHAsIGZpbGUsIHRvb2xzOlNjcmlwdGluZ1Rvb2xzKSB7IC8vIGRvIG5vdCBjaGFuZ2UgdGhpcyBsaW5lIVxyXG4gICAgICAgIC8vIGFjcXVpcmUgZmlsZSBuYW1lXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZmlsZS5uYW1lO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgIH1cclxufSk7XHJcblxyXG5ydWxlRnVuY3Rpb25zLnB1c2goe1xyXG4gICAgaWQ6J2dldFByb3BlcnR5JyxcclxuICAgIGRlc2NyaXB0aW9uOiAnR2V0IGEgcHJvcGVydHknLFxyXG4gICAgaW5wdXRQcm9wZXJ0eTogdHJ1ZSxcclxuICAgIHNvdXJjZTogXCJmdW5jdGlvbiAoYXBwLCBmaWxlLCB0b29scykgeyAvLyBkbyBub3QgY2hhbmdlIHRoaXMgbGluZSFcXG4gIGNvbnN0IHJlc3VsdCA9IGlucHV0O1xcbiAgcmV0dXJuIHJlc3VsdDtcXG59XCIsXHJcbiAgICB0eXBlOiBbJ3RleHQnLCAnbXVsdGl0ZXh0JywgJ3RhZ3MnLCAnYWxpYXNlcyddLFxyXG4gICAgZng6ZnVuY3Rpb24gKGFwcCwgZmlsZSwgdG9vbHM6U2NyaXB0aW5nVG9vbHMsIGlucHV0PykgeyAvLyBkbyBub3QgY2hhbmdlIHRoaXMgbGluZSFcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBpbnB1dDtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9XHJcbn0pO1xyXG5cclxucnVsZUZ1bmN0aW9ucy5wdXNoKHtcclxuICAgIGlkOidkYXRlVGltZUNyZWF0ZWQnLFxyXG4gICAgZGVzY3JpcHRpb246ICdEYXRlIChhbmQgVGltZSkgY3JlYXRlZCcsXHJcbiAgICBzb3VyY2U6IFwiZnVuY3Rpb24gKGFwcCwgZmlsZSwgdG9vbHMpIHsgLy8gZG8gbm90IGNoYW5nZSB0aGlzIGxpbmUhXFxuICBjb25zdCB0aW1lT2Zmc2V0ID0gbmV3IERhdGUoRGF0ZS5ub3coKSkuZ2V0VGltZXpvbmVPZmZzZXQoKSo2MDAwMDsgLy8gZ2V0IGxvY2FsIHRpbWUgb2Zmc2V0XFxuICBjb25zdCByZXN1bHQgPSBuZXcgRGF0ZShmaWxlLnN0YXQuY3RpbWUtdGltZU9mZnNldCk7XFxuICByZXR1cm4gcmVzdWx0LnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1onKVswXTsgLy8gcmVtb3ZlIFVUQyBzeW1ib2xcXG59XCIsXHJcbiAgICB0eXBlOiBbJ2RhdGUnLCAnZGF0ZXRpbWUnXSxcclxuICAgIGZ4OmZ1bmN0aW9uIChhcHA6IEFwcCwgZmlsZTpURmlsZSwgdG9vbHM6U2NyaXB0aW5nVG9vbHMpIHsgXHJcbiAgICAgICAgY29uc3QgdGltZU9mZnNldCA9IG5ldyBEYXRlKERhdGUubm93KCkpLmdldFRpbWV6b25lT2Zmc2V0KCkqNjAwMDA7IC8vIGdldCBsb2NhbCB0aW1lIG9mZnNldFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBEYXRlKGZpbGUuc3RhdC5jdGltZS10aW1lT2Zmc2V0KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0LnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1onKVswXTsgLy8gcmVtb3ZlIFVUQyBzeW1ib2xcclxuICAgICAgfVxyXG59KTtcclxuXHJcbnJ1bGVGdW5jdGlvbnMucHVzaCh7XHJcbiAgICBpZDonZGF0ZVRpbWVNb2RpZmllZCcsXHJcbiAgICBkZXNjcmlwdGlvbjogJ0RhdGUgKGFuZCBUaW1lKSBtb2RpZmllZCcsXHJcbiAgICBzb3VyY2U6IFwiZnVuY3Rpb24gKGFwcCwgZmlsZSwgdG9vbHMpIHsgLy8gZG8gbm90IGNoYW5nZSB0aGlzIGxpbmUhXFxuICBjb25zdCB0aW1lT2Zmc2V0ID0gbmV3IERhdGUoRGF0ZS5ub3coKSkuZ2V0VGltZXpvbmVPZmZzZXQoKSo2MDAwMDtcXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBEYXRlKGZpbGUuc3RhdC5tdGltZS10aW1lT2Zmc2V0KTsgLy8gQXBwbHkgb2Zmc2V0IHRvIEdNVCBUaW1lc3RhbXBcXG4gIHJldHVybiByZXN1bHQudG9JU09TdHJpbmcoKS5zcGxpdCgnWicpWzBdOyAvLyByZW1vdmUgVVRDIHN5bWJvbFxcbn1cIixcclxuICAgIHR5cGU6IFsnZGF0ZScsICdkYXRldGltZSddLFxyXG4gICAgZng6ZnVuY3Rpb24gKGFwcDogQXBwLCBmaWxlOlRGaWxlLCB0b29sczpTY3JpcHRpbmdUb29scykgeyBcclxuICAgICAgICBjb25zdCB0aW1lT2Zmc2V0ID0gbmV3IERhdGUoRGF0ZS5ub3coKSkuZ2V0VGltZXpvbmVPZmZzZXQoKSo2MDAwMDtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgRGF0ZShmaWxlLnN0YXQubXRpbWUtdGltZU9mZnNldCk7IC8vIEFwcGx5IG9mZnNldCB0byBHTVQgVGltZXN0YW1wXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC50b0lTT1N0cmluZygpLnNwbGl0KCdaJylbMF07IC8vIHJlbW92ZSBVVEMgc3ltYm9sXHJcbiAgICAgIH1cclxufSk7XHJcblxyXG5ydWxlRnVuY3Rpb25zLnB1c2goe1xyXG4gICAgaWQ6J2ZpbGVTaXplQnl0ZXMnLFxyXG4gICAgZGVzY3JpcHRpb246ICdGaWxlIHNpemUgaW4gYnl0ZXMnLFxyXG4gICAgc291cmNlOiBcImZ1bmN0aW9uIChhcHAsIGZpbGUsIHRvb2xzKSB7IC8vIGRvIG5vdCBjaGFuZ2UgdGhpcyBsaW5lIVxcbiAgLy8gYWNxdWlyZSBmaWxlIHNpemVcXG4gIGNvbnN0IHJlc3VsdCA9IGZpbGUuc3RhdC5zaXplO1xcbiAgcmV0dXJuIHJlc3VsdDsgLy8gcmV0dXJuIHlvdSByZXN1bHQuXFxufVwiLFxyXG4gICAgdHlwZTogWydudW1iZXInXSxcclxuICAgIGZ4OmZ1bmN0aW9uIChhcHA6IEFwcCwgZmlsZTpURmlsZSwgdG9vbHM6U2NyaXB0aW5nVG9vbHMpIHsgLy8gZG8gbm90IGNoYW5nZSB0aGlzIGxpbmUhXHJcbiAgICAgICAgLy8gYWNxdWlyZSBmaWxlIHNpemVcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBmaWxlLnN0YXQuc2l6ZTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0OyAvLyByZXR1cm4geW91IHJlc3VsdC5cclxuICAgICAgfVxyXG59KTtcclxuXHJcbnJ1bGVGdW5jdGlvbnMucHVzaCh7XHJcbiAgICBpZDonZmlsZVNpemVTdHJpbmcnLFxyXG4gICAgZGVzY3JpcHRpb246ICdGaWxlIHNpemUgZm9ybWF0dGVkIGFzIHRleHQnLFxyXG4gICAgc291cmNlOiBcImZ1bmN0aW9uIChhcHAsIGZpbGUsIHRvb2xzKSB7IC8vIGRvIG5vdCBjaGFuZ2UgdGhpcyBsaW5lIVxcbiAgLy8gYWNxdWlyZSBmaWxlIHNpemVcXG4gIGxldCBzaXplID1maWxlLnN0YXQuc2l6ZTtcXG4gIGNvbnN0IHByZWNpc2lvbiA9IDI7IC8vIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlc1xcbiAgaWYgKHNpemUgPiAxMDI0KSB7XFxuICAgIHNpemUgPSBzaXplIC8gMTAyNDtcXG4gICAgaWYgKHNpemUgPiAxMDI0KSB7XFxuICAgICAgc2l6ZSA9IHNpemUgLyAxMDI0O1xcbiAgICAgIGlmIChzaXplID4gMTAyNCkge1xcbiAgICAgICAgc2l6ZSA9IHNpemUgLyAxMDI0O1xcbiAgICAgICAgcmV0dXJuIE51bWJlci5wYXJzZUZsb2F0KHNpemUpLnRvRml4ZWQocHJlY2lzaW9uKSArICcgR0InO1xcbiAgICAgIH0gXFxuICAgICAgcmV0dXJuIE51bWJlci5wYXJzZUZsb2F0KHNpemUpLnRvRml4ZWQocHJlY2lzaW9uKSArICcgTUInO1xcbiAgICB9XFxuICAgIHJldHVybiBOdW1iZXIucGFyc2VGbG9hdChzaXplKS50b0ZpeGVkKHByZWNpc2lvbikgKyAnIEtCJztcXG4gIH0gICBcXG4gIHJldHVybiBzaXplICsgJyBCeXRlcyc7IC8vIHJldHVybiB5b3UgcmVzdWx0Llxcbn1cIixcclxuICAgIHR5cGU6IFsndGV4dCddLFxyXG4gICAgZng6ZnVuY3Rpb24gKGFwcDogQXBwLCBmaWxlOlRGaWxlLCB0b29sczpTY3JpcHRpbmdUb29scykgeyAvLyBkbyBub3QgY2hhbmdlIHRoaXMgbGluZSFcclxuICAgICAgICAvLyBhY3F1aXJlIGZpbGUgc2l6ZVxyXG4gICAgICAgIGxldCBzaXplID1maWxlLnN0YXQuc2l6ZTtcclxuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSAyOyAvLyBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXNcclxuICAgICAgICBpZiAoc2l6ZSA+IDEwMjQpIHtcclxuICAgICAgICAgIHNpemUgPSBzaXplIC8gMTAyNDtcclxuICAgICAgICAgIGlmIChzaXplID4gMTAyNCkge1xyXG4gICAgICAgICAgICBzaXplID0gc2l6ZSAvIDEwMjQ7XHJcbiAgICAgICAgICAgIGlmIChzaXplID4gMTAyNCkge1xyXG4gICAgICAgICAgICAgIHNpemUgPSBzaXplIC8gMTAyNDtcclxuICAgICAgICAgICAgICByZXR1cm4gc2l6ZS50b0ZpeGVkKHByZWNpc2lvbikgKyAnIEdCJztcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgcmV0dXJuIHNpemUudG9GaXhlZChwcmVjaXNpb24pICsgJyBNQic7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gc2l6ZS50b0ZpeGVkKHByZWNpc2lvbikgKyAnIEtCJztcclxuICAgICAgICB9ICAgXHJcbiAgICAgICAgcmV0dXJuIHNpemUgKyAnIEJ5dGVzJzsgLy8gcmV0dXJuIHlvdSByZXN1bHQuXHJcbiAgICAgIH1cclxufSk7IiwgImltcG9ydCAqIGFzIGZtVG9vbHMgZnJvbSAnLi9mcm9udG1hdHRlci10b29scyc7XHJcblxyXG5leHBvcnQgY29uc3QgdmVyc2lvblN0cmluZyA9IFwiMC4wLjEzXCI7XHJcblxyXG5leHBvcnQgdHlwZSBPYnNpZGlhblByb3BlcnR5VHlwZXMgPSBcImFsaWFzZXNcInxcImNoZWNrYm94XCJ8XCJkYXRlXCJ8XCJkYXRldGltZVwifFwibXVsdGl0ZXh0XCJ8XCJudW1iZXJcInxcInRhZ3NcInxcInRleHRcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRmlsdGVyRmlsZXNBbmRGb2xkZXJzIHtcclxuICAgIHNlbGVjdGVkRm9sZGVyczogc3RyaW5nW10sXHJcbiAgICBzZWxlY3RlZEZpbGVzOiBzdHJpbmdbXSxcclxuICAgIG1vZGU6ICdpbmNsdWRlJyB8ICdleGNsdWRlJyxcclxuICAgIGRpc3BsYXk6ICdmb2xkZXJzJyB8ICdmaWxlcydcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfRklMVEVSX0ZJTEVTX0FORF9GT0xERVJTOiBGaWx0ZXJGaWxlc0FuZEZvbGRlcnMgPSB7XHJcbiAgICBzZWxlY3RlZEZvbGRlcnM6IFtdLFxyXG4gICAgc2VsZWN0ZWRGaWxlczogW10sXHJcbiAgICBtb2RlOiAnZXhjbHVkZScsXHJcbiAgICBkaXNwbGF5OiAnZm9sZGVycycsXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBGb2xkZXJUYWdTZXR0aW5ncyB7XHJcbiAgICB0YWdQcmVmaXg6IHN0cmluZztcclxuICAgIGV4Y2x1ZGVSb290Rm9sZGVyOiBib29sZWFuO1xyXG4gICAgdGFnc1Byb3BlcnR5TmFtZTogc3RyaW5nO1xyXG4gICAgc3BhY2VSZXBsYWNlbWVudDogc3RyaW5nO1xyXG4gICAgc3BlY2lhbENoYXJSZXBsYWNlbWVudDogc3RyaW5nO1xyXG4gICAgbG93ZXJjYXNlVGFnczogYm9vbGVhbjtcclxuICAgIGtub3duUHJvcGVydGllczogUHJvcGVydHlUeXBlSW5mb1tdO1xyXG4gICAgcnVsZXM6IEZvbGRlclRhZ1J1bGVEZWZpbml0aW9uW107XHJcbiAgICBsaXZlUnVsZXM6IEZvbGRlclRhZ1J1bGVEZWZpbml0aW9uW107XHJcbiAgICB1c2VUZXh0QXJlYTogYm9vbGVhbjtcclxuICAgIGV4Y2x1ZGU6IEZpbHRlckZpbGVzQW5kRm9sZGVycztcclxuICAgIGluY2x1ZGU6IEZpbHRlckZpbGVzQW5kRm9sZGVycztcclxuICAgIGNvbmZpZ3VyZWRQcm9wZXJ0aWVzOiBBcnJheTx7IG5hbWU6IHN0cmluZzsgdmFsdWU6IGFueSB9PjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IEZvbGRlclRhZ1NldHRpbmdzID0ge1xyXG4gICAgdGFnUHJlZml4OiAnJyxcclxuICAgIGV4Y2x1ZGVSb290Rm9sZGVyOiBmYWxzZSxcclxuICAgIHRhZ3NQcm9wZXJ0eU5hbWU6ICd0YWdzJyxcclxuICAgIHNwYWNlUmVwbGFjZW1lbnQ6ICdfJyxcclxuICAgIHNwZWNpYWxDaGFyUmVwbGFjZW1lbnQ6ICdfJyxcclxuICAgIGxvd2VyY2FzZVRhZ3M6IGZhbHNlLFxyXG4gICAga25vd25Qcm9wZXJ0aWVzOiBbXSxcclxuICAgIHJ1bGVzOiBbXSxcclxuICAgIGxpdmVSdWxlczogW10sXHJcbiAgICB1c2VUZXh0QXJlYTogZmFsc2UsXHJcbiAgICBleGNsdWRlOiB7XHJcbiAgICAgICAgc2VsZWN0ZWRGb2xkZXJzOiBbXSxcclxuICAgICAgICBzZWxlY3RlZEZpbGVzOiBbXSxcclxuICAgICAgICBtb2RlOiAnZXhjbHVkZScsXHJcbiAgICAgICAgZGlzcGxheTogJ2ZvbGRlcnMnLFxyXG4gICAgfSxcclxuICAgIGluY2x1ZGU6IHtcclxuICAgICAgICBzZWxlY3RlZEZvbGRlcnM6IFtdLFxyXG4gICAgICAgIHNlbGVjdGVkRmlsZXM6IFtdLFxyXG4gICAgICAgIG1vZGU6ICdpbmNsdWRlJyxcclxuICAgICAgICBkaXNwbGF5OiAnZm9sZGVycycsXHJcbiAgICB9LFxyXG4gICAgY29uZmlndXJlZFByb3BlcnRpZXM6IFtdXHJcbn07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZvbGRlclRhZ1J1bGVEZWZpbml0aW9uIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBhY3RpdmU6IGJvb2xlYW47XHJcbiAgICBhZGRDb250ZW50OiAnb3ZlcndyaXRlJyB8ICdzdGFydCcgfCAnZW5kJztcclxuICAgIGFzTGluazogYm9vbGVhbjtcclxuICAgIHByb3BlcnR5OiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbjtcclxuICAgIGN1c3RvbVByb3BlcnR5OiBzdHJpbmc7XHJcbiAgICB0eXBlOiBPYnNpZGlhblByb3BlcnR5VHlwZXM7XHJcbiAgICB0eXBlUHJvcGVydHk6IFByb3BlcnR5VHlwZUluZm8gfCB1bmRlZmluZWQ7XHJcbiAgICBjb250ZW50OiBzdHJpbmc7XHJcbiAgICBidWlsZEluQ29kZTogc3RyaW5nO1xyXG4gICAganNDb2RlOiBzdHJpbmc7XHJcbiAgICBzaG93Q29udGVudDogYm9vbGVhbjtcclxuICAgIGV4Y2x1ZGU6IEZpbHRlckZpbGVzQW5kRm9sZGVycztcclxuICAgIGluY2x1ZGU6IEZpbHRlckZpbGVzQW5kRm9sZGVycztcclxuICAgIHByZWZpeDogc3RyaW5nO1xyXG4gICAgc3BhY2VSZXBsYWNlbWVudDogc3RyaW5nO1xyXG4gICAgc3BlY2lhbENoYXJSZXBsYWNlbWVudDogc3RyaW5nO1xyXG4gICAgbG93ZXJjYXNlVGFnczogYm9vbGVhbjtcclxuICAgIGlucHV0UHJvcGVydHk6IHN0cmluZztcclxuICAgIG9ubHlNb2RpZnk6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JVTEVfREVGSU5JVElPTiA6IEZvbGRlclRhZ1J1bGVEZWZpbml0aW9uID0ge1xyXG4gICAgaWQ6ICcnLFxyXG4gICAgYWN0aXZlIDogdHJ1ZSxcclxuICAgIGFzTGluazogZmFsc2UsXHJcbiAgICBhZGRDb250ZW50OiAnb3ZlcndyaXRlJyxcclxuICAgIHByb3BlcnR5IDogJycsXHJcbiAgICB2YWx1ZTogJycsXHJcbiAgICBjdXN0b21Qcm9wZXJ0eSA6ICcnLFxyXG4gICAgdHlwZTogJ3RleHQnLFxyXG4gICAgdHlwZVByb3BlcnR5OiB7bmFtZTonJyx0eXBlOid0ZXh0Jywgc291cmNlOidyZWdpc3RlcmVkJ30sXHJcbiAgICBjb250ZW50OiAnJyxcclxuICAgIGJ1aWxkSW5Db2RlOiAnJyxcclxuICAgIGpzQ29kZTogJycsXHJcbiAgICBzaG93Q29udGVudDogZmFsc2UsXHJcbiAgICBleGNsdWRlOiB7XHJcbiAgICAgICAgc2VsZWN0ZWRGb2xkZXJzOiBbXSxcclxuICAgICAgICBzZWxlY3RlZEZpbGVzOiBbXSxcclxuICAgICAgICBtb2RlOiAnZXhjbHVkZScsXHJcbiAgICAgICAgZGlzcGxheTogJ2ZvbGRlcnMnLFxyXG4gICAgfSxcclxuICAgIGluY2x1ZGU6IHtcclxuICAgICAgICBzZWxlY3RlZEZvbGRlcnM6IFtdLFxyXG4gICAgICAgIHNlbGVjdGVkRmlsZXM6IFtdLFxyXG4gICAgICAgIG1vZGU6ICdpbmNsdWRlJyxcclxuICAgICAgICBkaXNwbGF5OiAnZm9sZGVycycsXHJcbiAgICB9LFxyXG4gICAgcHJlZml4OiAnJyxcclxuICAgIHNwYWNlUmVwbGFjZW1lbnQ6ICcnLFxyXG4gICAgc3BlY2lhbENoYXJSZXBsYWNlbWVudDogJycsXHJcbiAgICBsb3dlcmNhc2VUYWdzOiBmYWxzZSxcclxuICAgIGlucHV0UHJvcGVydHk6ICcnLFxyXG4gICAgb25seU1vZGlmeTogdHJ1ZSxcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgUHJvcGVydHlUeXBlSW5mbyA9IHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgICAgICB0eXBlOiBPYnNpZGlhblByb3BlcnR5VHlwZXM7XHJcbiAgICBjb3VudD86IG51bWJlcjtcclxuICAgIGlzQXJyYXk/OiBib29sZWFuO1xyXG4gICAgdmFsdWVzPzogc3RyaW5nW107XHJcbiAgICBzb3VyY2U6ICdyZWdpc3RlcmVkJyB8ICdpbmZlcnJlZCc7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBQcm9wZXJ0eVR5cGUgPSB7XHJcbiAgICB0eXBlOiBzdHJpbmc7XHJcbiAgICBpY29uOiBzdHJpbmc7XHJcbiAgICBqc1R5cGU6IHN0cmluZztcclxufTsiLCAiaW1wb3J0IHsgTW9kYWwsIEFwcCwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcclxuLyoqXHJcbiAqIERpc3BsYXkgYSBBbGVydCBNb2RhbCBhc3luY2hyb25vdXNseSBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBc3luY0FsZXJ0TW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcbiAgcHJpdmF0ZSB0aXRsZTogc3RyaW5nO1xyXG4gIHByaXZhdGUgZGVzY3JpcHRpb246IHN0cmluZztcclxuICBwcml2YXRlIGJ0bjFUZXh0OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBidG4yVGV4dDogc3RyaW5nO1xyXG4gIHByaXZhdGUgb25ZZXM6ICgpID0+IHZvaWQ7XHJcbiAgcHJpdmF0ZSBvbk5vOiAoKSA9PiB2b2lkO1xyXG5cclxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgdGl0bGU6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZywgYnRuMTogc3RyaW5nLCBidG4yOnN0cmluZywgb25ZZXM6ICgpID0+IHZvaWQsIG9uTm86ICgpID0+IHZvaWQpIHtcclxuICAgIHN1cGVyKGFwcCk7XHJcbiAgICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XHJcbiAgICB0aGlzLmJ0bjFUZXh0ID0gYnRuMTtcclxuICAgIHRoaXMuYnRuMlRleHQgPSBidG4yO1xyXG4gICAgdGhpcy5vblllcyA9IG9uWWVzO1xyXG4gICAgdGhpcy5vbk5vID0gb25ObztcclxuICB9XHJcblxyXG4gIG9uT3BlbigpIHtcclxuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG5cclxuICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6IHRoaXMudGl0bGUgfSk7XHJcbiAgICBjb250ZW50RWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6IHRoaXMuZGVzY3JpcHRpb24gfSk7XHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAuYWRkQnV0dG9uKChidG4pID0+IHtcclxuICAgICAgICBidG4uc2V0QnV0dG9uVGV4dCh0aGlzLmJ0bjFUZXh0KVxyXG4gICAgICAgICAgLnNldEN0YSgpXHJcbiAgICAgICAgICAub25DbGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uWWVzKCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSlcclxuICAgICAgLmFkZEJ1dHRvbigoYnRuKSA9PiB7XHJcbiAgICAgICAgYnRuLnNldEJ1dHRvblRleHQodGhpcy5idG4yVGV4dClcclxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbk5vKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIG9uQ2xvc2UoKSB7XHJcbiAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIGRpc3BsYXkgYW4gQWxlcnQgTW9kYWxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBbGVydE1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gICAgcHJpdmF0ZSB0aXRsZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBkZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSByZXNvbHZlUHJvbWlzZTogKHZhbHVlOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBwcm9taXNlOiBQcm9taXNlPGJvb2xlYW4+O1xyXG4gICAgcHJpdmF0ZSBidG4xVGV4dDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBidG4yVGV4dDogc3RyaW5nO1xyXG4gIFxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHRpdGxlOiBzdHJpbmcsIGRlc2NyaXB0aW9uOiBzdHJpbmcsIGJ0bjE6IHN0cmluZywgYnRuMjpzdHJpbmcpIHtcclxuICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XHJcbiAgICAgIHRoaXMuYnRuMVRleHQgPSBidG4xO1xyXG4gICAgICB0aGlzLmJ0bjJUZXh0ID0gYnRuMjtcclxuICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICB0aGlzLnJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBvbk9wZW4oKSB7XHJcbiAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gIFxyXG4gICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiB0aGlzLnRpdGxlIH0pO1xyXG4gICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6IHRoaXMuZGVzY3JpcHRpb24gfSk7XHJcbiAgXHJcbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAuYWRkQnV0dG9uKChidG4pID0+IHtcclxuICAgICAgICAgIGJ0bi5zZXRCdXR0b25UZXh0KHRoaXMuYnRuMVRleHQpXHJcbiAgICAgICAgICAgIC5zZXRDdGEoKVxyXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgIHRoaXMucmVzb2x2ZVByb21pc2UodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmFkZEJ1dHRvbigoYnRuKSA9PiB7XHJcbiAgICAgICAgICBidG4uc2V0QnV0dG9uVGV4dCh0aGlzLmJ0bjJUZXh0KVxyXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgIHRoaXMucmVzb2x2ZVByb21pc2UoZmFsc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICBcclxuICAgIG9uQ2xvc2UoKSB7XHJcbiAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuICAgIH1cclxuICBcclxuICAgIGFzeW5jIG9wZW5BbmRHZXRWYWx1ZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgdGhpcy5vcGVuKCk7XHJcbiAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XHJcbiAgICB9XHJcbiAgfSIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBTZXR0aW5nLCBUQWJzdHJhY3RGaWxlLCBURmlsZSwgVEZvbGRlciwgVmF1bHQsIHNldEljb24gfSBmcm9tICdvYnNpZGlhbic7IC8vIEFkZGVkIHNldEljb25cclxuXHJcbi8vIERlZmluZSB0aGUgc3RydWN0dXJlIGZvciB0cmVlIG5vZGVzXHJcbmludGVyZmFjZSBUcmVlTm9kZSB7XHJcbiAgICBwYXRoOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBzdHJpbmc7IC8vICdmb2xkZXInIHwgJ2ZpbGUnO1xyXG4gICAgY2hpbGRyZW4/OiBUcmVlTm9kZVtdO1xyXG4gICAgZWxlbWVudDogSFRNTEVsZW1lbnQ7IC8vIFJlZmVyZW5jZSB0byB0aGUgbGlzdCBpdGVtIGVsZW1lbnQgKGxpKVxyXG4gICAgY2hlY2tib3g6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICBsYWJlbDogSFRNTExhYmVsRWxlbWVudDtcclxuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7IC8vIFJlZmVyZW5jZSB0byB0aGUgY29udGFpbmVyIGRpdiBob2xkaW5nIGNoZWNrYm94IGFuZCBsYWJlbFxyXG59XHJcblxyXG4vLyBEZWZpbmUgdGhlIHJlc3VsdCBzdHJ1Y3R1cmUgcmV0dXJuZWQgYnkgdGhlIG1vZGFsXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGlyZWN0b3J5U2VsZWN0aW9uUmVzdWx0IHtcclxuICAgIGZvbGRlcnM6IHN0cmluZ1tdO1xyXG4gICAgZmlsZXM6IHN0cmluZ1tdO1xyXG4gICAgbW9kZTogJ2luY2x1ZGUnIHwgJ2V4Y2x1ZGUnO1xyXG4gICAgZGlzcGxheTogJ2ZvbGRlcnMnIHwgJ2ZpbGVzJztcclxufVxyXG5cclxuLyoqXHJcbiAqIE9ic2lkaWFuIE1vZGFsIGZvciBzZWxlY3RpbmcgZGlyZWN0b3JpZXMgYW5kIGZpbGVzIGZyb20gdGhlIHZhdWx0IHN0cnVjdHVyZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEaXJlY3RvcnlTZWxlY3Rpb25Nb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuICAgIC8vIEluaXRpYWwgc3RhdGUgcGFzc2VkIHRvIHRoZSBtb2RhbCAoc3RvcmVkIGZvciByZXNldCBmdW5jdGlvbmFsaXR5KVxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbml0aWFsRm9sZGVyc1NuYXBzaG90OiBSZWFkb25seVNldDxzdHJpbmc+O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbml0aWFsRmlsZXNTbmFwc2hvdDogUmVhZG9ubHlTZXQ8c3RyaW5nPjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgaW5pdGlhbE1vZGVTbmFwc2hvdDogJ2luY2x1ZGUnIHwgJ2V4Y2x1ZGUnO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbml0aWFsRGlzcGxheVNuYXBzaG90OiAnZm9sZGVycycgfCAnZmlsZXMnO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBva0NhbGxiYWNrOiAocmVzdWx0OiBEaXJlY3RvcnlTZWxlY3Rpb25SZXN1bHQgfCBudWxsKSA9PiB2b2lkO1xyXG5cclxuICAgIC8vIEN1cnJlbnQgc3RhdGUgYmVpbmcgbW9kaWZpZWQgd2l0aGluIHRoZSBtb2RhbFxyXG4gICAgcHJpdmF0ZSBjdXJyZW50Rm9sZGVyczogU2V0PHN0cmluZz47XHJcbiAgICBwcml2YXRlIGN1cnJlbnRGaWxlczogU2V0PHN0cmluZz47XHJcbiAgICBwcml2YXRlIGN1cnJlbnRNb2RlOiAnaW5jbHVkZScgfCAnZXhjbHVkZSc7XHJcbiAgICBwcml2YXRlIGN1cnJlbnREaXNwbGF5OiAnZm9sZGVycycgfCAnZmlsZXMnO1xyXG4gICAgcHJpdmF0ZSBpbmNsdWRlRXhjbHVkZVNlbGVjdGFibGU6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIHNob3dGaWxlczogYm9vbGVhbiA9IGZhbHNlOyAvLyBTdGF0ZSBmb3Igc2hvd2luZyBmaWxlcyBpbiB0aGUgdHJlZVxyXG5cclxuICAgIC8vIFVJIEVsZW1lbnRzXHJcbiAgICBwcml2YXRlIHRyZWVSb290RWxlbWVudDogSFRNTEVsZW1lbnQ7IC8vIENvbnRhaW5lciBmb3IgdGhlIHRyZWUgdmlld1xyXG4gICAgcHJpdmF0ZSB0cmVlTm9kZXM6IE1hcDxzdHJpbmcsIFRyZWVOb2RlPiA9IG5ldyBNYXAoKTsgLy8gTWFwIHBhdGggdG8gbm9kZSBpbmZvIGZvciBxdWljayBhY2Nlc3NcclxuICAgIHByaXZhdGUgbW9kZURyb3Bkb3duOiBTZXR0aW5nIHwgbnVsbCA9IG51bGw7IC8vIFJlZmVyZW5jZSB0byB1cGRhdGUgZHJvcGRvd24gb24gcmVzZXRcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIERpcmVjdG9yeVNlbGVjdGlvbk1vZGFsLlxyXG4gICAgICogQHBhcmFtIGFwcCAtIFRoZSBPYnNpZGlhbiBBcHAgaW5zdGFuY2UuXHJcbiAgICAgKiBAcGFyYW0gaW5pdGlhbEZvbGRlcnMgLSBBcnJheSBvZiBpbml0aWFsbHkgc2VsZWN0ZWQgZm9sZGVyIHBhdGhzLlxyXG4gICAgICogQHBhcmFtIGluaXRpYWxGaWxlcyAtIEFycmF5IG9mIGluaXRpYWxseSBzZWxlY3RlZCBmaWxlIHBhdGhzLlxyXG4gICAgICogQHBhcmFtIGluaXRpYWxNb2RlIC0gVGhlIGluaXRpYWwgc2VsZWN0aW9uIG1vZGUgKCdpbmNsdWRlJyBvciAnZXhjbHVkZScpLlxyXG4gICAgICogQHBhcmFtIG9rQ2FsbGJhY2sgLSBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIHVzZXIgY2xpY2tzIFwiT0tcIi4gUmVjZWl2ZXMgdGhlIHNlbGVjdGlvbiByZXN1bHQuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGFwcDogQXBwLFxyXG4gICAgICAgIGluaXRpYWxGb2xkZXJzOiBzdHJpbmdbXSxcclxuICAgICAgICBpbml0aWFsRmlsZXM6IHN0cmluZ1tdLFxyXG4gICAgICAgIGluaXRpYWxNb2RlOiAnaW5jbHVkZScgfCAnZXhjbHVkZScsXHJcbiAgICAgICAgaW5pdGlhbERpc3BsYXk6ICdmb2xkZXJzJyB8ICdmaWxlcycsXHJcbiAgICAgICAgaW5jbHVkZUV4Y2x1ZGVTZWxlY3RhYmxlOiBib29sZWFuLFxyXG4gICAgICAgIG9rQ2FsbGJhY2s6IChyZXN1bHQ6IERpcmVjdG9yeVNlbGVjdGlvblJlc3VsdCB8IG51bGwpID0+IHZvaWRcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKGFwcCk7XHJcbiAgICAgICAgLy8gU3RvcmUgaW5pdGlhbCBzdGF0ZSBmb3IgcmVzZXRcclxuICAgICAgICB0aGlzLmluaXRpYWxGb2xkZXJzU25hcHNob3QgPSBuZXcgU2V0KGluaXRpYWxGb2xkZXJzKTtcclxuICAgICAgICB0aGlzLmluaXRpYWxGaWxlc1NuYXBzaG90ID0gbmV3IFNldChpbml0aWFsRmlsZXMpO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbE1vZGVTbmFwc2hvdCA9IGluaXRpYWxNb2RlO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbERpc3BsYXlTbmFwc2hvdCA9IGluaXRpYWxEaXNwbGF5O1xyXG4gICAgICAgIHRoaXMuc2hvd0ZpbGVzID0gaW5pdGlhbERpc3BsYXk9PT0nZmlsZXMnIHx8IGluaXRpYWxGaWxlcy5sZW5ndGg+MDtcclxuICAgICAgICB0aGlzLmluY2x1ZGVFeGNsdWRlU2VsZWN0YWJsZSA9IGluY2x1ZGVFeGNsdWRlU2VsZWN0YWJsZTtcclxuICAgICAgICB0aGlzLm9rQ2FsbGJhY2sgPSBva0NhbGxiYWNrO1xyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIGN1cnJlbnQgc3RhdGUgZnJvbSBpbml0aWFsIHN0YXRlIGZvciBlZGl0aW5nXHJcbiAgICAgICAgdGhpcy5yZXNldFNlbGVjdGlvblRvSW5pdGlhbCgpOyAvLyBVc2UgYSBtZXRob2QgZm9yIGluaXRpYWxpemF0aW9uIGFuZCByZXNldFxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzZXRzIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBzdGF0ZSB0byB0aGUgaW5pdGlhbCBzdGF0ZSBwcm92aWRlZCBhdCBjb25zdHJ1Y3Rpb24uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVzZXRTZWxlY3Rpb25Ub0luaXRpYWwoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Rm9sZGVycyA9IG5ldyBTZXQodGhpcy5pbml0aWFsRm9sZGVyc1NuYXBzaG90KTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRGaWxlcyA9IG5ldyBTZXQodGhpcy5pbml0aWFsRmlsZXNTbmFwc2hvdCk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TW9kZSA9IHRoaXMuaW5pdGlhbE1vZGVTbmFwc2hvdDtcclxuICAgICAgICAvLyBOb3RlOiBzaG93RmlsZXMgaXMgbm90IHJlc2V0IGJ5IHRoaXMgYWN0aW9uLCB1c2VyIGNhbiB0b2dnbGUgaXQgaW5kZXBlbmRlbnRseVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzZXRzIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBzdGF0ZSB0byBlbXB0eS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZXNldFNlbGVjdGlvblRvRW1wdHkoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Rm9sZGVycyA9IG5ldyBTZXQoW10pO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEZpbGVzID0gbmV3IFNldChbXSk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TW9kZSA9IHRoaXMuaW5pdGlhbE1vZGVTbmFwc2hvdDtcclxuICAgICAgICAvLyBOb3RlOiBzaG93RmlsZXMgaXMgbm90IHJlc2V0IGJ5IHRoaXMgYWN0aW9uLCB1c2VyIGNhbiB0b2dnbGUgaXQgaW5kZXBlbmRlbnRseVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIG1vZGFsIGlzIG9wZW5lZC4gQnVpbGRzIHRoZSBVSS5cclxuICAgICAqL1xyXG4gICAgb25PcGVuKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpOyAvLyBDbGVhciBwcmV2aW91cyBjb250ZW50XHJcbiAgICAgICAgY29udGVudEVsLmFkZENsYXNzKCdkaXJlY3Rvcnktc2VsZWN0aW9uLW1vZGFsJyk7IFxyXG5cclxuICAgICAgICAvLyAtLS0gTW9kYWwgVGl0bGUgLS0tXHJcbiAgICAgICAgaWYgKHRoaXMuaW5jbHVkZUV4Y2x1ZGVTZWxlY3RhYmxlKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdJbmNsdWRlIG9yIEV4Y2x1ZGUgRm9sZGVycyBhbmQgRmlsZXMnIH0pOyBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiBgJHt0aGlzLmN1cnJlbnRNb2RlID09PSAnZXhjbHVkZScgPyAnRXhjbHVkZScgOiAnSW5jbHVkZSd9IEZvbGRlcnMgYW5kIEZpbGVzYCB9KTsgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAtLS0gU2V0dGluZ3MgQ29udHJvbHMgLS0tXHJcbiAgICAgICAgY29uc3QgY29udHJvbHNFbCA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6ICdtb2RhbC1jb250cm9scycgfSk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVNb2RlU2V0dGluZyhjb250cm9sc0VsKTsgLy8gQ3JlYXRlIG1vZGUgZHJvcGRvd25cclxuICAgICAgICB0aGlzLmNyZWF0ZVNob3dGaWxlc1NldHRpbmcoY29udHJvbHNFbCk7IC8vIENyZWF0ZSBmaWxlIHRvZ2dsZVxyXG5cclxuICAgICAgICAvLyAtLS0gVHJlZSBDb250YWluZXIgLS0tXHJcbiAgICAgICAgdGhpcy50cmVlUm9vdEVsZW1lbnQgPSBjb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiAndHJlZS12aWV3LWNvbnRhaW5lcicgfSk7XHJcbiAgICAgICAgdGhpcy50cmVlUm9vdEVsZW1lbnQuc3R5bGUubWF4SGVpZ2h0ID0gJzYwMHB4JztcclxuICAgICAgICB0aGlzLnRyZWVSb290RWxlbWVudC5zdHlsZS5vdmVyZmxvd1kgPSAnYXV0byc7XHJcbiAgICAgICAgdGhpcy50cmVlUm9vdEVsZW1lbnQuc3R5bGUuYm9yZGVyID0gJzFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlciknO1xyXG4gICAgICAgIHRoaXMudHJlZVJvb3RFbGVtZW50LnN0eWxlLnBhZGRpbmcgPSAnMTBweCc7XHJcbiAgICAgICAgdGhpcy50cmVlUm9vdEVsZW1lbnQuc3R5bGUubWFyZ2luVG9wID0gJzEwcHgnO1xyXG4gICAgICAgIHRoaXMudHJlZVJvb3RFbGVtZW50LnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcxMHB4JztcclxuXHJcbiAgICAgICAgLy8gLS0tIEJ1aWxkIGFuZCBSZW5kZXIgVHJlZSAtLS1cclxuICAgICAgICBpZiAoIXRoaXMudHJlZU5vZGVzLnNpemUpIHsgLy8gRW5zdXJlIHRoZSB0cmVlIGlzIG9ubHkgcmVuZGVyZWQgb25jZVxyXG4gICAgICAgICAgICB0aGlzLmJ1aWxkQW5kUmVuZGVyVHJlZSgpOyAvLyBJbml0aWFsIHJlbmRlcmluZyBiYXNlZCBvbiBjdXJyZW50IHN0YXRlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAtLS0gQWN0aW9uIEJ1dHRvbnMgLS0tXHJcbiAgICAgICAgdGhpcy5jcmVhdGVBY3Rpb25CdXR0b25zKGNvbnRlbnRFbCk7IC8vIENyZWF0ZSBPSyBhbmQgUmVzZXQgYnV0dG9uc1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyB0aGUgZHJvcGRvd24gc2V0dGluZyBmb3IgY2hvb3NpbmcgdGhlIHNlbGVjdGlvbiBtb2RlLlxyXG4gICAgICogQHBhcmFtIGNvbnRhaW5lckVsIC0gVGhlIEhUTUwgZWxlbWVudCB0byBhcHBlbmQgdGhlIHNldHRpbmcgdG8uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlTW9kZVNldHRpbmcoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5jbHVkZUV4Y2x1ZGVTZWxlY3RhYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZURyb3Bkb3duID0gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpIC8vIFN0b3JlIHJlZmVyZW5jZVxyXG4gICAgICAgICAgICAgICAgLnNldE5hbWUoJ1NlbGVjdGlvbiBNb2RlJykgLy8gU2V0dGluZyBOYW1lIGluIEdlcm1hblxyXG4gICAgICAgICAgICAgICAgLnNldERlc2MoJ0Nob29zZSBpZiB0aGUgc2VsZWN0ZWQgZmlsZXMgYW5kIGZvbGRlcnMgc2hvdWxkIGJlIGV4Y2x1ZGVkIG9yIGluY2x1ZGVkLicpIFxyXG4gICAgICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBkcm9wZG93blxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdleGNsdWRlJywgJ2V4Y2x1ZGUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdpbmNsdWRlJywgJ2luY2x1ZGUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5jdXJyZW50TW9kZSkgLy8gU2V0IGluaXRpYWwgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKHZhbHVlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudE1vZGUgPSB2YWx1ZSBhcyAnaW5jbHVkZScgfCAnZXhjbHVkZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRyZWVBcHBlYXJhbmNlKCk7IC8vIFVwZGF0ZSB0cmVlIHZpc3VhbHMgYmFzZWQgb24gbmV3IG1vZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBtb2RlIGRyb3Bkb3duIFVJIGVsZW1lbnQgdG8gcmVmbGVjdCB0aGUgY3VycmVudE1vZGUgc3RhdGUuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgdXBkYXRlTW9kZURyb3Bkb3duKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGRyb3Bkb3duQ29tcG9uZW50ID0gdGhpcy5tb2RlRHJvcGRvd24/LmNvbXBvbmVudHNbMF0gYXMgYW55OyAvLyBBY2Nlc3MgZHJvcGRvd24gY29tcG9uZW50XHJcbiAgICAgICAgaWYgKGRyb3Bkb3duQ29tcG9uZW50ICYmIHR5cGVvZiBkcm9wZG93bkNvbXBvbmVudC5zZXRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgZHJvcGRvd25Db21wb25lbnQuc2V0VmFsdWUodGhpcy5jdXJyZW50TW9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgdGhlIHRvZ2dsZSBzZXR0aW5nIGZvciBzaG93aW5nL2hpZGluZyBmaWxlcyBpbiB0aGUgdHJlZS5cclxuICAgICAqIEBwYXJhbSBjb250YWluZXJFbCAtIFRoZSBIVE1MIGVsZW1lbnQgdG8gYXBwZW5kIHRoZSBzZXR0aW5nIHRvLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZVNob3dGaWxlc1NldHRpbmcoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdTaG93IEZpbGVzJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ1Nob3cgRmlsZXMgd2l0aGluIHRoZSBkaXJlY3RvcnkgdHJlZS4nKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0b2dnbGVcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5zaG93RmlsZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKHZhbHVlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93RmlsZXMgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWlsZEFuZFJlbmRlclRyZWUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHRoZSBcIk9LXCIgYW5kIFwiUmVzZXRcIiBidXR0b25zLlxyXG4gICAgICogQHBhcmFtIGNvbnRhaW5lckVsIC0gVGhlIEhUTUwgZWxlbWVudCB0byBhcHBlbmQgdGhlIGJ1dHRvbnMgdG8uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlQWN0aW9uQnV0dG9ucyhjb250YWluZXJFbDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBidXR0b25zRWwgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICdtb2RhbC1idXR0b25zJyB9KTtcclxuICAgICAgICBidXR0b25zRWwuc3R5bGUubWFyZ2luVG9wID0gJzE1cHgnO1xyXG4gICAgICAgIGJ1dHRvbnNFbC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnOyAvLyBVc2UgZmxleCBmb3IgYWxpZ25tZW50XHJcbiAgICAgICAgYnV0dG9uc0VsLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gJ2ZsZXgtZW5kJzsgLy8gQWxpZ24gYnV0dG9ucyB0byB0aGUgcmlnaHRcclxuICAgICAgICBidXR0b25zRWwuc3R5bGUuZ2FwID0gJzEwcHgnOyAvLyBTcGFjZSBiZXR3ZWVuIGJ1dHRvbnNcclxuXHJcbiAgICAgICAgLy8gUmVzZXQgQnV0dG9uIChVbmRvIFx1MjFBQVx1RkUwRilcclxuICAgICAgICBjb25zdCByZXNldEJ1dHRvbiA9IGJ1dHRvbnNFbC5jcmVhdGVFbCgnYnV0dG9uJyk7XHJcbiAgICAgICAgLy8gVXNlIE9ic2lkaWFuJ3Mgc2V0SWNvbiBmb3IgY29uc2lzdGVuY3ksIG9yIHVzZSB0ZXh0XHJcbiAgICAgICAgc2V0SWNvbihyZXNldEJ1dHRvbiwgJ3Jlc2V0Jyk7IC8vIFVzZSBhIHN1aXRhYmxlIGljb24gbGlrZSAncmVzZXQnIG9yICd1bmRvJ1xyXG4gICAgICAgIHJlc2V0QnV0dG9uLmFyaWFMYWJlbCA9ICdSZXNldCBzZWxlY3Rpb24nOyAvLyBBY2Nlc3NpYmlsaXR5XHJcbiAgICAgICAgcmVzZXRCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXNldFNlbGVjdGlvblRvSW5pdGlhbCgpOyAvLyBSZXNldCBpbnRlcm5hbCBzdGF0ZVxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1vZGVEcm9wZG93bigpOyAvLyBVcGRhdGUgZHJvcGRvd24gVUlcclxuICAgICAgICAgICAgdGhpcy5idWlsZEFuZFJlbmRlclRyZWUoKTsgLy8gUmUtcmVuZGVyIHRyZWUgd2l0aCByZXNldCBzdGF0ZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIENsZWFyIEJ1dHRvbiAoQ2xlYXIgXHVEODNEXHVERUFFKVxyXG4gICAgICAgIGNvbnN0IGVtcHR5QnV0dG9uID0gYnV0dG9uc0VsLmNyZWF0ZUVsKCdidXR0b24nKTtcclxuICAgICAgICAvLyBVc2UgT2JzaWRpYW4ncyBzZXRJY29uIGZvciBjb25zaXN0ZW5jeSwgb3IgdXNlIHRleHRcclxuICAgICAgICBzZXRJY29uKGVtcHR5QnV0dG9uLCAnZXJhc2VyJyk7IC8vIFVzZSBhIHN1aXRhYmxlIGljb24gbGlrZSAncmVzZXQnIG9yICd1bmRvJ1xyXG4gICAgICAgIGVtcHR5QnV0dG9uLmFyaWFMYWJlbCA9ICdDbGVhciBzZWxlY3Rpb24nOyAvLyBBY2Nlc3NpYmlsaXR5XHJcbiAgICAgICAgZW1wdHlCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXNldFNlbGVjdGlvblRvRW1wdHkoKTsgLy8gQ2xlYXIgc3RhdGVcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVNb2RlRHJvcGRvd24oKTsgLy8gVXBkYXRlIGRyb3Bkb3duIFVJXHJcbiAgICAgICAgICAgIHRoaXMuYnVpbGRBbmRSZW5kZXJUcmVlKCk7IC8vIFJlLXJlbmRlciB0cmVlIHdpdGggcmVzZXQgc3RhdGVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBjYW5jZWwgQnV0dG9uXHJcbiAgICAgICAgY29uc3QgY2FuY2VsQnV0dG9uID0gYnV0dG9uc0VsLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdDYW5jZWwnIH0pO1xyXG4gICAgICAgIGNhbmNlbEJ1dHRvbi5hcmlhTGFiZWwgPSAnY2xvc2UgYW5kIGRpc2NhcmQgY2hhbmdlcyc7IC8vIEFjY2Vzc2liaWxpdHlcclxuICAgICAgICBjYW5jZWxCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDYW5jZWwgQ2xpY2tlZCAtIFJldHVybmluZ1wiKTsgLy8gRGVidWcgbG9nXHJcbiAgICAgICAgICAgIHRoaXMub2tDYWxsYmFjayggbnVsbCApOyAvLyBQYXNzIHRoZSBmaW5hbCBzZWxlY3Rpb24gYmFja1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gT0sgQnV0dG9uXHJcbiAgICAgICAgY29uc3Qgb2tCdXR0b24gPSBidXR0b25zRWwuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ09LJywgY2xzOiAnbW9kLWN0YScgfSk7XHJcbiAgICAgICAgb2tCdXR0b24uYXJpYUxhYmVsID0gJ2Nsb3NlIGFuZCBzYXZlIGNoYW5nZXMnOyAvLyBBY2Nlc3NpYmlsaXR5XHJcbiAgICAgICAgb2tCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEJ1aWxkcyB0aGUgbG9naWNhbCB0cmVlIHN0cnVjdHVyZSBkYXRhIGZyb20gdGhlIHZhdWx0J3MgZmlsZXMgYW5kIGZvbGRlcnMuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgcm9vdCBub2RlIG9mIHRoZSB0cmVlIHN0cnVjdHVyZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBidWlsZFRyZWVEYXRhKCk6IFRyZWVOb2RlIHtcclxuICAgICAgICAvLyBDcmVhdGUgYSB2aXJ0dWFsIHJvb3Qgbm9kZSByZXByZXNlbnRpbmcgdGhlIHZhdWx0XHJcbiAgICAgICAgY29uc3QgdmF1bHRSb290Tm9kZTogVHJlZU5vZGUgPSB7XHJcbiAgICAgICAgICAgIHBhdGg6ICcvJywgLy8gUm9vdCBmb2xkZXIgcGF0aFxyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLmFwcC52YXVsdC5nZXROYW1lKCkgfHwgJ1ZhdWx0JywgLy8gVXNlIHZhdWx0IG5hbWUgb3IgZGVmYXVsdFxyXG4gICAgICAgICAgICB0eXBlOiAnZm9sZGVyJyxcclxuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxyXG4gICAgICAgICAgICAvLyBQbGFjZWhvbGRlciBlbGVtZW50cywgd2lsbCBiZSBhc3NpZ25lZCBkdXJpbmcgcmVuZGVyaW5nXHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IG51bGwhLFxyXG4gICAgICAgICAgICBjaGVja2JveDogbnVsbCEsXHJcbiAgICAgICAgICAgIGxhYmVsOiBudWxsISxcclxuICAgICAgICAgICAgY29udGFpbmVyOiBudWxsISxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBmb2xkZXJOb2RlcyA9IG5ldyBNYXA8c3RyaW5nLCBUcmVlTm9kZT4oKTtcclxuICAgICAgICBmb2xkZXJOb2Rlcy5zZXQoJy8nLCB2YXVsdFJvb3ROb2RlKTsgLy8gQWRkIHJvb3QgdG8gdGhlIG1hcFxyXG5cclxuICAgICAgICAvLyBVc2UgZ2V0RmlsZXMoKSB0byByZXRyaWV2ZSBhbGwgVEZpbGUgb2JqZWN0cyAoTWFya2Rvd24sIGltYWdlcywgcGRmLCBldGMuKVxyXG4gICAgICAgIGNvbnN0IGFsbEZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0RmlsZXMoKTtcclxuXHJcbiAgICAgICAgLy8gLS0tIFN0ZXAgMTogQ3JlYXRlIGFsbCBmb2xkZXIgbm9kZXMgYmFzZWQgb24gZmlsZSBwYXJlbnQgcGF0aHMgLS0tXHJcbiAgICAgICAgYWxsRmlsZXMuZm9yRWFjaChmaWxlID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcGFyZW50Rm9sZGVyID0gZmlsZS5wYXJlbnQ7XHJcbiAgICAgICAgICAgIGlmICghcGFyZW50Rm9sZGVyKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBsZXQgY3VycmVudFBhdGggPSAnJztcclxuICAgICAgICAgICAgY29uc3QgcGF0aFBhcnRzID0gcGFyZW50Rm9sZGVyLnBhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwLmxlbmd0aCA+IDApO1xyXG5cclxuICAgICAgICAgICAgbGV0IHBhcmVudE5vZGUgPSB2YXVsdFJvb3ROb2RlOyAvLyBTdGFydCBmcm9tIHZhdWx0IHJvb3RcclxuICAgICAgICAgICAgcGF0aFBhcnRzLmZvckVhY2gocGFydCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aCA9IGN1cnJlbnRQYXRoID09PSAnLycgPyBwYXJ0IDogYCR7Y3VycmVudFBhdGh9LyR7cGFydH1gO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmb2xkZXJOb2Rlcy5oYXMoY3VycmVudFBhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Rm9sZGVyTm9kZTogVHJlZU5vZGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IGN1cnJlbnRQYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBwYXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZm9sZGVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBudWxsISxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3g6IG51bGwhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbnVsbCEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogbnVsbCEsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBmb2xkZXJOb2Rlcy5zZXQoY3VycmVudFBhdGgsIG5ld0ZvbGRlck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFyZW50Tm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmNoaWxkcmVuID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuY2hpbGRyZW4hLnB1c2gobmV3Rm9sZGVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IG5ld0ZvbGRlck5vZGU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBmb2xkZXJOb2Rlcy5nZXQoY3VycmVudFBhdGgpITtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIC0tLSBTdGVwIDI6IEFkZCBmaWxlIG5vZGVzIGlmICdzaG93RmlsZXMnIGlzIGVuYWJsZWQgLS0tXHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd0ZpbGVzKSB7XHJcbiAgICAgICAgICAgIGFsbEZpbGVzLmZvckVhY2goZmlsZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRGb2xkZXIgPSBmaWxlLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGlmICghcGFyZW50Rm9sZGVyKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50UGF0aCA9IFwiL1wiICsgcGFyZW50Rm9sZGVyLnBhdGg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnROb2RlID0gZm9sZGVyTm9kZXMuZ2V0KHBhcmVudFBhdGgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVOb2RlOiBUcmVlTm9kZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBmaWxlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmaWxlJyxcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBudWxsISxcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2JveDogbnVsbCEsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG51bGwhLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogbnVsbCEsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJlbnROb2RlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5jaGlsZHJlbiEucHVzaChmaWxlTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gLS0tIFN0ZXAgMzogU29ydCBjaGlsZHJlbiBhbHBoYWJldGljYWxseSAoZm9sZGVycyBmaXJzdCwgdGhlbiBmaWxlcykgLS0tXHJcbiAgICAgICAgY29uc3Qgc29ydE5vZGVzID0gKGE6IFRyZWVOb2RlLCBiOiBUcmVlTm9kZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYS50eXBlID09PSAnZm9sZGVyJyAmJiBiLnR5cGUgPT09ICdmaWxlJykgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICBpZiAoYS50eXBlID09PSAnZmlsZScgJiYgYi50eXBlID09PSAnZm9sZGVyJykgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIHJldHVybiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZvbGRlck5vZGVzLmZvckVhY2gobm9kZSA9PiBub2RlLmNoaWxkcmVuPy5zb3J0KHNvcnROb2RlcykpO1xyXG5cclxuICAgICAgICByZXR1cm4gdmF1bHRSb290Tm9kZTsgLy8gUmV0dXJuIHRoZSBwb3B1bGF0ZWQgcm9vdCBub2RlXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVycyB0aGUgZW50aXJlIHRyZWUgc3RydWN0dXJlIGluIHRoZSBET00gYmFzZWQgb24gdGhlIHRyZWUgZGF0YS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZW5kZXJUcmVlKCkge1xyXG4gICAgICAgICB0aGlzLnRyZWVSb290RWxlbWVudC5lbXB0eSgpOyAvLyBDbGVhciBleGlzdGluZyBET00gZWxlbWVudHNcclxuICAgICAgICAgdGhpcy50cmVlTm9kZXMuY2xlYXIoKTsgLy8gQ2xlYXIgdGhlIG5vZGUgbWFwXHJcblxyXG4gICAgICAgICBjb25zdCB0cmVlRGF0YSA9IHRoaXMuYnVpbGRUcmVlRGF0YSgpOyAvLyBHZXQgdGhlIHN0cnVjdHVyZWQgZGF0YVxyXG5cclxuICAgICAgICAgLy8gQ3JlYXRlIHRoZSB0b3AtbGV2ZWwgbGlzdCBmb3IgdGhlIHZhdWx0IGNvbnRlbnRzXHJcbiAgICAgICAgIGNvbnN0IHJvb3RVbCA9IHRoaXMudHJlZVJvb3RFbGVtZW50LmNyZWF0ZUVsKCd1bCcpO1xyXG4gICAgICAgICByb290VWwuYWRkQ2xhc3MoJ3RyZWUtcm9vdC11bCcpO1xyXG4gICAgICAgICByb290VWwuc3R5bGUubGlzdFN0eWxlID0gJ25vbmUnO1xyXG4gICAgICAgICByb290VWwuc3R5bGUucGFkZGluZ0xlZnQgPSAnMCc7IC8vIFJlbW92ZSBkZWZhdWx0IGxpc3QgaW5kZW50YXRpb25cclxuXHJcbiAgICAgICAgIC8vIFJlbmRlciB0aGUgcm9vdCBmb2xkZXIgaXRzZWxmXHJcbiAgICAgICAgIC8vdGhpcy5yZW5kZXJUcmVlTm9kZSh0cmVlRGF0YSwgcm9vdFVsLCAwLCB0aGlzLmN1cnJlbnRNb2RlID09PSAnaW5jbHVkZScgPyB0aGlzLmN1cnJlbnRGb2xkZXJzIDogdGhpcy5jdXJyZW50RmlsZXMpO1xyXG4gICAgICAgICB0aGlzLnJlbmRlclRyZWVOb2RlKHRyZWVEYXRhLCByb290VWwsIDAsIHRoaXMuY3VycmVudEZvbGRlcnMpOyAvL1RPRE86IGV4cGFuZCB0aGlzIHRvIGluY2x1ZGUgZmlsZXMgYXMgd2VsbFxyXG5cclxuICAgICAgICAgLy8gUmVuZGVyIGNoaWxkcmVuIG9mIHRoZSByb290IGZvbGRlclxyXG4gICAgICAgICB0cmVlRGF0YS5jaGlsZHJlbj8uZm9yRWFjaChjaGlsZE5vZGUgPT4ge1xyXG4gICAgICAgICAgICAgLy90aGlzLnJlbmRlclRyZWVOb2RlKGNoaWxkTm9kZSwgcm9vdFVsLCAxLCB0aGlzLmN1cnJlbnRNb2RlID09PSAnaW5jbHVkZScgPyB0aGlzLmN1cnJlbnRGb2xkZXJzIDogdGhpcy5jdXJyZW50RmlsZXMpOyAvLyBTdGFydCByZW5kZXJpbmcgYXQgbGV2ZWwgMVxyXG4gICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlY3Vyc2l2ZWx5IHJlbmRlcnMgYSBzaW5nbGUgdHJlZSBub2RlIGFuZCBpdHMgY2hpbGRyZW4gaW4gdGhlIERPTS5cclxuICAgICAqIEBwYXJhbSBub2RlIC0gVGhlIFRyZWVOb2RlIGRhdGEgdG8gcmVuZGVyLlxyXG4gICAgICogQHBhcmFtIHBhcmVudEVsZW1lbnQgLSBUaGUgSFRNTCBgdWxgIGVsZW1lbnQgdG8gYXBwZW5kIHRoaXMgbm9kZSdzIGBsaWAgdG8uXHJcbiAgICAgKiBAcGFyYW0gbGV2ZWwgLSBUaGUgY3VycmVudCBpbmRlbnRhdGlvbiBsZXZlbC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZW5kZXJUcmVlTm9kZShub2RlOiBUcmVlTm9kZSwgcGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQsIGxldmVsOiBudW1iZXIsIHNlbGVjdGVkUGF0aHM6IFNldDxzdHJpbmc+KSB7XHJcbiAgICAgICAgY29uc3QgbGkgPSBwYXJlbnRFbGVtZW50LmNyZWF0ZUVsKCdsaScpO1xyXG4gICAgICAgIGxpLnN0eWxlLm1hcmdpbkxlZnQgPSBgJHtsZXZlbCAqIDIwfXB4YDsgLy8gQXBwbHkgaW5kZW50YXRpb24gYmFzZWQgb24gbGV2ZWxcclxuICAgICAgICBsaS5hZGRDbGFzcyhgdHJlZS1ub2RlLSR7bm9kZS50eXBlfWApOyAvLyBBZGQgY2xhc3MgZm9yIHR5cGUgKGZvbGRlci9maWxlKVxyXG5cclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBsaS5jcmVhdGVEaXYoeyBjbHM6ICd0cmVlLW5vZGUtY29udGFpbmVyJyB9KTtcclxuICAgICAgICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICBjb250YWluZXIuc3R5bGUuYWxpZ25JdGVtcyA9ICdjZW50ZXInO1xyXG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5wYWRkaW5nID0gJzJweCAwJzsgLy8gQWRkIHNvbWUgdmVydGljYWwgcGFkZGluZ1xyXG5cclxuICAgICAgICAvLyAtLS0gVG9nZ2xlIEJ1dHRvbiBmb3IgRm9sZGVycyAtLS1cclxuICAgICAgICBsZXQgdG9nZ2xlQnV0dG9uOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG4gICAgICAgIGxldCBpc0NvbGxhcHNlZCA9IHRydWU7IC8vIERlZmF1bHQgc3RhdGUgaXMgY29sbGFwc2VkXHJcblxyXG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdmb2xkZXInKSB7XHJcbiAgICAgICAgICAgIHRvZ2dsZUJ1dHRvbiA9IGNvbnRhaW5lci5jcmVhdGVTcGFuKHsgY2xzOiAndHJlZS10b2dnbGUtYnV0dG9uJyB9KTtcclxuICAgICAgICAgICAgdG9nZ2xlQnV0dG9uLnRleHRDb250ZW50ID0gJ1x1MjVCNic7IC8vIFJpZ2h0LXBvaW50aW5nIHRyaWFuZ2xlXHJcbiAgICAgICAgICAgIHRvZ2dsZUJ1dHRvbi5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XHJcbiAgICAgICAgICAgIHRvZ2dsZUJ1dHRvbi5zdHlsZS5tYXJnaW5SaWdodCA9ICc1cHgnO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBmb2xkZXIgb3IgYW55IG9mIGl0cyBjaGlsZHJlbiBhcmUgc2VsZWN0ZWRcclxuICAgICAgICAgICAgY29uc3Qgc2hvdWxkRXhwYW5kID0gdGhpcy5zaG91bGRFeHBhbmRGb2xkZXIobm9kZSwgc2VsZWN0ZWRQYXRocyk7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRFeHBhbmQpIHtcclxuICAgICAgICAgICAgICAgIGlzQ29sbGFwc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRvZ2dsZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaXNDb2xsYXBzZWQgPSAhaXNDb2xsYXBzZWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9nZ2xlQnV0dG9uKSB0b2dnbGVCdXR0b24udGV4dENvbnRlbnQgPSBpc0NvbGxhcHNlZCA/ICdcdTI1QjYnIDogJ1x1MjVCQyc7IC8vIFVwZGF0ZSB0cmlhbmdsZSBkaXJlY3Rpb25cclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlblVsKSBjaGlsZHJlblVsLnN0eWxlLmRpc3BsYXkgPSBpc0NvbGxhcHNlZCA/ICdub25lJyA6ICdibG9jayc7IC8vIFNob3cvaGlkZSBjaGlsZHJlblxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gLS0tIENoZWNrYm94IC0tLVxyXG4gICAgICAgIGNvbnN0IGNoZWNrYm94ID0gY29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ2NoZWNrYm94JyB9KTtcclxuICAgICAgICBjaGVja2JveC5pZCA9IGB0cmVlLWNiLSR7bm9kZS5wYXRoLnJlcGxhY2UoL1teYS16QS1aMC05XS9nLCAnLScpfWA7IC8vIENyZWF0ZSBhIHNhZmUgSURcclxuICAgICAgICBjaGVja2JveC5kYXRhc2V0LnBhdGggPSBub2RlLnBhdGg7IC8vIFN0b3JlIHBhdGggaW4gZGF0YSBhdHRyaWJ1dGVcclxuICAgICAgICBjaGVja2JveC5kYXRhc2V0LnR5cGUgPSBub2RlLnR5cGU7IC8vIFN0b3JlIHR5cGVcclxuXHJcbiAgICAgICAgLy8gLS0tIExhYmVsIC0tLVxyXG4gICAgICAgIGNvbnN0IGxhYmVsID0gY29udGFpbmVyLmNyZWF0ZUVsKCdsYWJlbCcpO1xyXG4gICAgICAgIGxhYmVsLnRleHRDb250ZW50ID0gYCR7bm9kZS50eXBlID09PSAnZm9sZGVyJyA/ICdcdUQ4M0RcdURDQzEnIDogJ1x1RDgzRFx1RENDNCd9ICR7bm9kZS5uYW1lfWA7XHJcbiAgICAgICAgLy8gbGFiZWwudGV4dENvbnRlbnQgPSBub2RlLm5hbWU7XHJcbiAgICAgICAgbGFiZWwuaHRtbEZvciA9IGNoZWNrYm94LmlkOyAvLyBMaW5rIGxhYmVsIHRvIGNoZWNrYm94XHJcbiAgICAgICAgbGFiZWwuc3R5bGUubWFyZ2luTGVmdCA9ICc1cHgnO1xyXG4gICAgICAgIGxhYmVsLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcclxuICAgICAgICBsYWJlbC50aXRsZSA9IG5vZGUucGF0aDsgLy8gU2hvdyBmdWxsIHBhdGggb24gaG92ZXJcclxuXHJcbiAgICAgICAgLy8gLS0tIFN0b3JlIHJlZmVyZW5jZXMgaW4gdGhlIG5vZGUgb2JqZWN0IGFuZCBtYXAgLS0tXHJcbiAgICAgICAgbm9kZS5lbGVtZW50ID0gbGk7XHJcbiAgICAgICAgbm9kZS5jaGVja2JveCA9IGNoZWNrYm94O1xyXG4gICAgICAgIG5vZGUubGFiZWwgPSBsYWJlbDtcclxuICAgICAgICBub2RlLmNvbnRhaW5lciA9IGNvbnRhaW5lcjsgLy8gU3RvcmUgY29udGFpbmVyIHJlZmVyZW5jZVxyXG4gICAgICAgIHRoaXMudHJlZU5vZGVzLnNldChub2RlLnBhdGgsIG5vZGUpO1xyXG5cclxuICAgICAgICAvLyAtLS0gU2V0IGluaXRpYWwgY2hlY2tlZCBzdGF0ZSBiYXNlZCBvbiBjdXJyZW50IHNlbGVjdGlvbiAtLS1cclxuICAgICAgICBpZiAobm9kZS50eXBlID09PSAnZm9sZGVyJykge1xyXG4gICAgICAgICAgICBjaGVja2JveC5jaGVja2VkID0gdGhpcy5jdXJyZW50Rm9sZGVycy5oYXMobm9kZS5wYXRoKTtcclxuICAgICAgICB9IGVsc2UgeyAvLyBmaWxlXHJcbiAgICAgICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSB0aGlzLmN1cnJlbnRGaWxlcy5oYXMobm9kZS5wYXRoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIC0tLSBBZGQgZXZlbnQgbGlzdGVuZXIgZm9yIGNoZWNrYm94IGNoYW5nZXMgLS0tXHJcbiAgICAgICAgY2hlY2tib3gub25jaGFuZ2UgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSB0YXJnZXQuZGF0YXNldC5wYXRoITtcclxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHRhcmdldC5kYXRhc2V0LnR5cGUgYXMgJ2ZvbGRlcicgfCAnZmlsZSc7XHJcblxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIHNldHNcclxuICAgICAgICAgICAgaWYgKHRhcmdldC5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2ZvbGRlcicpIHRoaXMuY3VycmVudEZvbGRlcnMuYWRkKHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB0aGlzLmN1cnJlbnRGaWxlcy5hZGQocGF0aCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2ZvbGRlcicpIHRoaXMuY3VycmVudEZvbGRlcnMuZGVsZXRlKHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB0aGlzLmN1cnJlbnRGaWxlcy5kZWxldGUocGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB2aXN1YWwgc3RhdGUgb2YgdGhlIGVudGlyZSB0cmVlIGFmdGVyIGEgY2hhbmdlXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVHJlZUFwcGVhcmFuY2UoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyAtLS0gUmVuZGVyIGNoaWxkcmVuIHJlY3Vyc2l2ZWx5IGlmIGl0J3MgYSBmb2xkZXIgLS0tXHJcbiAgICAgICAgbGV0IGNoaWxkcmVuVWw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XHJcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ2ZvbGRlcicgJiYgbm9kZS5jaGlsZHJlbiAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY2hpbGRyZW5VbCA9IGxpLmNyZWF0ZUVsKCd1bCcpO1xyXG4gICAgICAgICAgICBjaGlsZHJlblVsLnN0eWxlLmxpc3RTdHlsZSA9ICdub25lJztcclxuICAgICAgICAgICAgY2hpbGRyZW5VbC5zdHlsZS5wYWRkaW5nTGVmdCA9ICcwJzsgLy8gUmVzZXQgcGFkZGluZyBmb3IgbmVzdGVkIGxpc3RcclxuICAgICAgICAgICAgY2hpbGRyZW5VbC5zdHlsZS5tYXJnaW5MZWZ0ID0gJzAnOyAvLyBQcmV2ZW50IGRvdWJsZSBpbmRlbnRhdGlvbiBmcm9tIGRlZmF1bHQgVUwgc3R5bGVzXHJcbiAgICAgICAgICAgIGNoaWxkcmVuVWwuc3R5bGUuZGlzcGxheSA9IGlzQ29sbGFwc2VkID8gJ25vbmUnIDogJ2Jsb2NrJzsgLy8gU2hvdy9oaWRlIGNoaWxkcmVuIGJhc2VkIG9uIGluaXRpYWwgc3RhdGVcclxuXHJcbiAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB0aGlzLnJlbmRlclRyZWVOb2RlKGNoaWxkLCBjaGlsZHJlblVsISwgbGV2ZWwgKyAxLCBzZWxlY3RlZFBhdGhzKSk7IC8vIEluY3JlYXNlIGxldmVsIGZvciBjaGlsZHJlblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBIZWxwZXIgbWV0aG9kIHRvIGRldGVybWluZSBpZiBhIGZvbGRlciBzaG91bGQgYmUgZXhwYW5kZWRcclxuICAgIHByaXZhdGUgc2hvdWxkRXhwYW5kRm9sZGVyKG5vZGU6IFRyZWVOb2RlLCBzZWxlY3RlZFBhdGhzOiBTZXQ8c3RyaW5nPik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChzZWxlY3RlZFBhdGhzLmhhcyhub2RlLnBhdGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBUaGUgZm9sZGVyIGl0c2VsZiBpcyBzZWxlY3RlZFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBub2RlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG91bGRFeHBhbmRGb2xkZXIoY2hpbGQsIHNlbGVjdGVkUGF0aHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIEEgY2hpbGQgaXMgc2VsZWN0ZWRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBOZWl0aGVyIHRoZSBmb2xkZXIgbm9yIGl0cyBjaGlsZHJlbiBhcmUgc2VsZWN0ZWRcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSB2aXN1YWwgYXBwZWFyYW5jZSAoZW5hYmxlZC9kaXNhYmxlZC9zdHlsaW5nKSBvZiBhbGwgbm9kZXNcclxuICAgICAqIGluIHRoZSB0cmVlIGJhc2VkIG9uIHRoZSBjdXJyZW50IG1vZGUgYW5kIHNlbGVjdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgdXBkYXRlVHJlZUFwcGVhcmFuY2UoKSB7XHJcbiAgICAgICAgdGhpcy50cmVlTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgaXNEaXNhYmxlZCA9IGZhbHNlOyAvLyBTaG91bGQgdGhlIG5vZGUgYXBwZWFyIGRpc2FibGVkIChncmV5ZWQgb3V0KT9cclxuICAgICAgICAgICAgbGV0IGlzRWZmZWN0aXZlbHlJbmNsdWRlZCA9IGZhbHNlOyAvLyBJcyB0aGUgbm9kZSBwYXJ0IG9mIHRoZSAnYWN0aXZlJyBzZXQgaW4gaW5jbHVkZSBtb2RlP1xyXG4gICAgICAgICAgICBsZXQgaXNFZmZlY3RpdmVseUV4Y2x1ZGVkID0gZmFsc2U7IC8vIElzIHRoZSBub2RlIHBhcnQgb2YgdGhlICdpbmFjdGl2ZScgc2V0IGluIGV4Y2x1ZGUgbW9kZT9cclxuXHJcbiAgICAgICAgICAgIC8vIERldGVybWluZSBpZiBhbiBhbmNlc3RvciBGT0xERVIgb2YgdGhpcyBub2RlIGlzIHNlbGVjdGVkXHJcbiAgICAgICAgICAgIGxldCBhbmNlc3RvckZvbGRlclNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50UGF0aCA9IG5vZGUucGF0aDtcclxuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnRQYXRoICE9PSAnLycpIHtcclxuICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRQYXRoID0gY3VycmVudFBhdGguc3Vic3RyaW5nKDAsIGN1cnJlbnRQYXRoLmxhc3RJbmRleE9mKCcvJykpIHx8ICcvJztcclxuICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50Rm9sZGVycy5oYXMocGFyZW50UGF0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JGb2xkZXJTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICBpZiAocGFyZW50UGF0aCA9PT0gY3VycmVudFBhdGgpIGJyZWFrOyAvLyBTYWZldHkgYnJlYWsgYXQgcm9vdFxyXG4gICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoID0gcGFyZW50UGF0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIG5vZGUgaXRzZWxmIGlzIHNlbGVjdGVkXHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGVTZWxlY3RlZCA9IG5vZGUudHlwZSA9PT0gJ2ZvbGRlcidcclxuICAgICAgICAgICAgICAgID8gdGhpcy5jdXJyZW50Rm9sZGVycy5oYXMobm9kZS5wYXRoKVxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLmN1cnJlbnRGaWxlcy5oYXMobm9kZS5wYXRoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIC0tLSBBcHBseSBMb2dpYyBCYXNlZCBvbiBNb2RlIC0tLVxyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TW9kZSA9PT0gJ2V4Y2x1ZGUnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBFWENMVURFIE1vZGU6IEEgbm9kZSBpcyBjb25zaWRlcmVkIGV4Y2x1ZGVkIGlmIGl0IE9SIGFuIGFuY2VzdG9yIEZPTERFUiBpcyBzZWxlY3RlZC5cclxuICAgICAgICAgICAgICAgIC8vIFZpc3VhbGx5IGRpc2FibGUgKGdyZXkgb3V0KSBub2RlcyB0aGF0IGFyZSBleGNsdWRlZC5cclxuICAgICAgICAgICAgICAgIGlzRWZmZWN0aXZlbHlFeGNsdWRlZCA9IG5vZGVTZWxlY3RlZCB8fCBhbmNlc3RvckZvbGRlclNlbGVjdGVkO1xyXG4gICAgICAgICAgICAgICAgaXNEaXNhYmxlZCA9IGlzRWZmZWN0aXZlbHlFeGNsdWRlZDtcclxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gSU5DTFVERSBNb2RlXHJcbiAgICAgICAgICAgICAgICAvLyBJTkNMVURFIE1vZGU6IEEgbm9kZSBpcyBjb25zaWRlcmVkIGluY2x1ZGVkIGlmIGl0IE9SIGFuIGFuY2VzdG9yIEZPTERFUiBpcyBzZWxlY3RlZC5cclxuICAgICAgICAgICAgICAgIC8vIFZpc3VhbGx5IGRpc2FibGUgKGdyZXkgb3V0KSBub2RlcyB0aGF0IGFyZSBOT1QgaW5jbHVkZWQuXHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnZm9sZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzRWZmZWN0aXZlbHlJbmNsdWRlZCA9IG5vZGVTZWxlY3RlZCB8fCBhbmNlc3RvckZvbGRlclNlbGVjdGVkO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbGUgaW5jbHVkZWQgaWYgc2VsZWN0ZWQgT1IgcGFyZW50IHBhdGggaXMgaW5jbHVkZWRcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRQYXRoID0gbm9kZS5wYXRoLnN1YnN0cmluZygwLCBub2RlLnBhdGgubGFzdEluZGV4T2YoJy8nKSkgfHwgJy8nO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEVmZmVjdGl2ZWx5SW5jbHVkZWQgPSB0aGlzLmlzUGF0aEVmZmVjdGl2ZWx5SW5jbHVkZWQocGFyZW50UGF0aCk7IC8vIENoZWNrIHBhcmVudCBmb2xkZXIgc3RhdHVzXHJcbiAgICAgICAgICAgICAgICAgICAgaXNFZmZlY3RpdmVseUluY2x1ZGVkID0gbm9kZVNlbGVjdGVkIHx8IHBhcmVudEVmZmVjdGl2ZWx5SW5jbHVkZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpc0Rpc2FibGVkID0gIWlzRWZmZWN0aXZlbHlJbmNsdWRlZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gLS0tIEFwcGx5IFZpc3VhbCBTdHlsZXMgLS0tXHJcbiAgICAgICAgICAgIC8vIENoZWNrYm94IGl0c2VsZiBzaG91bGQgYWx3YXlzIGJlIGNsaWNrYWJsZSB0byBjaGFuZ2Ugc2VsZWN0aW9uIHN0YXRlXHJcbiAgICAgICAgICAgIG5vZGUuY2hlY2tib3guZGlzYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFwcGx5IHN0eWxpbmcgdG8gdGhlIGNvbnRhaW5lciAobGFiZWwsIGljb24pIGJhc2VkIG9uIGRpc2FibGVkIHN0YXRlXHJcbiAgICAgICAgICAgIGlmIChpc0Rpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLmNvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gJzAuNSc7XHJcbiAgICAgICAgICAgICAgICBub2RlLmxhYmVsLnN0eWxlLnRleHREZWNvcmF0aW9uID0gJ2xpbmUtdGhyb3VnaCc7IC8vIE1vcmUgcHJvbWluZW50IGRpc2FibGVkIGxvb2tcclxuICAgICAgICAgICAgICAgIG5vZGUuZWxlbWVudC5hZGRDbGFzcygnaXMtZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5vZGUuY29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICAgICAgICAgICAgICBub2RlLmxhYmVsLnN0eWxlLnRleHREZWNvcmF0aW9uID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgbm9kZS5lbGVtZW50LnJlbW92ZUNsYXNzKCdpcy1kaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyAtLS0gRklYIGZvciBJbnZhbGlkQ2hhcmFjdGVyRXJyb3IgLS0tXHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBjbGFzc2VzIGluZGl2aWR1YWxseVxyXG4gICAgICAgICAgICBub2RlLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtaW5jbHVkZWQnLCAnaXMtZXhjbHVkZWQnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBzcGVjaWZpYyBjbGFzc2VzIGZvciBzdHlsaW5nIGluY2x1ZGVkL2V4Y2x1ZGVkIHN0YXRlc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TW9kZSA9PT0gJ2luY2x1ZGUnICYmIGlzRWZmZWN0aXZlbHlJbmNsdWRlZCkge1xyXG4gICAgICAgICAgICAgICAgbm9kZS5lbGVtZW50LmFkZENsYXNzKCdpcy1pbmNsdWRlZCcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudE1vZGUgPT09ICdleGNsdWRlJyAmJiBpc0VmZmVjdGl2ZWx5RXhjbHVkZWQpIHtcclxuICAgICAgICAgICAgICAgICAvLyBBcHBseSBleGNsdWRlZCBjbGFzcyBldmVuIGlmIGl0J3MganVzdCB2aXN1YWxseSBkaXNhYmxlZFxyXG4gICAgICAgICAgICAgICAgIC8vIFRoaXMgYWxsb3dzIHNwZWNpZmljIHN0eWxpbmcgZm9yIGV4Y2x1ZGVkIGl0ZW1zIGJleW9uZCBqdXN0IGdyZXllZCBvdXRcclxuICAgICAgICAgICAgICAgIG5vZGUuZWxlbWVudC5hZGRDbGFzcygnaXMtZXhjbHVkZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBhIGdpdmVuIHBhdGggaXMgZWZmZWN0aXZlbHkgaW5jbHVkZWRcclxuICAgICAqIGluIHRoZSBjdXJyZW50IHNlbGVjdGlvbiB1bmRlciAnaW5jbHVkZScgbW9kZS5cclxuICAgICAqIEEgcGF0aCBpcyBpbmNsdWRlZCBpZiBpdCAoZmlsZSBvciBmb2xkZXIpIGlzIHNlbGVjdGVkLCBvciBpZiBhbnkgb2YgaXRzIGFuY2VzdG9yIEZPTERFUlMgYXJlIHNlbGVjdGVkLlxyXG4gICAgICogQHBhcmFtIHBhdGggLSBUaGUgZm9sZGVyIG9yIGZpbGUgcGF0aCB0byBjaGVjay5cclxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHBhdGggc2hvdWxkIGJlIGNvbnNpZGVyZWQgaW5jbHVkZWQsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpc1BhdGhFZmZlY3RpdmVseUluY2x1ZGVkKHBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vIFRoaXMgY2hlY2sgaXMgcHJpbWFyaWx5IGZvciAnaW5jbHVkZScgbW9kZSBsb2dpYy5cclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50TW9kZSAhPT0gJ2luY2x1ZGUnKSB7XHJcbiAgICAgICAgICAgICAvLyBJbiAnZXhjbHVkZScgbW9kZSwgY29uY2VwdHVhbGx5IGV2ZXJ5dGhpbmcgaXMgaW5jbHVkZWQgdW5sZXNzIGV4Y2x1ZGVkLlxyXG4gICAgICAgICAgICAgLy8gRm9yIGludGVybmFsIGNoZWNrcywgd2UgbWlnaHQgbmVlZCB0aGUgaW52ZXJzZSBvZiBleGNsdXNpb24uXHJcbiAgICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNQYXRoRWZmZWN0aXZlbHlFeGNsdWRlZChwYXRoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBwYXRoIGl0c2VsZiBpcyBzZWxlY3RlZCAoYXBwbGllcyB0byBib3RoIGZpbGVzIGFuZCBmb2xkZXJzKVxyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRGaWxlcy5oYXMocGF0aCkgfHwgdGhpcy5jdXJyZW50Rm9sZGVycy5oYXMocGF0aCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiBhbnkgYW5jZXN0b3IgRk9MREVSIGlzIHNlbGVjdGVkXHJcbiAgICAgICAgbGV0IGN1cnJlbnQgPSBwYXRoO1xyXG4gICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSAnLycpIHtcclxuICAgICAgICAgICAgY29uc3QgcGFyZW50UGF0aCA9IGN1cnJlbnQuc3Vic3RyaW5nKDAsIGN1cnJlbnQubGFzdEluZGV4T2YoJy8nKSkgfHwgJy8nO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50Rm9sZGVycy5oYXMocGFyZW50UGF0aCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBBbiBhbmNlc3RvciBmb2xkZXIgaXMgc2VsZWN0ZWRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFyZW50UGF0aCA9PT0gY3VycmVudCkgYnJlYWs7IC8vIFJlYWNoZWQgcm9vdCBvciBlcnJvclxyXG4gICAgICAgICAgICBjdXJyZW50ID0gcGFyZW50UGF0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gTmVpdGhlciB0aGUgcGF0aCBub3IgYW55IGFuY2VzdG9yIGZvbGRlciBpcyBzZWxlY3RlZFxyXG4gICAgfVxyXG5cclxuICAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byBkZXRlcm1pbmUgaWYgYSBnaXZlbiBwYXRoIGlzIGVmZmVjdGl2ZWx5IGV4Y2x1ZGVkXHJcbiAgICAgKiBpbiB0aGUgY3VycmVudCBzZWxlY3Rpb24gdW5kZXIgJ2V4Y2x1ZGUnIG1vZGUuXHJcbiAgICAgKiBBIHBhdGggaXMgZXhjbHVkZWQgaWYgaXQgKGZpbGUgb3IgZm9sZGVyKSBpcyBzZWxlY3RlZCwgb3IgaWYgYW55IG9mIGl0cyBhbmNlc3RvciBGT0xERVJTIGFyZSBzZWxlY3RlZC5cclxuICAgICAqIEBwYXJhbSBwYXRoIC0gVGhlIGZvbGRlciBvciBmaWxlIHBhdGggdG8gY2hlY2suXHJcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBwYXRoIHNob3VsZCBiZSBjb25zaWRlcmVkIGV4Y2x1ZGVkLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaXNQYXRoRWZmZWN0aXZlbHlFeGNsdWRlZChwYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICAgLy8gVGhpcyBjaGVjayBpcyBwcmltYXJpbHkgZm9yICdleGNsdWRlJyBtb2RlIGxvZ2ljLlxyXG4gICAgICAgICBpZiAodGhpcy5jdXJyZW50TW9kZSAhPT0gJ2V4Y2x1ZGUnKSB7XHJcbiAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBwYXRoIGl0c2VsZiBpcyBzZWxlY3RlZFxyXG4gICAgICAgICBpZiAodGhpcy5jdXJyZW50RmlsZXMuaGFzKHBhdGgpIHx8IHRoaXMuY3VycmVudEZvbGRlcnMuaGFzKHBhdGgpKSB7XHJcbiAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgLy8gQ2hlY2sgaWYgYW55IGFuY2VzdG9yIEZPTERFUiBpcyBzZWxlY3RlZFxyXG4gICAgICAgICBsZXQgY3VycmVudCA9IHBhdGg7XHJcbiAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSAnLycpIHtcclxuICAgICAgICAgICAgIGNvbnN0IHBhcmVudFBhdGggPSBjdXJyZW50LnN1YnN0cmluZygwLCBjdXJyZW50Lmxhc3RJbmRleE9mKCcvJykpIHx8ICcvJztcclxuICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRGb2xkZXJzLmhhcyhwYXJlbnRQYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBBbiBhbmNlc3RvciBmb2xkZXIgaXMgc2VsZWN0ZWRcclxuICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIGlmIChwYXJlbnRQYXRoID09PSBjdXJyZW50KSBicmVhazsgLy8gUmVhY2hlZCByb290IG9yIGVycm9yXHJcbiAgICAgICAgICAgICBjdXJyZW50ID0gcGFyZW50UGF0aDtcclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBOZWl0aGVyIHRoZSBwYXRoIG5vciBhbnkgYW5jZXN0b3IgZm9sZGVyIGlzIHNlbGVjdGVkIGZvciBleGNsdXNpb25cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21iaW5lcyBidWlsZGluZyB0aGUgdHJlZSBkYXRhLCByZW5kZXJpbmcgdGhlIERPTSwgYW5kIGFwcGx5aW5nIGluaXRpYWwgYXBwZWFyYW5jZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBidWlsZEFuZFJlbmRlclRyZWUoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0J1aWxkaW5nIGFuZCByZW5kZXJpbmcgdHJlZS4uLicpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyVHJlZSgpOyAvLyBCdWlsZCBkYXRhIGFuZCByZW5kZXIgRE9NIGVsZW1lbnRzXHJcbiAgICAgICAgdGhpcy51cGRhdGVUcmVlQXBwZWFyYW5jZSgpOyAvLyBBcHBseSBzdHlsZXMgYmFzZWQgb24gY3VycmVudCBtb2RlL3NlbGVjdGlvblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBtb2RhbCBpcyBjbG9zZWQuIENsZWFucyB1cCByZXNvdXJjZXMuXHJcbiAgICAgKi9cclxuICAgIG9uQ2xvc2UoKSB7XHJcbiAgICAgICAgLy8gR2F0aGVyIHRoZSBmaW5hbCBzdGF0ZSBPTkxZIHdoZW4gT0sgaXMgY2xpY2tlZFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogRGlyZWN0b3J5U2VsZWN0aW9uUmVzdWx0ID0ge1xyXG4gICAgICAgICAgICBmb2xkZXJzOiBBcnJheS5mcm9tKHRoaXMuY3VycmVudEZvbGRlcnMpLFxyXG4gICAgICAgICAgICBmaWxlczogQXJyYXkuZnJvbSh0aGlzLmN1cnJlbnRGaWxlcyksXHJcbiAgICAgICAgICAgIG1vZGU6IHRoaXMuY3VycmVudE1vZGUsXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IHRoaXMuY3VycmVudERpc3BsYXksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIk9LIENsaWNrZWQgLSBSZXR1cm5pbmcgUmVzdWx0OlwiLCByZXN1bHQpOyAvLyBEZWJ1ZyBsb2dcclxuICAgICAgICB0aGlzLm9rQ2FsbGJhY2socmVzdWx0KTsgLy8gUGFzcyB0aGUgZmluYWwgc2VsZWN0aW9uIGJhY2tcclxuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTsgLy8gQ2xlYXIgdGhlIG1vZGFsJ3MgY29udGVudFxyXG4gICAgICAgIHRoaXMudHJlZU5vZGVzLmNsZWFyKCk7IC8vIENsZWFyIHRoZSBub2RlIG1hcCB0byBmcmVlIG1lbW9yeVxyXG4gICAgICAgIHRoaXMubW9kZURyb3Bkb3duID0gbnVsbDsgLy8gQ2xlYXIgcmVmZXJlbmNlXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZWFzaWx5IG9wZW4gdGhlIERpcmVjdG9yeSBTZWxlY3Rpb24gTW9kYWwuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcHAgLSBUaGUgT2JzaWRpYW4gQXBwIGluc3RhbmNlLlxyXG4gKiBAcGFyYW0gaW5pdGlhbEZvbGRlcnMgLSBBcnJheSBvZiBpbml0aWFsbHkgc2VsZWN0ZWQgZm9sZGVyIHBhdGhzLlxyXG4gKiBAcGFyYW0gaW5pdGlhbEZpbGVzIC0gQXJyYXkgb2YgaW5pdGlhbGx5IHNlbGVjdGVkIGZpbGUgcGF0aHMuXHJcbiAqIEBwYXJhbSBpbml0aWFsTW9kZSAtIFRoZSBpbml0aWFsIHNlbGVjdGlvbiBtb2RlICgnaW5jbHVkZScgb3IgJ2V4Y2x1ZGUnKS5cclxuICogQHBhcmFtIG9rQ2FsbGJhY2sgLSBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIHVzZXIgY2xpY2tzIFwiT0tcIi4gUmVjZWl2ZXMgdGhlIHNlbGVjdGlvbiByZXN1bHQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gb3BlbkRpcmVjdG9yeVNlbGVjdGlvbk1vZGFsKFxyXG4gICAgYXBwOiBBcHAsXHJcbiAgICBpbml0aWFsRm9sZGVyczogc3RyaW5nW10sXHJcbiAgICBpbml0aWFsRmlsZXM6IHN0cmluZ1tdLFxyXG4gICAgaW5pdGlhbE1vZGU6ICdpbmNsdWRlJyB8ICdleGNsdWRlJyxcclxuICAgIGluaXRpYWxEaXNwbGF5OiAnZm9sZGVycycgfCAnZmlsZXMnLFxyXG4gICAgaW5jbHVkZUV4Y2x1ZGVTZWxlY3RhYmxlOiBib29sZWFuLFxyXG4gICAgb2tDYWxsYmFjazogKHJlc3VsdDogRGlyZWN0b3J5U2VsZWN0aW9uUmVzdWx0IHwgbnVsbCkgPT4gdm9pZFxyXG4pOiB2b2lkIHtcclxuICAgIC8vIENyZWF0ZSBhbmQgb3BlbiB0aGUgbW9kYWwgaW5zdGFuY2VcclxuICAgIG5ldyBEaXJlY3RvcnlTZWxlY3Rpb25Nb2RhbChcclxuICAgICAgICBhcHAsXHJcbiAgICAgICAgaW5pdGlhbEZvbGRlcnMsXHJcbiAgICAgICAgaW5pdGlhbEZpbGVzLFxyXG4gICAgICAgIGluaXRpYWxNb2RlLFxyXG4gICAgICAgIGluaXRpYWxEaXNwbGF5LFxyXG4gICAgICAgIGluY2x1ZGVFeGNsdWRlU2VsZWN0YWJsZSxcclxuICAgICAgICBva0NhbGxiYWNrXHJcbiAgICApLm9wZW4oKTtcclxufVxyXG5cclxuLypcclxuLy8gLS0tIEV4YW1wbGUgVXNhZ2UgaW4geW91ciBQbHVnaW4ncyBTZXR0aW5ncyBUYWIgLS0tXHJcbi8vIChQbGFjZSB0aGlzIGluIHlvdXIgc2V0dGluZ3MgdGFiIGZpbGUsIGUuZy4sIHNldHRpbmdzLnRzKVxyXG5cclxuaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBvcGVuRGlyZWN0b3J5U2VsZWN0aW9uTW9kYWwsIERpcmVjdG9yeVNlbGVjdGlvblJlc3VsdCB9IGZyb20gJy4vRGlyZWN0b3J5U2VsZWN0aW9uTW9kYWwnOyAvLyBBZGp1c3QgcGF0aCBhcyBuZWVkZWRcclxuaW1wb3J0IFlvdXJQbHVnaW4gZnJvbSAnLi9tYWluJzsgLy8gQWRqdXN0IHBhdGggdG8geW91ciBtYWluIHBsdWdpbiBmaWxlXHJcblxyXG4vLyAtLS0gRXhhbXBsZSBQbHVnaW4gU2V0dGluZ3MgSW50ZXJmYWNlIChpbiB5b3VyIG1haW4udHMgb3Igc2V0dGluZ3MgZmlsZSkgLS0tXHJcbmV4cG9ydCBpbnRlcmZhY2UgWW91clBsdWdpblNldHRpbmdzIHtcclxuICAgIHNlbGVjdGVkRm9sZGVyczogc3RyaW5nW107XHJcbiAgICBzZWxlY3RlZEZpbGVzOiBzdHJpbmdbXTtcclxuICAgIHNlbGVjdGlvbk1vZGU6ICdpbmNsdWRlJyB8ICdleGNsdWRlJztcclxuICAgIC8vIC4uLiBvdGhlciBzZXR0aW5ncyBmb3IgeW91ciBwbHVnaW5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFlvdXJQbHVnaW5TZXR0aW5ncyA9IHtcclxuICAgIHNlbGVjdGVkRm9sZGVyczogW10sXHJcbiAgICBzZWxlY3RlZEZpbGVzOiBbXSxcclxuICAgIHNlbGVjdGlvbk1vZGU6ICdleGNsdWRlJywgLy8gRGVmYXVsdCBtb2RlIGlzIG9mdGVuICdleGNsdWRlJ1xyXG4gICAgLy8gLi4uIG90aGVyIGRlZmF1bHQgc2V0dGluZ3NcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBZb3VyUGx1Z2luU2V0dGluZ3NUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuICAgIHBsdWdpbjogWW91clBsdWdpbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBZb3VyUGx1Z2luKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3BsYXkoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcclxuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdFaW5zdGVsbHVuZ2VuIGZcdTAwRkNyIE1laW4gUGx1Z2luJyB9KTsgLy8gU2V0dGluZ3MgVGl0bGUgaW4gR2VybWFuXHJcblxyXG4gICAgICAgIC8vIC0tLSBCdXR0b24gdG8gT3BlbiB0aGUgTW9kYWwgLS0tXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdWZXJ6ZWljaG5pc3NlL0RhdGVpZW4ga29uZmlndXJpZXJlbicpIC8vIFNldHRpbmcgTmFtZSBpbiBHZXJtYW5cclxuICAgICAgICAgICAgLnNldERlc2MoJ0tsaWNrZSBhdWYgZGVuIEJ1dHRvbiwgdW0gZGllIEF1c3dhaGwgenUgYmVhcmJlaXRlbi4nKSAvLyBTZXR0aW5nIERlc2NyaXB0aW9uIGluIEdlcm1hblxyXG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICBidXR0b25cclxuICAgICAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnQXVzd2FobCBcdTAwRjZmZm5lbicpIC8vIEJ1dHRvbiBUZXh0IGluIEdlcm1hblxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRDdGEoKSAvLyBNYWtlcyB0aGUgYnV0dG9uIG1vcmUgcHJvbWluZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXRyaWV2ZSBjdXJyZW50IHNldHRpbmdzIHRvIHByZS1wb3B1bGF0ZSB0aGUgbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEZvbGRlcnMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWxlY3RlZEZvbGRlcnMgfHwgW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRGaWxlcyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnNlbGVjdGVkRmlsZXMgfHwgW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRNb2RlID0gdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0aW9uTW9kZSB8fCAnZXhjbHVkZSc7IC8vIFVzZSBkZWZhdWx0IGlmIG5vdCBzZXRcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZW4gdGhlIG1vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5EaXJlY3RvcnlTZWxlY3Rpb25Nb2RhbChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZvbGRlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RmlsZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TW9kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIG9rQ2FsbGJhY2sgZnVuY3Rpb246XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmVzdWx0OiBEaXJlY3RvcnlTZWxlY3Rpb25SZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQXVzd2FobCBiZXN0XHUwMEU0dGlndDonLCByZXN1bHQpOyAvLyBMb2cgcmVzdWx0IGluIEdlcm1hbiBjb25zb2xlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0tLSBJTVBPUlRBTlQ6IFNhdmUgdGhlIHJlc3VsdHMgYmFjayB0byB5b3VyIHBsdWdpbiBzZXR0aW5ncyAtLS1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWxlY3RlZEZvbGRlcnMgPSByZXN1bHQuZm9sZGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWxlY3RlZEZpbGVzID0gcmVzdWx0LmZpbGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNlbGVjdGlvbk1vZGUgPSByZXN1bHQubW9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTsgLy8gUGVyc2lzdCB0aGUgY2hhbmdlc1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPcHRpb25hbGx5LCByZS1yZW5kZXIgdGhlIHNldHRpbmdzIHRhYiB0byBzaG93IHRoZSB1cGRhdGVkIHNlbGVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpOyAvLyBSZS1yZW5kZXIgc2V0dGluZ3MgdGFiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgLy8gLS0tIERpc3BsYXkgQ3VycmVudCBTZWxlY3Rpb24gKFJlYWQtb25seSkgLS0tXHJcbiAgICAgICAgIGNvbnN0IHNlbGVjdGlvbkluZm9FbCA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogJ3NldHRpbmdzLXNlbGVjdGlvbi1pbmZvJyB9KTtcclxuICAgICAgICAgc2VsZWN0aW9uSW5mb0VsLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ0FrdHVlbGxlIEF1c3dhaGw6JyB9KTsgLy8gU2VjdGlvbiBUaXRsZSBpbiBHZXJtYW5cclxuICAgICAgICAgY29uc3QgbW9kZVRleHQgPSBgTW9kdXM6ICR7dGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0aW9uTW9kZSB8fCAnTmljaHQgZmVzdGdlbGVndCd9YDsgLy8gVGV4dCBpbiBHZXJtYW5cclxuICAgICAgICAgLy8gVHJ1bmNhdGUgbG9uZyBsaXN0cyBmb3IgZGlzcGxheSBpZiBuZWNlc3NhcnlcclxuICAgICAgICAgY29uc3QgZm9sZGVyVGV4dCA9IGBBdXNnZXdcdTAwRTRobHRlIE9yZG5lcjogJHsodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VsZWN0ZWRGb2xkZXJzPy5sZW5ndGggfHwgMCl9IFN0XHUwMEZDY2tgOyAvLyBUZXh0IGluIEdlcm1hblxyXG4gICAgICAgICBjb25zdCBmaWxlVGV4dCA9IGBBdXNnZXdcdTAwRTRobHRlIERhdGVpZW46ICR7KHRoaXMucGx1Z2luLnNldHRpbmdzLnNlbGVjdGVkRmlsZXM/Lmxlbmd0aCB8fCAwKX0gU3RcdTAwRkNja2A7IC8vIFRleHQgaW4gR2VybWFuXHJcblxyXG4gICAgICAgICBzZWxlY3Rpb25JbmZvRWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6IG1vZGVUZXh0IH0pO1xyXG4gICAgICAgICBzZWxlY3Rpb25JbmZvRWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6IGZvbGRlclRleHQgfSk7XHJcbiAgICAgICAgIHNlbGVjdGlvbkluZm9FbC5jcmVhdGVFbCgncCcsIHsgdGV4dDogZmlsZVRleHQgfSk7XHJcbiAgICAgICAgIC8vIFlvdSBjb3VsZCBhZGQgYSBzbWFsbCBidXR0b24vbGluayBoZXJlIHRvIHZpZXcgdGhlIGZ1bGwgbGlzdCBpZiBpdCdzIGxvbmdcclxuICAgIH1cclxufVxyXG4qL1xyXG4iLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIERyb3Bkb3duQ29tcG9uZW50LCBUZXh0Q29tcG9uZW50LCBCdXR0b25Db21wb25lbnQsIFRvZ2dsZUNvbXBvbmVudCwgc2V0SWNvbiwgYXBpVmVyc2lvbiB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgb3BlbkRpcmVjdG9yeVNlbGVjdGlvbk1vZGFsLCBEaXJlY3RvcnlTZWxlY3Rpb25SZXN1bHQgfSBmcm9tICcuL2RpcmVjdG9yeVNlbGVjdGlvbk1vZGFsJztcclxuaW1wb3J0IHsgdmVyc2lvblN0cmluZywgRm9sZGVyVGFnUnVsZURlZmluaXRpb24sIERFRkFVTFRfUlVMRV9ERUZJTklUSU9OLCBQcm9wZXJ0eVR5cGVJbmZvLCBPYnNpZGlhblByb3BlcnR5VHlwZXMsIERFRkFVTFRfRklMVEVSX0ZJTEVTX0FORF9GT0xERVJTfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgZ2V0UnVsZUZ1bmN0aW9uQnlJZCwgcnVsZUZ1bmN0aW9ucywgUnVsZUZ1bmN0aW9uLCBleGVjdXRlUnVsZSwgY2hlY2tJZkZpbGVBbGxvd2VkIH0gZnJvbSAnLi9ydWxlcyc7XHJcbmltcG9ydCB7IEFsZXJ0TW9kYWwgfSBmcm9tICcuL2FsZXJ0Qm94JztcclxuaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gJ2NyeXB0byc7XHJcbmltcG9ydCB7IGNvZGVFZGl0b3JNb2RhbCwgY29kZUVkaXRvck1vZGFsUmVzdWx0LCBvcGVuQ29kZUVkaXRvck1vZGFsIH0gZnJvbSAnLi9lZGl0b3JNb2RhbCc7XHJcbmltcG9ydCB7IGNvcHlGaWxlU3luYyB9IGZyb20gJ2ZzJztcclxuXHJcbmV4cG9ydCB0eXBlIFByb3BlcnR5SW5mbyA9IHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHR5cGU6IE9ic2lkaWFuUHJvcGVydHlUeXBlcztcclxuICAgIGNvdW50PzogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIFJ1bGVzVGFibGUgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuICAgIHBsdWdpbjogYW55O1xyXG4gICAga25vd25Qcm9wZXJ0aWVzOiBSZWNvcmQ8c3RyaW5nLCBQcm9wZXJ0eUluZm8+ID0ge307IC8vIENhY2hlIGZcdTAwRkNyIGdlZnVuZGVuZSBQcm9wZXJ0aWVzXHJcbiAgICBjb250YWluZXI6IEhUTUxEaXZFbGVtZW50O1xyXG4gICAgcHJvcGVydGllc0xpc3RFbDogSFRNTERpdkVsZW1lbnQ7XHJcbiAgICBzZXR0aW5nc1BhcmFtZXRlcjogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IGFueSwgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCwgc2V0dGluZ3NQYXJhbWV0ZXI6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgICAgICB0aGlzLnNldHRpbmdzUGFyYW1ldGVyID0gc2V0dGluZ3NQYXJhbWV0ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqIEZldGNoZXMgY3VzdG9tIHByb3BlcnR5IGluZm9ybWF0aW9uIGZyb20gYWxsIG1hcmtkb3duIGZpbGVzIGluIHRoZSB2YXVsdC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHsqfSBcclxuICAgICAqL1xyXG4gICAgZmV0Y2hDdXN0b21Qcm9wZXJ0eUluZm9zKCkge1xyXG4gICAgICAgIGNvbnN0IHByb3BlcnR5SW5mb3M6IFJlY29yZDxzdHJpbmcsIFByb3BlcnR5SW5mbz4gPSB7fTtcclxuXHJcbiAgICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7IC8vIFJldHJpZXZlIGFsbCBtYXJrZG93biBmaWxlc1xyXG4gICAgICAgIGZpbGVzLmZvckVhY2goZmlsZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XHJcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YT8uZnJvbnRtYXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG1ldGFkYXRhLmZyb250bWF0dGVyKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eUluZm9zW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlJbmZvc1trZXldID0geyBuYW1lOiBrZXksIHR5cGU6ICd0ZXh0JyB9OyAvLyBEZWZhdWx0IHR5cGUgYXMgJ3RleHQnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5SW5mb3M7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZmV0Y2hLbm93blByb3BlcnRpZXMoKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEFsbFByb3BlcnR5SW5mb3MgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5rbm93blByb3BlcnRpZXMgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEFsbFByb3BlcnR5SW5mb3MoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydGllcyA9IHRoaXMuZmV0Y2hDdXN0b21Qcm9wZXJ0eUluZm9zKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMua25vd25Qcm9wZXJ0aWVzID0gT2JqZWN0LmZyb21FbnRyaWVzKFxyXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyh0aGlzLmtub3duUHJvcGVydGllcykuc29ydCgoW2tleUFdLCBba2V5Ql0pID0+IGtleUEubG9jYWxlQ29tcGFyZShrZXlCKSlcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMua25vd25Qcm9wZXJ0aWVzKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBIZWxwZXIgdG8gcmVuZGVyIG9uZSBydWxlXHJcblxyXG4gICAgcmVuZGVyUHJvcGVydHlSb3coY29udGFpbmVyRWw6IEhUTUxFbGVtZW50LCBydWxlOiBGb2xkZXJUYWdSdWxlRGVmaW5pdGlvbiwgaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG5cclxuICAgICAgICBjb25zdCByb3dFbCA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogJ3Byb3BlcnR5LXNldHRpbmctcm93IHNldHRpbmctaXRlbScgfSk7XHJcbiAgICAgICAgcm93RWwuaWQgPSBydWxlLmlkO1xyXG4gICAgICAgIGNvbnN0IGNvbnRyb2xFbCA9IHJvd0VsLmNyZWF0ZURpdih7IGNsczogJ3NldHRpbmctaXRlbS1jb250cm9sJyB9KTsgXHJcbiAgICAgICAgY29udHJvbEVsLnN0eWxlLmdhcCA9ICcwcHgnO1xyXG4gICAgICAgIGNvbnN0IGxlZnRDb250YWluZXIgPSBjb250cm9sRWwuY3JlYXRlRGl2KHsgY2xzOiAncHJvcGVydHktbGVmdC1jb250YWluZXInIH0pO1xyXG4gICAgICAgIGNvbnN0IGljb25FbCA9IGxlZnRDb250YWluZXIuY3JlYXRlU3Bhbih7IGNsczogJ3Byb3BlcnR5LWljb24gc2V0dGluZy1pdGVtLWljb24nIH0pOyBcclxuICAgICAgICBzZXRJY29uKGljb25FbCwgJ2hhc2gnKTsgLy8gU3RhbmRhcmQtSWNvblxyXG5cclxuXHJcbiAgICAgICAgY29uc3Qgc2VhcmNoQ29udGFpbmVyID0gbGVmdENvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdwcm9wZXJ0eS1zZWFyY2gtY29udGFpbmVyJyB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgbmFtZUlucHV0ID0gbmV3IFRleHRDb21wb25lbnQoc2VhcmNoQ29udGFpbmVyKVxyXG4gICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ1NlbGVjdCBwcm9wZXJ0eS4uLicpXHJcbiAgICAgICAgICAgIC5zZXRWYWx1ZShydWxlLnByb3BlcnR5IHx8ICcnKVxyXG4gICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclNlYXJjaFJlc3VsdHMoc2VhcmNoQ29udGFpbmVyLCB2YWx1ZSwgaW5kZXgpO1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICBuYW1lSW5wdXQuaW5wdXRFbC5zdHlsZS5ib3JkZXIgPSAnbm9uZSc7IC8vIG1ha2UgaXQgaW52aXNpYmxlXHJcbiAgICAgICAgbmFtZUlucHV0LmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyU2VhcmNoUmVzdWx0cyhzZWFyY2hDb250YWluZXIsIG5hbWVJbnB1dC5nZXRWYWx1ZSgpLCBpbmRleCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbmFtZUlucHV0LmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyU2VhcmNoUmVzdWx0cyhzZWFyY2hDb250YWluZXIsIG5hbWVJbnB1dC5nZXRWYWx1ZSgpLCBpbmRleCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbmFtZUlucHV0LmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSBldmVudC5yZWxhdGVkVGFyZ2V0IGFzIE5vZGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRzRWwgPSBzZWFyY2hDb250YWluZXIucXVlcnlTZWxlY3RvcignLnByb3BlcnR5LXNlYXJjaC1yZXN1bHRzJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdHNFbCB8fCAhcmVzdWx0c0VsLmNvbnRhaW5zKHJlbGF0ZWRUYXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhclNlYXJjaFJlc3VsdHMoc2VhcmNoQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgY3VycmVudFByb3BlcnR5SW5mbyA9IHRoaXMua25vd25Qcm9wZXJ0aWVzW3J1bGUucHJvcGVydHldO1xyXG4gICAgICAgIGlmIChjdXJyZW50UHJvcGVydHlJbmZvKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVByb3BlcnR5SWNvbihpY29uRWwsIGN1cnJlbnRQcm9wZXJ0eUluZm8udHlwZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChydWxlLnByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgIHNldEljb24oaWNvbkVsLCAnYWxlcnQtY2lyY2xlJyk7IFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbWlkZGxlQ29udGFpbmVyID0gY29udHJvbEVsLmNyZWF0ZURpdih7IGNsczogJ3Byb3BlcnR5LW1pZGRsZS1jb250YWluZXInIH0pO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlQ29udGFpbmVyID0gbWlkZGxlQ29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ3Byb3BlcnR5LXZhbHVlLWNvbnRhaW5lcicgfSk7XHJcbiAgICAgICAgaWYgKGFjdGl2ZUZpbGUpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKGFjdGl2ZUZpbGUsIChmcm9udG1hdHRlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcnVsZS52YWx1ZSA9IGV4ZWN1dGVSdWxlKHRoaXMuYXBwLCB0aGlzLnBsdWdpbi5zZXR0aW5ncywgYWN0aXZlRmlsZSwgJycsIHJ1bGUsIGZyb250bWF0dGVyKTtcclxuICAgICAgICAgICAgfSx7J210aW1lJzphY3RpdmVGaWxlLnN0YXQubXRpbWV9KTsgLy8gZG8gbm90IGNoYW5nZSB0aGUgbW9kaWZ5IHRpbWUuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwcmV2aWV3Q29tcG9uZW50ID0gdGhpcy5yZW5kZXJWYWx1ZUlucHV0KHZhbHVlQ29udGFpbmVyLCBjdXJyZW50UHJvcGVydHlJbmZvLCBydWxlLnZhbHVlLCBpbmRleCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb3BlcnR5RGV2RHJvcGRvd24gPSAgbmV3IERyb3Bkb3duQ29tcG9uZW50KG1pZGRsZUNvbnRhaW5lcik7XHJcbiAgICAgICAgcHJvcGVydHlEZXZEcm9wZG93bi5zZWxlY3RFbC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywnd2lkdGg6MzUlJyk7XHJcbiAgICAgICAgcHJvcGVydHlEZXZEcm9wZG93bi5hZGRPcHRpb24oXCJcIiwgXCJTZWxlY3QgYSBjb250ZW50XCIpO1xyXG4gICAgICAgIGZvciAobGV0IHJ1bGVGdW5jdGlvbiBvZiBydWxlRnVuY3Rpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJ1bGUudHlwZSk7XHJcbiAgICAgICAgICAgIGlmIChydWxlRnVuY3Rpb24udHlwZS5jb250YWlucyhydWxlLnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURldkRyb3Bkb3duLmFkZE9wdGlvbihydWxlRnVuY3Rpb24uaWQsIHJ1bGVGdW5jdGlvbi5kZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHJvcGVydHlEZXZEcm9wZG93bi5hZGRPcHRpb24oXCJzY3JpcHRcIiwgXCJKYXZhU2NyaXB0IGZ1bmN0aW9uIChhZHZhbmNlZClcIik7XHJcbiAgICAgICAgcHJvcGVydHlEZXZEcm9wZG93bi5zZXRWYWx1ZShydWxlLmNvbnRlbnQpO1xyXG4gICAgICAgIHByb3BlcnR5RGV2RHJvcGRvd24ub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09ICdzY3JpcHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9sZE9yaWdpbmFsQ29kZSA9IGdldFJ1bGVGdW5jdGlvbkJ5SWQocnVsZS5jb250ZW50KT8uc291cmNlIHx8IHJ1bGVGdW5jdGlvbnNbMF0uc291cmNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocnVsZS5idWlsZEluQ29kZSAhPT0gJycpICYmIChydWxlLmJ1aWxkSW5Db2RlICE9PSBvbGRPcmlnaW5hbENvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNob3VsZFByb2NlZWQgPSBhd2FpdCBuZXcgQWxlcnRNb2RhbChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnT3ZlcndyaXRlIGV4aXN0aW5nIGNvZGU/JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSSBzZWVzIGxpa2UgeW91IGhhdmUgY3VzdG9tIGNvZGUgZm9yIHRoaXMgcnVsZSEgU2hvdWxkIHRoaXMgYmUgb3ZlcndyaXR0ZW4gYnkgZGVmYXVsdCBjb2RlIGZvciB0aGlzIHBhcmFtZXRlcj8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdZZXMnLCAnTm8nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLm9wZW5BbmRHZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkUHJvY2VlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5idWlsZEluQ29kZSA9IGdldFJ1bGVGdW5jdGlvbkJ5SWQodmFsdWUpPy5zb3VyY2UgfHwgcnVsZUZ1bmN0aW9uc1swXS5zb3VyY2U7IC8vIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5idWlsZEluQ29kZTsgLy8ga2VlcCB0aGUgZXhpc3RpbmcgY29kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuYnVpbGRJbkNvZGUgPSBnZXRSdWxlRnVuY3Rpb25CeUlkKHZhbHVlKT8uc291cmNlIHx8IHJ1bGVGdW5jdGlvbnNbMF0uc291cmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY21FZGl0b3I/LnNldFZhbHVlKHJ1bGUuanNDb2RlIT09JycgPyBydWxlLmpzQ29kZSA6IHJ1bGVGdW5jdGlvbnNbMF0uc291cmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJ1bGUuY29udGVudCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgLy9ydWxlT3B0aW9uc0Rpdi5zdHlsZS5kaXNwbGF5ID0gYCR7KHJ1bGUuY29udGVudCA9PT0gJ3NjcmlwdCcpID8gJ2ZsZXgnIDogJ25vbmUnfWA7XHJcbiAgICAgICAgICAgICAgICAvL3Nob3dKc0Z1bmN0aW9uQnV0dG9uKHJ1bGUuY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJldmlldyhhY3RpdmVGaWxlLCBydWxlLCBwcmV2aWV3Q29tcG9uZW50LmlucHV0RWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQobWlkZGxlQ29udGFpbmVyKVxyXG4gICAgICAgIC5zZXRJY29uKCdnZWFyJylcclxuICAgICAgICAuc2V0VG9vbHRpcCgnb3BlbiBzZXR0aW5ncycpXHJcbiAgICAgICAgLnNldENsYXNzKCdwcm9wZXJ0eS1pY29uLWJ1dHRvbicpXHJcbiAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgc2V0dGluZ3NDb250YWluZXJzID0gY29udGFpbmVyRWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncHJvcGVydHktb3B0aW9ucy1jb250YWluZXInKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgY29udGFpbmVyIG9mIHNldHRpbmdzQ29udGFpbmVycykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2lkJykgIT09IHJ1bGUuaWQpIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywnZGlzcGxheTogbm9uZTsnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcHRpb25FTC5zdHlsZS5kaXNwbGF5ID0gb3B0aW9uRUwuc3R5bGUuZGlzcGxheSA9PT0gJ2Jsb2NrJyA/ICdub25lJyA6ICdibG9jayc7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIC0tLSByaWdodCBwYXJ0OiBlcmFzZSBydWxlIC0tLVxyXG4gICAgICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbkNvbnRhaW5lciA9IGNvbnRyb2xFbC5jcmVhdGVEaXYoeyBjbHM6ICdwcm9wZXJ0eS1kZWxldGUtYnV0dG9uLWNvbnRhaW5lcicgfSk7XHJcbiAgICAgICAgbmV3IEJ1dHRvbkNvbXBvbmVudChkZWxldGVCdXR0b25Db250YWluZXIpXHJcbiAgICAgICAgICAgIC5zZXRJY29uKCd0cmFzaC0yJylcclxuICAgICAgICAgICAgLnNldFRvb2x0aXAoJ3JlbW92ZSB0aGlzIHJ1bGUnKVxyXG4gICAgICAgICAgICAuc2V0Q2xhc3MoJ21vZC1zdWJ0bGUnKVxyXG4gICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5nc1t0aGlzLnNldHRpbmdzUGFyYW1ldGVyXS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTsgLy8gUmUtcmVuZGVyIHRoZSBzZXR0aW5ncyB0YWJcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnRyb2xFbC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICAgIGNvbnRyb2xFbC5zdHlsZS5hbGlnbkl0ZW1zID0gJ2NlbnRlcic7XHJcbiAgICAgICAgY29udHJvbEVsLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gJ3NwYWNlLWJldHdlZW4nO1xyXG4gICAgICAgIGNvbnRyb2xFbC5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuXHJcbiAgICAgICAgbGVmdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICAgIGxlZnRDb250YWluZXIuc3R5bGUuYWxpZ25JdGVtcyA9ICdjZW50ZXInO1xyXG4gICAgICAgIGxlZnRDb250YWluZXIuc3R5bGUubWluV2lkdGggPSAnMTUwcHgnOyBcclxuICAgICAgICBpY29uRWwuc3R5bGUubWFyZ2luUmlnaHQgPSAnOHB4JztcclxuXHJcbiAgICAgICAgc2VhcmNoQ29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJzsgXHJcbiAgICAgICAgc2VhcmNoQ29udGFpbmVyLnN0eWxlLmZsZXhHcm93ID0gJzEnO1xyXG5cclxuICAgICAgICB2YWx1ZUNvbnRhaW5lci5zdHlsZS5mbGV4R3JvdyA9ICcyJzsgXHJcblxyXG4gICAgICAgIGRlbGV0ZUJ1dHRvbkNvbnRhaW5lci5zdHlsZS5tYXJnaW5MZWZ0ID0gJ2F1dG8nOyBcclxuXHJcbiAgICAgICAgY29uc3Qgb3B0aW9uRUwgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICdwcm9wZXJ0eS1vcHRpb25zLWNvbnRhaW5lcicgfSk7IC8vIG9wdGlvbnMgY29udGFpbmVyXHJcbiAgICAgICAgb3B0aW9uRUwuaWQgPSBydWxlLmlkO1xyXG4gICAgICAgIG9wdGlvbkVMLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlbW92ZUNvbnRlbnRCdXR0b24gPSBuZXcgU2V0dGluZyhvcHRpb25FTClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ1JlbW92ZSBjb250ZW50JylcclxuICAgICAgICAgICAgLnNldERlc2MoYEJlZm9yZSBtYWtpbmcgY2hhbmdlcyB5b3UgbWlnaHQgY29uc2lkZXIgdG8gcmVtb3ZlIGNvbnRlbnQgZ2VuZXJhdGVkIGJ5IHRoaXMgcnVsZWApXHJcbiAgICAgICAgICAgIC5hZGRCdXR0b24oYnV0dG9uID0+IHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRXYXJuaW5nKClcclxuICAgICAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnUmVtb3ZlIENvbnRlbnQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRDdGEoKSAvLyBNYWtlcyB0aGUgYnV0dG9uIG1vcmUgcHJvbWluZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY291bnQgPSB0aGlzLnBsdWdpbi5yZW1vdmVGcm9udG1hdHRlclBhcmFtc0Zyb21BbGxGaWxlcyhydWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnJlbW92ZUN0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uc2V0RGlzYWJsZWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNvbnRlbnRCdXR0b24uc2V0RGVzYyhgUmVtb3ZlZCB0aGlzIHJ1bGUgZnJvbSAke2NvdW50LmZpbGVzfSBmaWxlcy5gKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhvcHRpb25FTClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ1J1bGUgYWN0aXZlJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ0lmIGVuYWJsZWQsIHRoZSBydWxlIHdpbGwgYmUgZXhlY3V0ZWQnKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShydWxlLmFjdGl2ZSlcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBydWxlLmFjdGl2ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcob3B0aW9uRUwpXHJcbiAgICAgICAgLnNldE5hbWUoJ01vZGlmeSBvbmx5JylcclxuICAgICAgICAuc2V0RGVzYygnT25seSBtb2RpZnkgZXhpc3RpbmcgcHJvcGVydGllcycpXHJcbiAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXHJcbiAgICAgICAgICAgIC5zZXRWYWx1ZShydWxlLm9ubHlNb2RpZnkpXHJcbiAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgIHJ1bGUub25seU1vZGlmeSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByZXZpZXcoYWN0aXZlRmlsZSwgcnVsZSwgcHJldmlld0NvbXBvbmVudC5pbnB1dEVsKTtcclxuICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBpZiAocnVsZS50eXBlID09PSAndGV4dCcgfHwgcnVsZS50eXBlID09PSAnbXVsdGl0ZXh0JyB8fCBydWxlLnR5cGUgPT09ICd0YWdzJyB8fCBydWxlLnR5cGUgPT09ICdhbGlhc2VzJykge1xyXG4gICAgICAgICAgICBjb25zdCBydWxlRnVuY3Rpb24gPSBydWxlRnVuY3Rpb25zLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSBydWxlLmNvbnRlbnQpXHJcbiAgICAgICAgICAgIGlmIChydWxlRnVuY3Rpb24gJiYgcnVsZUZ1bmN0aW9uLmlucHV0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGlucHV0UHJvcGVydGllc0Ryb3Bkb3duO1xyXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcob3B0aW9uRUwpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoJ0lucHV0IFByb3BlcnR5JylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYygnU2VsZWN0IGEgcHJvcGVydHkgYXMgaW5wdXQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGREcm9wZG93bihkcm9wZG93biA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0UHJvcGVydGllc0Ryb3Bkb3duID0gZHJvcGRvd247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShydWxlLmFkZENvbnRlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLmlucHV0UHJvcGVydHkgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByZXZpZXcoYWN0aXZlRmlsZSwgcnVsZSwgcHJldmlld0NvbXBvbmVudC5pbnB1dEVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMua25vd25Qcm9wZXJ0aWVzKS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0UHJvcGVydGllc0Ryb3Bkb3duLmFkZE9wdGlvbihpdGVtWzFdLm5hbWUsaXRlbVsxXS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBpbnB1dFByb3BlcnRpZXNEcm9wZG93bi5zZXRWYWx1ZShydWxlLmlucHV0UHJvcGVydHkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocnVsZS50eXBlID09PSAndGFncycgfHwgcnVsZS50eXBlID09PSAnYWxpYXNlcycpIHtcclxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKG9wdGlvbkVMKVxyXG4gICAgICAgICAgICAgICAgLnNldE5hbWUoJ1ByZWZpeCcpXHJcbiAgICAgICAgICAgICAgICAuc2V0RGVzYygnT3B0aW9uYWwgcHJlZml4IHRvIGFkZCBiZWZvcmUgdGhlIGNvbnRlbnQgKGkuZS4gXCJwcmVmaXgvXCIpJylcclxuICAgICAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignbm8gcHJlZml4JylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUocnVsZS5wcmVmaXgpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlLnByZWZpeCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQcmV2aWV3KGFjdGl2ZUZpbGUsIHJ1bGUsIHByZXZpZXdDb21wb25lbnQuaW5wdXRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcob3B0aW9uRUwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdTcGFjZSByZXBsYWNlbWVudCcpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdDaGFyYWN0ZXIgdG8gcmVwbGFjZSBzcGFjZXMgaW4gZm9sZGVyIG5hbWVzIChzdWdnZXN0ZWQ6IFwiX1wiKScpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdubyByZXBsYWNlbWVudCcpXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUocnVsZS5zcGFjZVJlcGxhY2VtZW50KVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJ1bGUuc3BhY2VSZXBsYWNlbWVudCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJldmlldyhhY3RpdmVGaWxlLCBydWxlLCBwcmV2aWV3Q29tcG9uZW50LmlucHV0RWwpO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgbmV3IFNldHRpbmcob3B0aW9uRUwpXHJcbiAgICAgICAgICAgICAgICAuc2V0TmFtZSgnU3BlY2lhbCBjaGFyYWN0ZXIgcmVwbGFjZW1lbnQnKVxyXG4gICAgICAgICAgICAgICAgLnNldERlc2MoJ0NoYXJhY3RlciB0byByZXBsYWNlIHNwZWNpYWwgY2hhcmFjdGVycyAoc3VnZ2VzdGVkOiBcIi1cIikgLSBwcmVzZXJ2ZXMgbGV0dGVycyB3aXRoIGRpYWNyaXRpY3MnKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdubyByZXBsYWNlbWVudCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHJ1bGUuc3BlY2lhbENoYXJSZXBsYWNlbWVudClcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuc3BlY2lhbENoYXJSZXBsYWNlbWVudCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQcmV2aWV3KGFjdGl2ZUZpbGUsIHJ1bGUsIHByZXZpZXdDb21wb25lbnQuaW5wdXRFbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgbmV3IFNldHRpbmcob3B0aW9uRUwpXHJcbiAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQ29udmVydCB0byBsb3dlcmNhc2UnKVxyXG4gICAgICAgICAgICAgICAgLnNldERlc2MoJ0NvbnZlcnQgdmFsdWVzIHRvIGxvd2VyY2FzZScpXHJcbiAgICAgICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUocnVsZS5sb3dlcmNhc2VUYWdzKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5sb3dlcmNhc2VUYWdzID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByZXZpZXcoYWN0aXZlRmlsZSwgcnVsZSwgcHJldmlld0NvbXBvbmVudC5pbnB1dEVsKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhvcHRpb25FTClcclxuICAgICAgICAgICAgICAgIC5zZXROYW1lKCdSZXN1bHQgYXMgTGluaycpXHJcbiAgICAgICAgICAgICAgICAuc2V0RGVzYygnRm9ybWF0IFJlc3VsdCBhcyBMaW5rJylcclxuICAgICAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShydWxlLmFzTGluaylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuYXNMaW5rID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByZXZpZXcoYWN0aXZlRmlsZSwgcnVsZSwgcHJldmlld0NvbXBvbmVudC5pbnB1dEVsKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJ1bGUudHlwZSA9PT0gJ3RleHQnIHx8IHJ1bGUudHlwZSA9PT0gJ211bHRpdGV4dCcgfHwgcnVsZS50eXBlID09PSAndGFncycgfHwgcnVsZS50eXBlID09PSAnYWxpYXNlcycpIHtcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcob3B0aW9uRUwpXHJcbiAgICAgICAgICAgICAgICAuc2V0TmFtZSgnQWRkIGNvbnRlbnQnKVxyXG4gICAgICAgICAgICAgICAgLnNldERlc2MoJ3NlbGVjdCBob3cgdGhlIGNvbnRlbnQgc2hvdWxkIGJlIHN0b3JlZCcpXHJcbiAgICAgICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4gZHJvcGRvd25cclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwib3ZlcndyaXRlXCIsIFwicmVwbGFjZSBjb250ZW50XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcInN0YXJ0XCIsIFwicGxhY2Ugb24gc3RhcnRcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiZW5kXCIsIFwicGxhY2Ugb24gZW5kXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHJ1bGUuYWRkQ29udGVudClcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuYWRkQ29udGVudCA9IHZhbHVlID09PSAnb3ZlcndyaXRlJyA/ICdvdmVyd3JpdGUnIDogdmFsdWUgPT09ICdzdGFydCcgPyAnc3RhcnQnIDogJ2VuZCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJldmlldyhhY3RpdmVGaWxlLCBydWxlLCBwcmV2aWV3Q29tcG9uZW50LmlucHV0RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpbmNsdWRlRUwgPSBuZXcgU2V0dGluZyhvcHRpb25FTClcclxuICAgICAgICAuc2V0TmFtZSgnSW5jbHVkZSBGaWxlcyBhbmQgRm9sZGVycyBmb3IgdGhpcyBydWxlICcpXHJcbiAgICAgICAgLnNldERlc2MoYEN1cnJlbnRseSAke3J1bGUuaW5jbHVkZT8uc2VsZWN0ZWRGb2xkZXJzLmxlbmd0aCB8fCAwfSBmb2xkZXJzIGFuZCAke3J1bGUuaW5jbHVkZT8uc2VsZWN0ZWRGaWxlcy5sZW5ndGggfHwgMH0gZmlsZXMgd2lsbCBiZSAke3J1bGUuaW5jbHVkZT8ubW9kZSB8fCAnaW5jbHVkZSd9ZC5gKVxyXG4gICAgICAgIC5hZGRCdXR0b24oYnV0dG9uID0+IHtcclxuICAgICAgICAgICAgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAuc2V0SWNvbignZm9sZGVyLWNoZWNrJylcclxuICAgICAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KCdJbmNsdWRlJylcclxuICAgICAgICAgICAgICAgIC5zZXRDdGEoKSAvLyBNYWtlcyB0aGUgYnV0dG9uIG1vcmUgcHJvbWluZW50XHJcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlbkRpcmVjdG9yeVNlbGVjdGlvbk1vZGFsKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5pbmNsdWRlPy5zZWxlY3RlZEZvbGRlcnMgfHwgW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuaW5jbHVkZT8uc2VsZWN0ZWRGaWxlcyB8fCBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2luY2x1ZGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlLmluY2x1ZGU/LmRpc3BsYXkgfHwgJ2ZvbGRlcnMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSwgLy8gaW5jbHVkZSwgaW5jbHVkZSBvcHRpb24gaGlkZGVuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChyZXN1bHQ6IERpcmVjdG9yeVNlbGVjdGlvblJlc3VsdCB8IG51bGwpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJ1bGUuaW5jbHVkZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuaW5jbHVkZSA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfRklMVEVSX0ZJTEVTX0FORF9GT0xERVJTLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGUgOiAnaW5jbHVkZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5pbmNsdWRlLnNlbGVjdGVkRm9sZGVycyA9IHJlc3VsdC5mb2xkZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5pbmNsdWRlLnNlbGVjdGVkRmlsZXMgPSByZXN1bHQuZmlsZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLmluY2x1ZGUubW9kZSA9ICdpbmNsdWRlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuaW5jbHVkZS5kaXNwbGF5ID0gcmVzdWx0LmRpc3BsYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJ1bGUuaW5jbHVkZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUZpbHRlckluZGljYXRvcihhY3RpdmVGaWxlLCB0aGlzLnByb3BlcnRpZXNMaXN0RWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVkZUVMLnNldERlc2MoYEN1cnJlbnRseSAke3J1bGUuaW5jbHVkZT8uc2VsZWN0ZWRGb2xkZXJzLmxlbmd0aCB8fCAwfSBmb2xkZXJzIGFuZCAke3J1bGUuaW5jbHVkZT8uc2VsZWN0ZWRGaWxlcy5sZW5ndGggfHwgMH0gZmlsZXMgd2lsbCBiZSAke3J1bGUuaW5jbHVkZT8ubW9kZSB8fCAnaW5jbHVkZSd9ZC5gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGV4Y2x1ZGVFTCA9IG5ldyBTZXR0aW5nKG9wdGlvbkVMKVxyXG4gICAgICAgIC5zZXROYW1lKCdFeGNsdWRlIEZpbGVzIGFuZCBGb2xkZXJzIGZyb20gdGhpcyBydWxlJylcclxuICAgICAgICAuc2V0RGVzYyhgQ3VycmVudGx5ICR7cnVsZS5leGNsdWRlPy5zZWxlY3RlZEZvbGRlcnMubGVuZ3RoIHx8IDB9IGZvbGRlcnMgYW5kICR7cnVsZS5leGNsdWRlPy5zZWxlY3RlZEZpbGVzLmxlbmd0aCB8fCAwfSBmaWxlcyB3aWxsIGJlICR7cnVsZS5leGNsdWRlPy5tb2RlIHx8ICdleGNsdWRlJ31kLmApXHJcbiAgICAgICAgLmFkZEJ1dHRvbihidXR0b24gPT4ge1xyXG4gICAgICAgICAgICBidXR0b25cclxuICAgICAgICAgICAgICAgIC5zZXRJY29uKCdmb2xkZXIteCcpXHJcbiAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnRXhjbHVkZScpXHJcbiAgICAgICAgICAgICAgICAuc2V0Q3RhKCkgLy8gTWFrZXMgdGhlIGJ1dHRvbiBtb3JlIHByb21pbmVudFxyXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5EaXJlY3RvcnlTZWxlY3Rpb25Nb2RhbChcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuZXhjbHVkZT8uc2VsZWN0ZWRGb2xkZXJzIHx8IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlLmV4Y2x1ZGU/LnNlbGVjdGVkRmlsZXMgfHwgW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdleGNsdWRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5leGNsdWRlPy5kaXNwbGF5IHx8ICdmb2xkZXJzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsIC8vIGluY2x1ZGUsIGV4Y2x1ZGUgb3B0aW9uIGhpZGRlblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocmVzdWx0OiBEaXJlY3RvcnlTZWxlY3Rpb25SZXN1bHQgfCBudWxsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFydWxlLmV4Y2x1ZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLmV4Y2x1ZGU9T2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9GSUxURVJfRklMRVNfQU5EX0ZPTERFUlMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZSA6ICdleGNsdWRlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuZXhjbHVkZS5zZWxlY3RlZEZvbGRlcnMgPSByZXN1bHQuZm9sZGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuZXhjbHVkZS5zZWxlY3RlZEZpbGVzID0gcmVzdWx0LmZpbGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5leGNsdWRlLm1vZGUgPSAnZXhjbHVkZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLmV4Y2x1ZGUuZGlzcGxheSA9IHJlc3VsdC5kaXNwbGF5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhydWxlLmV4Y2x1ZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVGaWx0ZXJJbmRpY2F0b3IoYWN0aXZlRmlsZSwgdGhpcy5wcm9wZXJ0aWVzTGlzdEVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVFTC5zZXREZXNjKGBDdXJyZW50bHkgJHtydWxlLmV4Y2x1ZGU/LnNlbGVjdGVkRm9sZGVycy5sZW5ndGggfHwgMH0gZm9sZGVycyBhbmQgJHtydWxlLmV4Y2x1ZGU/LnNlbGVjdGVkRmlsZXMubGVuZ3RoIHx8IDB9IGZpbGVzIHdpbGwgYmUgJHtydWxlLmV4Y2x1ZGU/Lm1vZGUgfHwgJ2V4Y2x1ZGUnfWQuYClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgICAgICAgICAgXHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIG5ldyBTZXR0aW5nKG9wdGlvbkVMKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnU2NyaXB0JylcclxuICAgICAgICAgICAgLnNldERlc2MoJ2VkaXQgdGhlIHNjcmlwdCBmb3Igb3duIG1vZGlmaWNhdGlvbnMnKVxyXG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cclxuICAgICAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KCdKUyBFZGl0b3InKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5Db2RlRWRpdG9yTW9kYWwoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5jb250ZW50ID09PSAnc2NyaXB0JyA/IHJ1bGUuanNDb2RlIDogcnVsZS5idWlsZEluQ29kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS50eXBlUHJvcGVydHk/LnR5cGUgfHwgJ3RleHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVGaWxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVGaWxlID8gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYWN0aXZlRmlsZSk/LmZyb250bWF0dGVyIHx8IHt9IDoge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChyZXN1bHQ6IGNvZGVFZGl0b3JNb2RhbFJlc3VsdCB8IG51bGwpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocnVsZS5jb250ZW50ID09PSAnc2NyaXB0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuanNDb2RlID0gcmVzdWx0LmNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuYnVpbGRJbkNvZGUgPSByZXN1bHQuY29kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJTZWFyY2hSZXN1bHRzKHNlYXJjaENvbnRhaW5lckVsOiBIVE1MRWxlbWVudCwgc2VhcmNoVGVybTogc3RyaW5nLCByb3dJbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhclNlYXJjaFJlc3VsdHMoc2VhcmNoQ29udGFpbmVyRWwpO1xyXG5cclxuICAgICAgICBjb25zdCBmaWx0ZXJlZFByb3BlcnRpZXMgPSBPYmplY3QuZW50cmllcyh0aGlzLmtub3duUHJvcGVydGllcylcclxuICAgICAgICAgICAgLmZpbHRlcigoW25hbWVdKSA9PiBuYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc2VhcmNoVGVybS50b0xvd2VyQ2FzZSgpKSk7XHJcblxyXG4gICAgICAgIGlmIChmaWx0ZXJlZFByb3BlcnRpZXMubGVuZ3RoID09PSAwICYmIHNlYXJjaFRlcm0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmlsdGVyZWRQcm9wZXJ0aWVzLmxlbmd0aCA9PT0gMCAmJiAhc2VhcmNoVGVybSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByZXN1bHRzRWwgPSBzZWFyY2hDb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICdwcm9wZXJ0eS1zZWFyY2gtcmVzdWx0cyBtZW51JyB9KTtcclxuICAgICAgICByZXN1bHRzRWwuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICAgIHJlc3VsdHNFbC5zdHlsZS50b3AgPSAnMTAwJSc7XHJcbiAgICAgICAgcmVzdWx0c0VsLnN0eWxlLmxlZnQgPSAnMCc7XHJcbiAgICAgICAgcmVzdWx0c0VsLnN0eWxlLndpZHRoID0gJ2NhbGMoMTAwJSArIDEwMHB4KSc7XHJcbiAgICAgICAgcmVzdWx0c0VsLnN0eWxlLnpJbmRleCA9ICcxMCc7XHJcbiAgICAgICAgcmVzdWx0c0VsLnN0eWxlLm1heEhlaWdodCA9ICcyMDBweCc7XHJcbiAgICAgICAgcmVzdWx0c0VsLnN0eWxlLm92ZXJmbG93WSA9ICdhdXRvJztcclxuXHJcbiAgICAgICAgbGV0IGFjdGl2ZUluZGV4ID0gLTE7XHJcblxyXG4gICAgICAgIGNvbnN0IHVwZGF0ZUFjdGl2ZUl0ZW0gPSAobmV3SW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IHJlc3VsdHNFbC5xdWVyeVNlbGVjdG9yQWxsKCcubWVudS1pdGVtJyk7XHJcbiAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IG5ld0luZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5hZGRDbGFzcygncHJvcGVydHktc2VhcmNoLWlzLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uc2Nyb2xsSW50b1ZpZXcoeyBibG9jazogJ25lYXJlc3QnIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLnJlbW92ZUNsYXNzKCdwcm9wZXJ0eS1zZWFyY2gtaXMtYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBhY3RpdmVJbmRleCA9IG5ld0luZGV4O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHNlbGVjdEFjdGl2ZUl0ZW0gPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChhY3RpdmVJbmRleCA+PSAwICYmIGFjdGl2ZUluZGV4IDwgZmlsdGVyZWRQcm9wZXJ0aWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW25hbWUsIGluZm9dID0gZmlsdGVyZWRQcm9wZXJ0aWVzW2FjdGl2ZUluZGV4XTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzW3RoaXMuc2V0dGluZ3NQYXJhbWV0ZXJdW3Jvd0luZGV4XS5wcm9wZXJ0eSA9IG5hbWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5nc1t0aGlzLnNldHRpbmdzUGFyYW1ldGVyXVtyb3dJbmRleF0udHlwZSA9IGluZm8udHlwZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzW3RoaXMuc2V0dGluZ3NQYXJhbWV0ZXJdW3Jvd0luZGV4XS52YWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclNlYXJjaFJlc3VsdHMoc2VhcmNoQ29udGFpbmVyRWwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7IC8vIFJlLXJlbmRlclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZmlsdGVyZWRQcm9wZXJ0aWVzLmZvckVhY2goKFtuYW1lLCBpbmZvXSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbUVsID0gcmVzdWx0c0VsLmNyZWF0ZURpdih7IGNsczogJ21lbnUtaXRlbScgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1JY29uID0gaXRlbUVsLmNyZWF0ZVNwYW4oeyBjbHM6ICdtZW51LWl0ZW0taWNvbicgfSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZVByb3BlcnR5SWNvbihpdGVtSWNvbiwgaW5mby50eXBlKTtcclxuICAgICAgICAgICAgaXRlbUVsLmNyZWF0ZVNwYW4oeyB0ZXh0OiBuYW1lIH0pO1xyXG5cclxuICAgICAgICAgICAgaXRlbUVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGFzeW5jIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVJbmRleCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgc2VsZWN0QWN0aXZlSXRlbSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2VhcmNoQ29udGFpbmVyRWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGFzeW5jIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gcmVzdWx0c0VsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51LWl0ZW0nKTtcclxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnQXJyb3dEb3duJykge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlQWN0aXZlSXRlbSgoYWN0aXZlSW5kZXggKyAxKSAlIGl0ZW1zLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdBcnJvd1VwJykge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlQWN0aXZlSXRlbSgoYWN0aXZlSW5kZXggLSAxICsgaXRlbXMubGVuZ3RoKSAlIGl0ZW1zLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHNlbGVjdEFjdGl2ZUl0ZW0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyU2VhcmNoUmVzdWx0cyhzZWFyY2hDb250YWluZXJFbDogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCByZXN1bHRzRWwgPSBzZWFyY2hDb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKCcucHJvcGVydHktc2VhcmNoLXJlc3VsdHMnKTtcclxuICAgICAgICBpZiAocmVzdWx0c0VsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdHNFbC5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyVmFsdWVJbnB1dChjb250YWluZXJFbDogSFRNTEVsZW1lbnQsIHByb3BlcnR5SW5mbzogUHJvcGVydHlJbmZvIHwgdW5kZWZpbmVkLCBjdXJyZW50VmFsdWU6IGFueSwgaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIGxldCByZXR1cm5Db21wb25lbnQ7XHJcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTsgXHJcblxyXG4gICAgICAgIGlmICghcHJvcGVydHlJbmZvKSB7XHJcbiAgICAgICAgICAgICBjb250YWluZXJFbC5zZXRUZXh0KCcnKTtcclxuICAgICAgICAgICAgIGNvbnRhaW5lckVsLmFkZENsYXNzKCd0ZXh0LW11dGVkJyk7XHJcbiAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0eXBlID0gcHJvcGVydHlJbmZvLnR5cGU7XHJcblxyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdudW1iZXInOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuQ29tcG9uZW50ID0gbmV3IFRleHRDb21wb25lbnQoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdOdW1lcmljIFZhbHVlJylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUoY3VycmVudFZhbHVlICE9PSB1bmRlZmluZWQgJiYgY3VycmVudFZhbHVlICE9PSBudWxsID8gU3RyaW5nKGN1cnJlbnRWYWx1ZSkgOiAnJylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG51bVZhbHVlID0gdmFsdWUgPT09ICcnID8gdW5kZWZpbmVkIDogcGFyc2VGbG9hdCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzW3RoaXMuc2V0dGluZ3NQYXJhbWV0ZXJdW2luZGV4XS52YWx1ZSA9IGlzTmFOKG51bVZhbHVlIGFzIG51bWJlcikgPyB1bmRlZmluZWQgOiBudW1WYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5Db21wb25lbnQuaW5wdXRFbC50eXBlID0gJ251bWJlcic7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuQ29tcG9uZW50ID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiAndHJpLXN0YXRlLWNoZWNrYm94IGNsaWNrYWJsZS1pY29uJyB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybkNvbXBvbmVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnQ2hlY2tib3ggY2hhbmdlIHN0YXRlJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5Db21wb25lbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2NoZWNrYm94Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlQ2hlY2tib3hWaXN1YWwgPSAoc3RhdGU6IGJvb2xlYW4gfCB1bmRlZmluZWQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaWNvbk5hbWU6IHN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXJpYVN0YXRlOiAndHJ1ZScgfCAnZmFsc2UnIHwgJ21peGVkJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbk5hbWUgPSAnY2hlY2stc3F1YXJlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJpYVN0YXRlID0gJ3RydWUnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25OYW1lID0gJ3NxdWFyZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWFTdGF0ZSA9ICdmYWxzZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gdW5kZWZpbmVkIG9yIG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbk5hbWUgPSAnbWludXMtc3F1YXJlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJpYVN0YXRlID0gJ21peGVkJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0SWNvbihyZXR1cm5Db21wb25lbnQsIGljb25OYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5Db21wb25lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWNoZWNrZWQnLCBhcmlhU3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybkNvbXBvbmVudC5kYXRhc2V0LnN0YXRlID0gU3RyaW5nKHN0YXRlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgdXBkYXRlQ2hlY2tib3hWaXN1YWwoY3VycmVudFZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm5Db21wb25lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRTdGF0ZSA9IHJldHVybkNvbXBvbmVudC5kYXRhc2V0LnN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0U3RhdGU6IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U3RhdGUgPT09ICdmYWxzZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFN0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRTdGF0ZSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRTdGF0ZSA9IHVuZGVmaW5lZDsgXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRTdGF0ZSA9IGZhbHNlOyBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzW3RoaXMuc2V0dGluZ3NQYXJhbWV0ZXJdW2luZGV4XS52YWx1ZSA9IG5leHRTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ2hlY2tib3hWaXN1YWwobmV4dFN0YXRlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcclxuICAgICAgICAgICAgICAgIHJldHVybkNvbXBvbmVudCA9IG5ldyBUZXh0Q29tcG9uZW50KGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignWVlZWS1NTS1ERCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKGN1cnJlbnRWYWx1ZSB8fCAnJylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzW3RoaXMuc2V0dGluZ3NQYXJhbWV0ZXJdW2luZGV4XS52YWx1ZSA9IHZhbHVlIHx8IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5Db21wb25lbnQuaW5wdXRFbC50eXBlID0gJ2RhdGUnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2RhdGV0aW1lJzpcclxuICAgICAgICAgICAgICAgIHJldHVybkNvbXBvbmVudCA9IG5ldyBUZXh0Q29tcG9uZW50KGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignWVlZWS1NTS1ERFRISDptbScpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKGN1cnJlbnRWYWx1ZSB8fCAnJylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzW3RoaXMuc2V0dGluZ3NQYXJhbWV0ZXJdW2luZGV4XS52YWx1ZSA9IHZhbHVlIHx8IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5Db21wb25lbnQuaW5wdXRFbC50eXBlID0gJ2RhdGV0aW1lLWxvY2FsJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdhbGlhc2VzJzpcclxuICAgICAgICAgICAgY2FzZSAndGFncyc6XHJcbiAgICAgICAgICAgIGNhc2UgJ211bHRpdGV4dCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm5Db21wb25lbnQgPSBuZXcgVGV4dENvbXBvbmVudChjb250YWluZXJFbClcclxuICAgICAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ3ZhbHVlcyAoZGl2aWRlZCBieSBjb21tYSknKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShBcnJheS5pc0FycmF5KGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUuam9pbignLCAnKSA6IChjdXJyZW50VmFsdWUgfHwgJycpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJyYXlWYWx1ZSA9IHZhbHVlLnNwbGl0KCcsJykubWFwKHMgPT4gcy50cmltKCkpLmZpbHRlcihzID0+IHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5nc1t0aGlzLnNldHRpbmdzUGFyYW1ldGVyXVtpbmRleF0udmFsdWUgPSBhcnJheVZhbHVlLmxlbmd0aCA+IDAgPyBhcnJheVZhbHVlIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd0ZXh0JzpcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybkNvbXBvbmVudCA9IG5ldyBUZXh0Q29tcG9uZW50KGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcigndmFsdWUnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShjdXJyZW50VmFsdWUgfHwgJycpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5nc1t0aGlzLnNldHRpbmdzUGFyYW1ldGVyXVtpbmRleF0udmFsdWUgPSB2YWx1ZSB8fCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZSAhPT0gJ2NoZWNrYm94Jykge1xyXG4gICAgICAgICAgICByZXR1cm5Db21wb25lbnQuaW5wdXRFbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnOyAvLyBtYWtlIGl0IGludmlzaWJsZVxyXG4gICAgICAgICAgICByZXR1cm5Db21wb25lbnQuaW5wdXRFbC5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICAgICAgcmV0dXJuQ29tcG9uZW50LmlucHV0RWwuc3R5bGUuYm9yZGVyID0gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmV0dXJuQ29tcG9uZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHVwZGF0ZVByZXZpZXcoYWN0aXZlRmlsZSwgcnVsZSwgY29tcG9uZW50RWwpIHtcclxuICAgICAgICBpZiAoYWN0aXZlRmlsZSkge1xyXG4gICAgICAgICAgICBsZXQgcnVsZVJlc3VsdDtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKGFjdGl2ZUZpbGUsIChmcm9udG1hdHRlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcnVsZVJlc3VsdCA9IGV4ZWN1dGVSdWxlKHRoaXMuYXBwLCB0aGlzLnBsdWdpbi5zZXR0aW5ncywgYWN0aXZlRmlsZSwgJycsIHJ1bGUsIGZyb250bWF0dGVyKTtcclxuICAgICAgICAgICAgfSx7J210aW1lJzphY3RpdmVGaWxlLnN0YXQubXRpbWV9KTsgIFxyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgcnVsZVJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShydWxlUmVzdWx0KSkgY29tcG9uZW50RWwudmFsdWUgPSBydWxlUmVzdWx0LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudEVsLnZhbHVlID0gcnVsZVJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29tcG9uZW50RWwuc2V0VG9vbHRpcChjb21wb25lbnRFbC52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBhc3luYyBkaXNwbGF5KCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckVsID0gdGhpcy5jb250YWluZXI7XHJcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5mZXRjaEtub3duUHJvcGVydGllcygpO1xyXG5cclxuICAgICAgICB0aGlzLnByb3BlcnRpZXNMaXN0RWwgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoJ3Byb3BlcnRpZXMtbGlzdCcpO1xyXG5cclxuICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5ydWxlcy5mb3JFYWNoKChydWxlLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlclByb3BlcnR5Um93KHRoaXMucHJvcGVydGllc0xpc3RFbCwgcnVsZSwgaW5kZXgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgYWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVGaWx0ZXJJbmRpY2F0b3IoYWN0aXZlRmlsZSwgdGhpcy5wcm9wZXJ0aWVzTGlzdEVsKTtcclxuXHJcbiAgICAgICAgY29uc3QgYWRkQnRuQ29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiAnc2V0dGluZy1pdGVtLWNvbnRyb2wnIH0pO1xyXG4gICAgICAgIGFkZEJ0bkNvbnRhaW5lci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICdyaWdodCc7XHJcbiAgICAgICAgbmV3IEJ1dHRvbkNvbXBvbmVudChhZGRCdG5Db250YWluZXIpXHJcbiAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KCdFaWdlbnNjaGFmdCBoaW56dWZcdTAwRkNnZW4nKVxyXG4gICAgICAgICAgICAuc2V0SWNvbigncGx1cy1jaXJjbGUnKVxyXG4gICAgICAgICAgICAuc2V0Q3RhKClcclxuICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdE5hbWUgPSAnJzsgLy9PYmplY3Qua2V5cyh0aGlzLmtub3duUHJvcGVydGllcylbMF0gfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnBsdWdpbi5zZXR0aW5nc1t0aGlzLnNldHRpbmdzUGFyYW1ldGVyXS5wdXNoKHsgbmFtZTogZGVmYXVsdE5hbWUsIHZhbHVlOiB1bmRlZmluZWQgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5nc1t0aGlzLnNldHRpbmdzUGFyYW1ldGVyXS5wdXNoKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfUlVMRV9ERUZJTklUSU9OLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHJhbmRvbVVVSUQoKS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmJ1dHRvbkVsLmNsYXNzTmFtZT0ncHJvcGVydHktcGx1cy1idXR0b24nO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlRmlsdGVySW5kaWNhdG9yKGFjdGl2ZUZpbGUsIHByb3BlcnRpZXNMaXN0RWw6IEhUTUxEaXZFbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKGFjdGl2ZUZpbGUpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucnVsZXMuZm9yRWFjaCgocnVsZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5Um93RWwgPSBwcm9wZXJ0aWVzTGlzdEVsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Byb3BlcnR5LXNldHRpbmctcm93JylbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcGVydHlMZWZ0RGl2ID0gcHJvcGVydHlSb3dFbC5xdWVyeVNlbGVjdG9yKCcucHJvcGVydHktbGVmdC1jb250YWluZXInKTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGVja0lmRmlsZUFsbG93ZWQoYWN0aXZlRmlsZSwgdGhpcy5wbHVnaW4uc2V0dGluZ3MsIHJ1bGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlMZWZ0RGl2Py5hZGRDbGFzcygncHJvcGVydHktbGVmdC1jb250YWluZXItYWxsb3dlZCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eUxlZnREaXY/LnJlbW92ZUNsYXNzKCdwcm9wZXJ0eS1sZWZ0LWNvbnRhaW5lci1hbGxvd2VkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVQcm9wZXJ0eUljb24oaWNvbkVsOiBIVE1MRWxlbWVudCwgdHlwZTogT2JzaWRpYW5Qcm9wZXJ0eVR5cGVzIHwgdW5kZWZpbmVkKSB7XHJcbiAgICBsZXQgaWNvbk5hbWUgPSAnaGFzaCc7XHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICBjYXNlICd0ZXh0JzogaWNvbk5hbWUgPSAnYWxpZ24tbGVmdCc7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ251bWJlcic6IGljb25OYW1lID0gJ2JpbmFyeSc7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ211bHRpdGV4dCc6IGljb25OYW1lID0gJ2xpc3QnOyBicmVhaztcclxuICAgICAgICBjYXNlICdkYXRlJzogaWNvbk5hbWUgPSAnY2FsZW5kYXInOyBicmVhaztcclxuICAgICAgICBjYXNlICdkYXRldGltZSc6IGljb25OYW1lID0gJ2Nsb2NrJzsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnY2hlY2tib3gnOiBpY29uTmFtZSA9ICdjaGVjay1zcXVhcmUnOyBicmVhaztcclxuICAgICAgICBjYXNlICd0YWdzJzogaWNvbk5hbWUgPSAndGFncyc7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2FsaWFzZXMnOiBpY29uTmFtZSA9ICdmb3J3YXJkJzsgYnJlYWs7XHJcbiBcclxuICAgICAgICBkZWZhdWx0OiBpY29uTmFtZSA9ICdoZWxwLWNpcmNsZSc7XHJcbiAgICB9XHJcbiAgICBzZXRJY29uKGljb25FbCwgaWNvbk5hbWUpO1xyXG59IiwgIlxyXG5pbXBvcnQgeyBBcHAsIE1vZGFsLCBTZXR0aW5nLCBUQWJzdHJhY3RGaWxlLCBURmlsZSwgVEZvbGRlciwgVmF1bHQsIHNldEljb24sQnV0dG9uQ29tcG9uZW50LCBUZXh0Q29tcG9uZW50LCBDb25zdHJ1Y3RvciB9IGZyb20gJ29ic2lkaWFuJzsgLy8gQWRkZWQgc2V0SWNvblxyXG4vL2ltcG9ydCAnY29kZW1pcnJvci9tb2RlL2phdmFzY3JpcHQvamF2YXNjcmlwdCc7XHJcbmltcG9ydCB7IE9ic2lkaWFuUHJvcGVydHlUeXBlcyB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBwYXJzZUpTQ29kZSwgU2NyaXB0aW5nVG9vbHMgfSBmcm9tICcuL3Rvb2xzJztcclxuaW1wb3J0IHsgdXBkYXRlUHJvcGVydHlJY29uIH0gZnJvbSAnLi9zZXR0aW5ncy1wcm9wZXJ0aWVzJztcclxuLy9pbXBvcnQgeyBjaGRpciB9IGZyb20gJ25vZGU6cHJvY2Vzcyc7XHJcbi8vaW1wb3J0IHsgRWRpdG9yVmlldyB9IGZyb20gJ0Bjb2RlbWlycm9yL3ZpZXcnO1xyXG4vL2ltcG9ydCB7IEVkaXRvclN0YXRlIH0gZnJvbSAnQGNvZGVtaXJyb3Ivc3RhdGUnO1xyXG5cclxuXHJcbi8vIERlZmluZSB0aGUgcmVzdWx0IHN0cnVjdHVyZSByZXR1cm5lZCBieSB0aGUgbW9kYWxcclxuZXhwb3J0IGludGVyZmFjZSBjb2RlRWRpdG9yTW9kYWxSZXN1bHQge1xyXG4gICAgY29kZTogc3RyaW5nO1xyXG4gICAgdHlwZTogT2JzaWRpYW5Qcm9wZXJ0eVR5cGVzO1xyXG4gICAgY2hlY2tlZDogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIE9ic2lkaWFuIE1vZGFsIGZvciBzZWxlY3RpbmcgZGlyZWN0b3JpZXMgYW5kIGZpbGVzIGZyb20gdGhlIHZhdWx0IHN0cnVjdHVyZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBjb2RlRWRpdG9yTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcbiAgICAvLyBJbml0aWFsIHN0YXRlIHBhc3NlZCB0byB0aGUgbW9kYWwgKHN0b3JlZCBmb3IgcmVzZXQgZnVuY3Rpb25hbGl0eSlcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgaW5pdGlhbENvZGU6IHN0cmluZztcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgb2tDYWxsYmFjazogKHJlc3VsdDogY29kZUVkaXRvck1vZGFsUmVzdWx0IHwgbnVsbCkgPT4gdm9pZDtcclxuICAgIHByaXZhdGUgc2NyaXB0aW5nVG9vbHM6IFNjcmlwdGluZ1Rvb2xzO1xyXG4gICAgcHJpdmF0ZSBwbHVnaW46IGFueTtcclxuXHJcbiAgICAvLyBDdXJyZW50IHN0YXRlIGJlaW5nIG1vZGlmaWVkIHdpdGhpbiB0aGUgbW9kYWxcclxuICAgIHByaXZhdGUgY3VycmVudENvZGU6IHN0cmluZztcclxuICAgIHByaXZhdGUgZXhwZWN0ZWRUeXBlOiBPYnNpZGlhblByb3BlcnR5VHlwZXM7XHJcbiAgICBwcml2YXRlIGN1cnJlbnRUeXBlOiBPYnNpZGlhblByb3BlcnR5VHlwZXM7XHJcbiAgICBwcml2YXRlIGNoZWNrZWRTdWNjZXNzZnVsbHkgOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSB1c2VUZXh0QXJlYSA6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIGFjdGl2ZUZpbGU6IFRGaWxlIHwgVEZvbGRlciB8IG51bGxcclxuICAgIHByaXZhdGUgZnJvbnRtYXR0ZXI6IGFueTsgLy8gRnJvbnRtYXR0ZXIgZGF0YSBmb3IgdGhlIGFjdGl2ZSBmaWxlXHJcblxyXG4gICAgLy8gVUkgRWxlbWVudHNcclxuICAgIHByaXZhdGUgZWRpdG9yUm9vdEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBmdW5jdGlvblRlc3RCdXR0b246IEJ1dHRvbkNvbXBvbmVudDtcclxuICAgIHByaXZhdGUgZnVuY3Rpb25SZXN1bHRUZXh0Q29tcG9uZW50OiBUZXh0Q29tcG9uZW50IHwgdW5kZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSBjbUVkaXRvcjogQ29kZU1pcnJvci5FZGl0b3IgfCBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgRGlyZWN0b3J5U2VsZWN0aW9uTW9kYWwuXHJcbiAgICAgKiBAcGFyYW0gYXBwIC0gVGhlIE9ic2lkaWFuIEFwcCBpbnN0YW5jZS5cclxuICAgICAqIEBwYXJhbSBwbHVnaW4gLSBUaGUgcGx1Z2luIGluc3RhbmNlLlxyXG4gICAgICogQHBhcmFtIGluaXRpYWxDb2RlIC0gU3RyaW5nIHdpdGggdGhlIGluaXRpYWwgY29kZS5cclxuICAgICAqIEBwYXJhbSBleHBlY3RlZFR5cGUgLSBFeHBlY3RlZCByZXR1cm4gdHlwZS5cclxuICAgICAqIEBwYXJhbSBhY3RpdmVGaWxlIC0gVGhlIGN1cnJlbnRseSBhY3RpdmUgZmlsZSBvciBmb2xkZXIuXHJcbiAgICAgKiBAcGFyYW0gZnJvbnRtYXR0ZXIgLSBGcm9udG1hdHRlciBkYXRhIGZvciB0aGUgYWN0aXZlIGZpbGUuXHJcbiAgICAgKiBAcGFyYW0gb2tDYWxsYmFjayAtIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgdXNlciBjbGlja3MgXCJPS1wiLiBSZWNlaXZlcyB0aGUgc2VsZWN0aW9uIHJlc3VsdC5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgYXBwOiBBcHAsXHJcbiAgICAgICAgcGx1Z2luOiBhbnksXHJcbiAgICAgICAgaW5pdGlhbENvZGU6IHN0cmluZyxcclxuICAgICAgICBleHBlY3RlZFR5cGU6IE9ic2lkaWFuUHJvcGVydHlUeXBlcyxcclxuICAgICAgICBhY3RpdmVGaWxlOiBURmlsZSB8IFRGb2xkZXIgfCBudWxsLFxyXG4gICAgICAgIGZyb250bWF0dGVyOiBhbnksICAgXHJcbiAgICAgICAgb2tDYWxsYmFjazogKHJlc3VsdDogY29kZUVkaXRvck1vZGFsUmVzdWx0IHwgbnVsbCkgPT4gdm9pZFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgICAvLyBTdG9yZSBpbml0aWFsIHN0YXRlIGZvciByZXNldFxyXG4gICAgICAgIHRoaXMuaW5pdGlhbENvZGUgPSBpbml0aWFsQ29kZTtcclxuICAgICAgICB0aGlzLmV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZTtcclxuICAgICAgICB0aGlzLnVzZVRleHRBcmVhID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jaGVja2VkU3VjY2Vzc2Z1bGx5ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVGaWxlID0gYWN0aXZlRmlsZTtcclxuICAgICAgICB0aGlzLmZyb250bWF0dGVyID0gZnJvbnRtYXR0ZXI7IC8vIFN0b3JlIGZyb250bWF0dGVyIGRhdGFcclxuICAgICAgICB0aGlzLmN1cnJlbnRUeXBlID0gZXhwZWN0ZWRUeXBlOyAvLyBJbml0aWFsaXplIGN1cnJlbnQgdHlwZSB0byBleHBlY3RlZCB0eXBlXHJcbiAgICAgICAgdGhpcy5jdXJyZW50Q29kZSA9IGluaXRpYWxDb2RlOyAvLyBJbml0aWFsaXplIGN1cnJlbnQgY29kZSB0byBpbml0aWFsIGNvZGVcclxuXHJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgICAgICAgdGhpcy5zY3JpcHRpbmdUb29scz0gbmV3IFNjcmlwdGluZ1Rvb2xzKHRoaXMucGx1Z2luLnNldHRpbmdzLCB0aGlzLmZyb250bWF0dGVyKTtcclxuICAgICAgICB0aGlzLm9rQ2FsbGJhY2sgPSBva0NhbGxiYWNrO1xyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIGN1cnJlbnQgc3RhdGUgZnJvbSBpbml0aWFsIHN0YXRlIGZvciBlZGl0aW5nXHJcbiAgICAgICAgdGhpcy5yZXNldFNlbGVjdGlvblRvSW5pdGlhbCgpOyAvLyBVc2UgYSBtZXRob2QgZm9yIGluaXRpYWxpemF0aW9uIGFuZCByZXNldFxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzZXRzIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBzdGF0ZSB0byB0aGUgaW5pdGlhbCBzdGF0ZSBwcm92aWRlZCBhdCBjb25zdHJ1Y3Rpb24uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVzZXRTZWxlY3Rpb25Ub0luaXRpYWwoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Q29kZSA9IHRoaXMuaW5pdGlhbENvZGU7XHJcbiAgICAgICAgdGhpcy5jbUVkaXRvcj8uc2V0VmFsdWUodGhpcy5jdXJyZW50Q29kZSk7IC8vIFNldCB0aGUgaW5pdGlhbCBjb2RlIGluIHRoZSBlZGl0b3JcclxuICAgICAgICBpZiAodGhpcy5mdW5jdGlvblJlc3VsdFRleHRDb21wb25lbnQpIHRoaXMuZnVuY3Rpb25SZXN1bHRUZXh0Q29tcG9uZW50LnNldFZhbHVlKCcnKTsgLy8gQ2xlYXIgdGhlIHJlc3VsdCB0ZXh0IGNvbXBvbmVudFxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzZXRzIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBzdGF0ZSB0byBlbXB0eS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZXNldFNlbGVjdGlvblRvRW1wdHkoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Q29kZSA9IFwiZnVuY3Rpb24gKGFwcCwgZmlsZSwgdG9vbHMpIHsgLy8gZG8gbm90IGNoYW5nZSB0aGlzIGxpbmUhXFxuICBsZXQgcmVzdWx0ID0gJyc7XFxuICByZXR1cm4gcmVzdWx0O1xcbn1cIjtcclxuICAgICAgICB0aGlzLmNtRWRpdG9yPy5zZXRWYWx1ZSh0aGlzLmN1cnJlbnRDb2RlKTsgLy8gU2V0IHRoZSBpbml0aWFsIGNvZGUgaW4gdGhlIGVkaXRvclxyXG4gICAgICAgIGlmICh0aGlzLmZ1bmN0aW9uUmVzdWx0VGV4dENvbXBvbmVudCkgdGhpcy5mdW5jdGlvblJlc3VsdFRleHRDb21wb25lbnQuc2V0VmFsdWUoJycpOyAvLyBDbGVhciB0aGUgcmVzdWx0IHRleHQgY29tcG9uZW50IFxyXG4gICAgfVxyXG5cclxuICAgIGxvYWRDb2RlTWlycm9yTW9kZShtb2RlOiBzdHJpbmcpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgLy8gVmVyd2VuZGUgcmVxdWlyZSAoa1x1MDBGNm5udGUgaW4genVrXHUwMEZDbmZ0aWdlbiBWZXJzaW9uZW4gd2VuaWdlciB6dXZlcmxcdTAwRTRzc2lnIHNlaW4pXHJcbiAgICAgICAgICByZXF1aXJlKGBvYnNpZGlhbi9saWIvY29kZW1pcnJvci9tb2RlLyR7bW9kZX0vJHttb2RlfS5qc2ApO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYENvZGVNaXJyb3IgbW9kZSAnJHttb2RlfScgbG9hZGVkIHN1Y2Nlc3NmdWxseSAodXNpbmcgcmVxdWlyZSkuYCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBsb2FkIENvZGVNaXJyb3IgbW9kZSAnJHttb2RlfScgKHVzaW5nIHJlcXVpcmUpOmAsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBtb2RhbCBpcyBvcGVuZWQuIEJ1aWxkcyB0aGUgVUkuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIG9uT3BlbigpIHtcclxuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgICAgICBpZiAoY29udGVudEVsLnBhcmVudEVsZW1lbnQpIGNvbnRlbnRFbC5wYXJlbnRFbGVtZW50LnN0eWxlLndpZHRoID0gJzkwMHB4JztcclxuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTsgLy8gQ2xlYXIgcHJldmlvdXMgXHJcbiAgICAgICAgY29udGVudEVsLmFkZENsYXNzKCdjb2RlRWRpdG9yLW1vZGFsJyk7IFxyXG5cclxuICAgICAgICAvLyAtLS0gTW9kYWwgVGl0bGUgLS0tXHJcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ0phdmFTY3JpcHQgRWRpdG9yJyB9KTsgICAgXHJcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdib2R5JywgeyB0ZXh0OiBgTWFrZSBzdXJlIHlvdXIgY29kZSByZXN1bHRzOiAke3RoaXMuZXhwZWN0ZWRUeXBlfWAgfSk7IFxyXG5cclxuICAgICAgICAvLyAtLS0gVHJlZSBDb250YWluZXIgLS0tXHJcbiAgICAgICAgdGhpcy5lZGl0b3JSb290RWxlbWVudCA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6ICdjb2RlRWRpdG9yLWNvbnRhaW5lcicgfSk7XHJcbiAgICAgICAgLy8gQmFzaWMgc3R5bGluZyBmb3IgdGhlIHNjcm9sbGFibGUgdHJlZSBhcmVhXHJcbiAgICAgICAgLy8gdGhpcy5lZGl0b3JSb290RWxlbWVudC5zdHlsZS53aWR0aCA9ICc2MDBweCc7XHJcbiAgICAgICAgdGhpcy5lZGl0b3JSb290RWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnNjAwcHgnO1xyXG4gICAgICAgIHRoaXMuZWRpdG9yUm9vdEVsZW1lbnQuc3R5bGUub3ZlcmZsb3dZID0gJ2F1dG8nO1xyXG4gICAgICAgIC8vdGhpcy5lZGl0b3JSb290RWxlbWVudC5zdHlsZS5ib3JkZXIgPSAnMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKSc7XHJcbiAgICAgICAgdGhpcy5lZGl0b3JSb290RWxlbWVudC5zdHlsZS5wYWRkaW5nID0gJzEwcHgnO1xyXG4gICAgICAgIHRoaXMuZWRpdG9yUm9vdEVsZW1lbnQuc3R5bGUubWFyZ2luVG9wID0gJzEwcHgnO1xyXG4gICAgICAgIHRoaXMuZWRpdG9yUm9vdEVsZW1lbnQuc3R5bGUubWFyZ2luQm90dG9tID0gJzEwcHgnO1xyXG5cclxuICAgICAgICB0aGlzLmNtRWRpdG9yID0gbnVsbDtcclxuXHJcbiAgICAgICAgY29uc3QgcnVsZU9wdGlvbnNEaXYgPSBjb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiBcImNvZGVFZGl0b3Itb3B0aW9uc1wiIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy51c2VUZXh0QXJlYSkge1xyXG4gICAgICAgICAgICBjb25zdCBydWxlT3B0aW9uc1NldHRpbmdzID0gbmV3IFNldHRpbmcodGhpcy5lZGl0b3JSb290RWxlbWVudClcclxuICAgICAgICAgICAgICAgIC5hZGRUZXh0QXJlYSh0ZXh0QXJlYSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFyZWEuc2V0UGxhY2Vob2xkZXIoJ2VuZGVyIHZhbGlkIEpTIENvZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0QXJlYS5pbnB1dEVsLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgaGVpZ2h0OjE5MHB4OyB3aWR0aDo4MCU7YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFyZWEub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZ1bmN0aW9uVGVzdEJ1dHRvbikgdGhpcy5mdW5jdGlvblRlc3RCdXR0b24uYnV0dG9uRWwuYWRkQ2xhc3MoJ21vZC13YXJuaW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENvZGUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICBsZXQgdmlldyA9IG5ldyBFZGl0b3JWaWV3KHtcclxuICAgICAgICAgICAgICAgIHN0YXRlOiBFZGl0b3JTdGF0ZS5jcmVhdGUoe1xyXG4gICAgICAgICAgICAgICAgICBkb2M6IHRoaXMuY3VycmVudENvZGUsICAvLyBvciBzb21lIHN0cmluZyBjb250ZW50c1xyXG4gICAgICAgICAgICAgICAgICBleHRlbnNpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgRWRpdG9yVmlldy5saW5lV3JhcHBpbmcsIC8vIEFkZCB5b3VyIGV4dGVudGlvbnMgaGVyZVxyXG4gICAgICAgICAgICAgICAgICAgIGphdmFzY3JpcHQoKSxcclxuICAgICAgICAgICAgICAgICAgICAvLyBzY2VuZUd1dHRlciwgLy8gb3IgbGVhdmUgZW1wdHkgZm9yIGJhc2ljIGVkaXRvclxyXG4gICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IHRoaXMuZWRpdG9yUm9vdEVsZW1lbnRcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBDb2RlTWlycm9yIDVcclxuICAgICAgICAgICAgLy8gQ29kZU1pcnJvci1CaWJsaW90aGVrIGFicnVmZW5cclxuICAgICAgICAgICAgY29uc3QgQ29kZU1pcnJvciA9ICh3aW5kb3cgYXMgYW55KS5Db2RlTWlycm9yO1xyXG4gICAgICAgICAgICAvLyBTaWNoZXJzdGVsbGVuLCBkYXNzIENvZGVNaXJyb3IgZ2VsYWRlbiBpc3RcclxuICAgICAgICAgICAgaWYgKENvZGVNaXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIC8vIEphdmFTY3JpcHQtTW9kdXMgbGFkZW4gKGZhbGxzIG5vY2ggbmljaHQgZ2VsYWRlbilcclxuICAgICAgICAgICAgICAgIGlmICghQ29kZU1pcnJvci5tb2Rlcy5qYXZhc2NyaXB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkQ29kZU1pcnJvck1vZGUoJ2phdmFzY3JpcHQnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnamF2YVNjcmlwdCBzdXBwb3J0IGxvYWRlZCcpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIGxldCBqc0NvZGUgPSB0aGlzLmN1cnJlbnRDb2RlO1xyXG4gICAgICAgICAgICB0aGlzLmNtRWRpdG9yID0gQ29kZU1pcnJvcih0aGlzLmVkaXRvclJvb3RFbGVtZW50LCB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZToganNDb2RlIHx8IFwiZnVuY3Rpb24gKGFwcCwgZmlsZSwgdG9vbHMpIHsgLy8gZG8gbm90IGNoYW5nZSB0aGlzIGxpbmUhXFxuICBsZXQgcmVzdWx0ID0gJyc7XFxuICByZXR1cm4gcmVzdWx0OyAvLyByZXR1cm4geW91IHJlc3VsdC5cXG59XCIsXHJcbiAgICAgICAgICAgICAgICBtb2RlOiBcImphdmFzY3JpcHRcIixcclxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXJzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdGhlbWU6IFwib2JzaWRpYW5cIixcclxuICAgICAgICAgICAgICAgIGluZGVudFVuaXQ6IDQsICBcclxuICAgICAgICAgICAgICAgIGxpbmVXcmFwcGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICByZWFkT25seTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBvdXRlckhlaWdodDogJzYwMHB4JyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodGhpcy5jbUVkaXRvcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbUVkaXRvci5vbignY2hhbmdlJywgKGNtRWRpdG9yOiBDb2RlTWlycm9yLkVkaXRvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZ1bmN0aW9uVGVzdEJ1dHRvbikgdGhpcy5mdW5jdGlvblRlc3RCdXR0b24uYnV0dG9uRWwuYWRkQ2xhc3MoJ21vZC13YXJuaW5nJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY21FZGl0b3Iub24oJ2JsdXInLCAoY21FZGl0b3I6IENvZGVNaXJyb3IuRWRpdG9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29kZT0gY21FZGl0b3IuZ2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBBZGQgYSBidXR0b24gdG8gc2F2ZSB0aGUgY29kZVxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhydWxlT3B0aW9uc0RpdilcclxuICAgICAgICAgICAgICAgIC5hZGRCdXR0b24oKGJ1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZnVuY3Rpb25UZXN0QnV0dG9uID0gYnV0dG9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRXYXJuaW5nKClcclxuICAgICAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dChcIlJ1biBDb2RlXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJSdW4gdGhlIGNvZGUgYW5kIGNoZWNrIGZvciBlcnJvcnNcIilcclxuICAgICAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNtRWRpdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganNDb2RlID0gdGhpcy5jbUVkaXRvci5nZXRWYWx1ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1c2VyRnVuY3Rpb24gPSAgcGFyc2VKU0NvZGUoanNDb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdXNlckZ1bmN0aW9uID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlcnJvckhpbnQgPSBcIlNlZSBjb25zb2xlIGZvciBkZXRhaWxzIVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyRnVuY3Rpb24uY29udGFpbnMoJ1VuZXhwZWN0ZWQgdG9rZW4nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckhpbnQgPSBcIkRpZCB5b3UgbWlzc2VkIGEgc2VtaWNvbG9uICg7KT9cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZnVuY3Rpb25SZXN1bHRUZXh0Q29tcG9uZW50KSB0aGlzLmZ1bmN0aW9uUmVzdWx0VGV4dENvbXBvbmVudC5zZXRWYWx1ZShgU3ludGF4IGVycm9yOiAke3VzZXJGdW5jdGlvbn0hICR7ZXJyb3JIaW50fWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tlZFN1Y2Nlc3NmdWxseSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5idXR0b25FbC5hZGRDbGFzcygnbW9kLXdhcm5pbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJGdW5jdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdXNlckZ1bmN0aW9uKHRoaXMuYXBwLCB0aGlzLmFjdGl2ZUZpbGUsIHRoaXMuc2NyaXB0aW5nVG9vbHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5mdW5jdGlvblJlc3VsdFRleHRDb21wb25lbnQpIHRoaXMuZnVuY3Rpb25SZXN1bHRUZXh0Q29tcG9uZW50LnNldFZhbHVlKGAnJHtyZXN1bHQudG9TdHJpbmcoKX0nICgke3R5cGVvZiByZXN1bHR9KWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVUeXBlSWNvbnMocmVzdWx0LCB0eXBlc0NvbnRhaW5lciwgdGhpcy5leHBlY3RlZFR5cGUsIHRoaXMuY3VycmVudFR5cGUsIHRoaXMucGx1Z2luLnNldHRpbmdzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5idXR0b25FbC5yZW1vdmVDbGFzcygnbW9kLXdhcm5pbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tlZFN1Y2Nlc3NmdWxseSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZ1bmN0aW9uUmVzdWx0VGV4dENvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZnVuY3Rpb25SZXN1bHRUZXh0Q29tcG9uZW50LnNldFZhbHVlKGBTeW50YXggZXJyb3I6ICR7ZS5tZXNzYWdlfSEgU2VlIGNvbnNvbGUgZm9yIGRldGFpbHMhYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiU3ludGF4IGVycm9yLiBcIiwgZSwganNDb2RlLCB1c2VyRnVuY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja2VkU3VjY2Vzc2Z1bGx5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYnV0dG9uRWwuYWRkQ2xhc3MoJ21vZC13YXJuaW5nJyk7ICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcInN5bnRheCBlcnJvclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja2VkU3VjY2Vzc2Z1bGx5ID0gZmFsc2U7ICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZnVuY3Rpb25SZXN1bHRUZXh0Q29tcG9uZW50ID0gdGV4dDtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdmdW5jdGlvbiByZXN1bHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXREaXNhYmxlZCh0cnVlKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZnVuY3Rpb25SZXN1bHRUZXh0Q29tcG9uZW50LmlucHV0RWwuc3R5bGUud2lkdGggPSAnNTgwcHgnO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlc0NvbnRhaW5lciA9IHJ1bGVPcHRpb25zRGl2LmNyZWF0ZURpdih7IGNsczogJ3Byb3BlcnR5LWljb25zLWNvbnRhaW5lcicgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIC0tLSBBY3Rpb24gQnV0dG9ucyAtLS1cclxuICAgICAgICB0aGlzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoY29udGVudEVsKTsgLy8gQ3JlYXRlIE9LIGFuZCBSZXNldCBidXR0b25zXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlVHlwZUljb25zKHZhbHVlOmFueSwgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCwgZXhwZWN0ZWRUeXBlOiBPYnNpZGlhblByb3BlcnR5VHlwZXMsIGN1cnJlbnRUeXBlOiBPYnNpZGlhblByb3BlcnR5VHlwZXMsIHNldHRpbmdzOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBuZXdUeXBlID0gdHlwZW9mIHZhbHVlO1xyXG4gICAgICAgIGNvbnN0IHR5cGVJY29uczoge1trZXk6c3RyaW5nXTogT2JzaWRpYW5Qcm9wZXJ0eVR5cGVzW119ID0ge1xyXG4gICAgICAgICAgICAnc3RyaW5nJzogWyd0ZXh0JywgJ3RhZ3MnLCAnYWxpYXNlcycsICdtdWx0aXRleHQnLCdkYXRlJywgJ2RhdGV0aW1lJ10sXHJcbiAgICAgICAgICAgICdudW1iZXInOiBbJ251bWJlciddLFxyXG4gICAgICAgICAgICAnYm9vbGVhbic6IFsnY2hlY2tib3gnXSxcclxuICAgICAgICAgICAgJ29iamVjdCc6IFsndGFncycsICdhbGlhc2VzJywgJ211bHRpdGV4dCddXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAobmV3VHlwZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNjcmlwdGluZ1Rvb2xzLmlzSVNPU3RyaW5nKHZhbHVlLCB7d2l0aERhdGU6IHRydWV9KSkge1xyXG4gICAgICAgICAgICAgICAgdHlwZUljb25zW25ld1R5cGVdLnNwbGljZSh0eXBlSWNvbnNbbmV3VHlwZV0uaW5kZXhPZignZGF0ZScpLCAxKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGRhdGUgZm9ybWF0OlwiLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNjcmlwdGluZ1Rvb2xzLmlzSVNPU3RyaW5nKHZhbHVlLCB7d2l0aERhdGU6IHRydWUsIHdpdGhUaW1lOiB0cnVlfSkpIHtcclxuICAgICAgICAgICAgICAgIHR5cGVJY29uc1tuZXdUeXBlXS5zcGxpY2UodHlwZUljb25zW25ld1R5cGVdLmluZGV4T2YoJ2RhdGV0aW1lJyksIDEpOyBcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGRhdGUgZm9ybWF0OlwiLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGFpbmVyLmVtcHR5KCk7IC8vIENsZWFyIHRoZSBjb250YWluZXIgYmVmb3JlIGFkZGluZyBuZXcgaWNvbnNcclxuICAgICAgICBmb3IgKGxldCBvYnNpZGlhblR5cGUgb2YgdHlwZUljb25zW25ld1R5cGVdKSB7XHJcbiAgICAgICAgICAgIGlmIChvYnNpZGlhblR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGljb25FbCA9IGNvbnRhaW5lci5jcmVhdGVTcGFuKHsgY2xzOiAncHJvcGVydHktaWNvbiBzZXR0aW5nLWl0ZW0taWNvbicgfSk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVQcm9wZXJ0eUljb24oaWNvbkVsLCBvYnNpZGlhblR5cGUpOyAvLyBVcGRhdGUgdGhlIGljb24gYmFzZWQgb24gdGhlIHR5cGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgdGhlIFwiT0tcIiBhbmQgXCJSZXNldFwiIGJ1dHRvbnMuXHJcbiAgICAgKiBAcGFyYW0gY29udGFpbmVyRWwgLSBUaGUgSFRNTCBlbGVtZW50IHRvIGFwcGVuZCB0aGUgYnV0dG9ucyB0by5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVBY3Rpb25CdXR0b25zKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbnNFbCA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogJ21vZGFsLWJ1dHRvbnMnIH0pO1xyXG4gICAgICAgIGJ1dHRvbnNFbC5zdHlsZS5tYXJnaW5Ub3AgPSAnMTVweCc7XHJcbiAgICAgICAgYnV0dG9uc0VsLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7IC8vIFVzZSBmbGV4IGZvciBhbGlnbm1lbnRcclxuICAgICAgICBidXR0b25zRWwuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAnZmxleC1lbmQnOyAvLyBBbGlnbiBidXR0b25zIHRvIHRoZSByaWdodFxyXG4gICAgICAgIGJ1dHRvbnNFbC5zdHlsZS5nYXAgPSAnMTBweCc7IC8vIFNwYWNlIGJldHdlZW4gYnV0dG9uc1xyXG5cclxuICAgICAgICAvLyBSZXNldCBCdXR0b24gKFVuZG8gXHUyMUFBXHVGRTBGKVxyXG4gICAgICAgIGNvbnN0IHJlc2V0QnV0dG9uID0gYnV0dG9uc0VsLmNyZWF0ZUVsKCdidXR0b24nKTtcclxuICAgICAgICAvLyBVc2UgT2JzaWRpYW4ncyBzZXRJY29uIGZvciBjb25zaXN0ZW5jeSwgb3IgdXNlIHRleHRcclxuICAgICAgICBzZXRJY29uKHJlc2V0QnV0dG9uLCAncmVzZXQnKTsgLy8gVXNlIGEgc3VpdGFibGUgaWNvbiBsaWtlICdyZXNldCcgb3IgJ3VuZG8nXHJcbiAgICAgICAgcmVzZXRCdXR0b24uYXJpYUxhYmVsID0gJ1Jlc2V0IHNlbGVjdGlvbic7IC8vIEFjY2Vzc2liaWxpdHlcclxuICAgICAgICByZXNldEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0U2VsZWN0aW9uVG9Jbml0aWFsKCk7IC8vIFJlc2V0IGludGVybmFsIHN0YXRlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gQ2xlYXIgQnV0dG9uIChDbGVhciBcdUQ4M0RcdURFQUUpXHJcbiAgICAgICAgY29uc3QgZW1wdHlCdXR0b24gPSBidXR0b25zRWwuY3JlYXRlRWwoJ2J1dHRvbicpO1xyXG4gICAgICAgIC8vIFVzZSBPYnNpZGlhbidzIHNldEljb24gZm9yIGNvbnNpc3RlbmN5LCBvciB1c2UgdGV4dFxyXG4gICAgICAgIHNldEljb24oZW1wdHlCdXR0b24sICdlcmFzZXInKTsgLy8gVXNlIGEgc3VpdGFibGUgaWNvbiBsaWtlICdyZXNldCcgb3IgJ3VuZG8nXHJcbiAgICAgICAgZW1wdHlCdXR0b24uYXJpYUxhYmVsID0gJ0NsZWFyIHNlbGVjdGlvbic7IC8vIEFjY2Vzc2liaWxpdHlcclxuICAgICAgICBlbXB0eUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0U2VsZWN0aW9uVG9FbXB0eSgpOyAvLyBDbGVhciBzdGF0ZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGNhbmNlbCBCdXR0b25cclxuICAgICAgICBjb25zdCBjYW5jZWxCdXR0b24gPSBidXR0b25zRWwuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0NhbmNlbCcgfSk7XHJcbiAgICAgICAgY2FuY2VsQnV0dG9uLmFyaWFMYWJlbCA9ICdjbG9zZSBhbmQgZGlzY2FyZCBjaGFuZ2VzJzsgLy8gQWNjZXNzaWJpbGl0eVxyXG4gICAgICAgIGNhbmNlbEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhbmNlbCBDbGlja2VkIC0gUmV0dXJuaW5nXCIpOyAvLyBEZWJ1ZyBsb2dcclxuICAgICAgICAgICAgdGhpcy5va0NhbGxiYWNrKCBudWxsICk7IC8vIFBhc3MgdGhlIGZpbmFsIHNlbGVjdGlvbiBiYWNrXHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBPSyBCdXR0b25cclxuICAgICAgICBjb25zdCBva0J1dHRvbiA9IGJ1dHRvbnNFbC5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnT0snLCBjbHM6ICdtb2QtY3RhJyB9KTtcclxuICAgICAgICBjYW5jZWxCdXR0b24uYXJpYUxhYmVsID0gJ2Nsb3NlIGFuZCBzYXZlIGNoYW5nZXMnOyAvLyBBY2Nlc3NpYmlsaXR5XHJcbiAgICAgICAgb2tCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBtb2RhbCBpcyBjbG9zZWQuIENsZWFucyB1cCByZXNvdXJjZXMuXHJcbiAgICAgKi9cclxuICAgIG9uQ2xvc2UoKSB7XHJcbiAgICAgICAgLy8gR2F0aGVyIHRoZSBmaW5hbCBzdGF0ZSBPTkxZIHdoZW4gT0sgaXMgY2xpY2tlZFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogY29kZUVkaXRvck1vZGFsUmVzdWx0ID0ge1xyXG4gICAgICAgICAgICBjb2RlOiB0aGlzLmN1cnJlbnRDb2RlLFxyXG4gICAgICAgICAgICBjaGVja2VkOiB0aGlzLmNoZWNrZWRTdWNjZXNzZnVsbHksXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiT0sgQ2xpY2tlZCAtIFJldHVybmluZyBSZXN1bHQ6XCIsIHJlc3VsdCk7IC8vIERlYnVnIGxvZ1xyXG4gICAgICAgIHRoaXMub2tDYWxsYmFjayhyZXN1bHQpOyAvLyBQYXNzIHRoZSBmaW5hbCBzZWxlY3Rpb24gYmFja1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpOyAvLyBDbGVhciB0aGUgbW9kYWwncyBjb250ZW50XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZWFzaWx5IG9wZW4gdGhlIERpcmVjdG9yeSBTZWxlY3Rpb24gTW9kYWwuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcHAgLSBUaGUgT2JzaWRpYW4gQXBwIGluc3RhbmNlLlxyXG4gKiBAcGFyYW0gaW5pdGlhbENvZGUgLSBTdHJpbmcgd2l0aCB0aGUgaW5pdGlhbCBjb2RlLlxyXG4gKiBAcGFyYW0gZXhwZWN0ZWRUeXBlIC0gRXhwZWN0ZWQgcmV0dXJuIHR5cGUuXHJcbiAqIEBwYXJhbSBva0NhbGxiYWNrIC0gRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBcIk9LXCIuIFJlY2VpdmVzIHRoZSBzZWxlY3Rpb24gcmVzdWx0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG9wZW5Db2RlRWRpdG9yTW9kYWwoXHJcbiAgICBhcHA6IEFwcCxcclxuICAgIHBsdWdpbjogYW55LFxyXG4gICAgaW5pdGlhbENvZGU6IHN0cmluZyxcclxuICAgIGV4cGVjdGVkVHlwZTogT2JzaWRpYW5Qcm9wZXJ0eVR5cGVzLFxyXG4gICAgYWN0aXZlRmlsZTogVEZpbGUgfCBURm9sZGVyIHwgbnVsbCxcclxuICAgIGZyb250bWF0dGVyOiBhbnksXHJcbiAgICBva0NhbGxiYWNrOiAocmVzdWx0OiBjb2RlRWRpdG9yTW9kYWxSZXN1bHQgfCBudWxsKSA9PiB2b2lkXHJcbik6IHZvaWQge1xyXG4gICAgLy8gQ3JlYXRlIGFuZCBvcGVuIHRoZSBtb2RhbCBpbnN0YW5jZVxyXG4gICAgbmV3IGNvZGVFZGl0b3JNb2RhbChcclxuICAgICAgICBhcHAsXHJcbiAgICAgICAgcGx1Z2luLFxyXG4gICAgICAgIGluaXRpYWxDb2RlLFxyXG4gICAgICAgIGV4cGVjdGVkVHlwZSxcclxuICAgICAgICBhY3RpdmVGaWxlLFxyXG4gICAgICAgIGZyb250bWF0dGVyLFxyXG4gICAgICAgIG9rQ2FsbGJhY2tcclxuICAgICkub3BlbigpO1xyXG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFBLG1CQUE2STs7O0FDQTdJLElBQUFDLG1CQUFrRzs7O0FDQWxHLHNCQUFpRDtBQTBDMUMsU0FBUyxpQ0FBaUMsS0FBOEI7QUFDM0UsTUFBSTtBQUNBLFVBQU0sa0JBQW1C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QUFFO0FBQ3pGLGtCQUFZLEtBQUssUUFBUSxJQUFJLFdBQVcsS0FBSyxLQUFLLEtBQUssVUFBVSxNQUFNLFlBQVksS0FBSyxRQUFRLEdBQUcsTUFBTSxXQUFXO0FBQ3BILFVBQUksTUFBTSxRQUFRLFlBQVksS0FBSyxRQUFRLENBQUM7QUFBRyxjQUFNLFNBQVMsWUFBWSxLQUFLLFFBQVEsRUFBRTtBQUFBLElBQzdGLEdBQUUsRUFBQyxTQUFRLEtBQUssS0FBSyxNQUFLLENBQUM7QUFDM0IsV0FBTztBQUFBLEVBQ1g7QUFDSjsiLAogICJuYW1lcyI6IFsiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJqc0NvZGUiLCAidGV4dCIsICJ2YWx1ZSIsICJ0b29scyIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9jcnlwdG8iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJqc0NvZGUiLCAiX2EiLCAiX2IiLCAiX2MiLCAicnVsZSJdCn0K
